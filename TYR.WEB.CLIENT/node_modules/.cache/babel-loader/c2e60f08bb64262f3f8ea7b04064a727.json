{"ast":null,"code":"import { connect } from 'react-redux';\nimport { Animals } from './FtrAnimals';\nimport { addAnimalCall, getAnimalListCall, updateAnimalCall, deleteAnimalCall, setSelectedAnimal, getAnimalMilestoneListCall } from '../../redux/animal/action';\nimport { uploadImageCall, deleteImageCall } from '../../redux/common/action';\nimport { setSelectedPco } from '../../redux/pco/action';\nconst mapStateToProps = state => ({\n  getAnimalListLoading: state.animal.getAnimalListLoading,\n  getAnimalListSuccess: state.animal.getAnimalListSuccess,\n  animalList: state.animal.animalList,\n  selectedAnimalId: state.animal.selectedId,\n  selectedPcoId: state.pco.selectedId,\n  addAnimalLoading: state.animal.addAnimalLoading,\n  addAnimalSuccess: state.animal.addAnimalSuccess,\n  updateAnimalLoading: state.animal.updateAnimalLoading,\n  updateAnimalSuccess: state.animal.updateAnimalSuccess,\n  totalNumber: state.animal.allAnimalCount,\n  currentPage: state.animal.currentPage,\n  pcoList: state.pco.pcoList\n});\nconst mapDispatchToProps = dispatch => ({\n  addAnimalCall: (data, callbackFunction) => dispatch(addAnimalCall(data, callbackFunction)),\n  setSelectedPcoId: data => dispatch(setSelectedPco(data)),\n  setSelectedAnimal: data => dispatch(setSelectedAnimal(data)),\n  getAnimalListCall: (data, callbackFunction) => dispatch(getAnimalListCall(data, callbackFunction)),\n  getAnimalListSuggestionCall: (data, callbackFunction) => dispatch(addAnimalCall(data, callbackFunction)),\n  updateAnimalCall: (data, callbackFunction) => dispatch(updateAnimalCall(data, callbackFunction)),\n  deleteAnimalCall: (data, callbackFunction) => dispatch(deleteAnimalCall(data, callbackFunction)),\n  getAnimalMilestoneListCall: (data, callbackFunction) => dispatch(getAnimalMilestoneListCall(data, callbackFunction)),\n  uploadImageCall: (data, callbackFunction) => dispatch(uploadImageCall(data, callbackFunction)),\n  deleteImageCall: (data, callbackFunction) => dispatch(deleteImageCall(data, callbackFunction))\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(Animals);","map":{"version":3,"names":["connect","Animals","addAnimalCall","getAnimalListCall","updateAnimalCall","deleteAnimalCall","setSelectedAnimal","getAnimalMilestoneListCall","uploadImageCall","deleteImageCall","setSelectedPco","mapStateToProps","state","getAnimalListLoading","animal","getAnimalListSuccess","animalList","selectedAnimalId","selectedId","selectedPcoId","pco","addAnimalLoading","addAnimalSuccess","updateAnimalLoading","updateAnimalSuccess","totalNumber","allAnimalCount","currentPage","pcoList","mapDispatchToProps","dispatch","data","callbackFunction","setSelectedPcoId","getAnimalListSuggestionCall"],"sources":["/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/animals/index.ts"],"sourcesContent":["import { connect } from 'react-redux';\nimport { Animals } from './FtrAnimals';\nimport {\n  addAnimalCall, getAnimalListCall, updateAnimalCall, deleteAnimalCall, setSelectedAnimal, getAnimalMilestoneListCall,\n} from '../../redux/animal/action';\nimport { uploadImageCall, deleteImageCall } from '../../redux/common/action';\nimport {\n  setSelectedPco,\n} from '../../redux/pco/action';\n\nconst mapStateToProps = (state: any) => ({\n  getAnimalListLoading: state.animal.getAnimalListLoading,\n  getAnimalListSuccess: state.animal.getAnimalListSuccess,\n  animalList: state.animal.animalList,\n  selectedAnimalId: state.animal.selectedId,\n  selectedPcoId: state.pco.selectedId,\n  addAnimalLoading: state.animal.addAnimalLoading,\n  addAnimalSuccess: state.animal.addAnimalSuccess,\n  updateAnimalLoading: state.animal.updateAnimalLoading,\n  updateAnimalSuccess: state.animal.updateAnimalSuccess,\n  totalNumber: state.animal.allAnimalCount,\n  currentPage: state.animal.currentPage,\n  pcoList: state.pco.pcoList,\n});\n\nconst mapDispatchToProps = (dispatch: any) => ({\n  addAnimalCall: (data: any, callbackFunction: () => void) => dispatch(addAnimalCall(data, callbackFunction)),\n  setSelectedPcoId: (data: any) => dispatch(setSelectedPco(data)),\n  setSelectedAnimal: (data: any) => dispatch(setSelectedAnimal(data)),\n  getAnimalListCall: (data: any, callbackFunction: () => void) => dispatch(getAnimalListCall(data, callbackFunction)),\n  getAnimalListSuggestionCall: (data: any, callbackFunction: () => void) => dispatch(addAnimalCall(data, callbackFunction)),\n  updateAnimalCall: (data: any, callbackFunction: () => void) => dispatch(updateAnimalCall(data, callbackFunction)),\n  deleteAnimalCall: (data: any, callbackFunction: () => void) => dispatch(deleteAnimalCall(data, callbackFunction)),\n  getAnimalMilestoneListCall: (data: any, callbackFunction: () => void) => dispatch(getAnimalMilestoneListCall(data, callbackFunction)),\n  uploadImageCall: (data: any, callbackFunction: () => void) => dispatch(uploadImageCall(data, callbackFunction)),\n  deleteImageCall: (data: any, callbackFunction: () => void) => dispatch(deleteImageCall(data, callbackFunction)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Animals);\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,aAAa;AACrC,SAASC,OAAO,QAAQ,cAAc;AACtC,SACEC,aAAa,EAAEC,iBAAiB,EAAEC,gBAAgB,EAAEC,gBAAgB,EAAEC,iBAAiB,EAAEC,0BAA0B,QAC9G,2BAA2B;AAClC,SAASC,eAAe,EAAEC,eAAe,QAAQ,2BAA2B;AAC5E,SACEC,cAAc,QACT,wBAAwB;AAE/B,MAAMC,eAAe,GAAIC,KAAU,KAAM;EACvCC,oBAAoB,EAAED,KAAK,CAACE,MAAM,CAACD,oBAAoB;EACvDE,oBAAoB,EAAEH,KAAK,CAACE,MAAM,CAACC,oBAAoB;EACvDC,UAAU,EAAEJ,KAAK,CAACE,MAAM,CAACE,UAAU;EACnCC,gBAAgB,EAAEL,KAAK,CAACE,MAAM,CAACI,UAAU;EACzCC,aAAa,EAAEP,KAAK,CAACQ,GAAG,CAACF,UAAU;EACnCG,gBAAgB,EAAET,KAAK,CAACE,MAAM,CAACO,gBAAgB;EAC/CC,gBAAgB,EAAEV,KAAK,CAACE,MAAM,CAACQ,gBAAgB;EAC/CC,mBAAmB,EAAEX,KAAK,CAACE,MAAM,CAACS,mBAAmB;EACrDC,mBAAmB,EAAEZ,KAAK,CAACE,MAAM,CAACU,mBAAmB;EACrDC,WAAW,EAAEb,KAAK,CAACE,MAAM,CAACY,cAAc;EACxCC,WAAW,EAAEf,KAAK,CAACE,MAAM,CAACa,WAAW;EACrCC,OAAO,EAAEhB,KAAK,CAACQ,GAAG,CAACQ;AACrB,CAAC,CAAC;AAEF,MAAMC,kBAAkB,GAAIC,QAAa,KAAM;EAC7C5B,aAAa,EAAE,CAAC6B,IAAS,EAAEC,gBAA4B,KAAKF,QAAQ,CAAC5B,aAAa,CAAC6B,IAAI,EAAEC,gBAAgB,CAAC,CAAC;EAC3GC,gBAAgB,EAAGF,IAAS,IAAKD,QAAQ,CAACpB,cAAc,CAACqB,IAAI,CAAC,CAAC;EAC/DzB,iBAAiB,EAAGyB,IAAS,IAAKD,QAAQ,CAACxB,iBAAiB,CAACyB,IAAI,CAAC,CAAC;EACnE5B,iBAAiB,EAAE,CAAC4B,IAAS,EAAEC,gBAA4B,KAAKF,QAAQ,CAAC3B,iBAAiB,CAAC4B,IAAI,EAAEC,gBAAgB,CAAC,CAAC;EACnHE,2BAA2B,EAAE,CAACH,IAAS,EAAEC,gBAA4B,KAAKF,QAAQ,CAAC5B,aAAa,CAAC6B,IAAI,EAAEC,gBAAgB,CAAC,CAAC;EACzH5B,gBAAgB,EAAE,CAAC2B,IAAS,EAAEC,gBAA4B,KAAKF,QAAQ,CAAC1B,gBAAgB,CAAC2B,IAAI,EAAEC,gBAAgB,CAAC,CAAC;EACjH3B,gBAAgB,EAAE,CAAC0B,IAAS,EAAEC,gBAA4B,KAAKF,QAAQ,CAACzB,gBAAgB,CAAC0B,IAAI,EAAEC,gBAAgB,CAAC,CAAC;EACjHzB,0BAA0B,EAAE,CAACwB,IAAS,EAAEC,gBAA4B,KAAKF,QAAQ,CAACvB,0BAA0B,CAACwB,IAAI,EAAEC,gBAAgB,CAAC,CAAC;EACrIxB,eAAe,EAAE,CAACuB,IAAS,EAAEC,gBAA4B,KAAKF,QAAQ,CAACtB,eAAe,CAACuB,IAAI,EAAEC,gBAAgB,CAAC,CAAC;EAC/GvB,eAAe,EAAE,CAACsB,IAAS,EAAEC,gBAA4B,KAAKF,QAAQ,CAACrB,eAAe,CAACsB,IAAI,EAAEC,gBAAgB,CAAC;AAChH,CAAC,CAAC;AAEF,eAAehC,OAAO,CAACW,eAAe,EAAEkB,kBAAkB,CAAC,CAAC5B,OAAO,CAAC"},"metadata":{},"sourceType":"module"}