{"ast":null,"code":"import { connect } from 'react-redux';\nimport Cookies from 'universal-cookie';\nimport { addPCOCall, updatePCOCall, deletePCOCall, getPcoListCall, setSelectedPco, getPcoListSuggestionCall } from '../../redux/pco/action';\nimport { uploadImageCall, deleteImageCall } from '../../redux/common/action';\nimport { PCO } from './PCO';\nconst cookies = new Cookies();\nconst mapStateToProps = state => ({\n  getPcoListLoading: state.pco.getPcoListLoading,\n  getPcoListSuccess: state.pco.getPcoListSuccess,\n  pcoList: state.pco.pcoList,\n  selectedId: state.pco.selectedId,\n  addPcoLoading: state.pco.addPcoLoading,\n  addPcoSuccess: state.pco.addPcoSuccess,\n  updatePcoLoading: state.pco.updatePcoLoading,\n  updatePcoSuccess: state.pco.updatePcoSuccess,\n  totalNumber: state.pco.allPcoCount,\n  currentPage: state.pco.currentPage,\n  userCountryCode: state.auth.countryCode || cookies.get('loginDetails').userCountryCode\n});\nconst mapDispatchToProps = dispatch => ({\n  addPCOCall: (data, callbackFunction) => dispatch(addPCOCall(data, callbackFunction)),\n  updatePCOCall: (data, callbackFunction) => dispatch(updatePCOCall(data, callbackFunction)),\n  deletePCOCall: (data, callbackFunction) => dispatch(deletePCOCall(data, callbackFunction)),\n  getPcoListCall: (data, callbackFunction) => dispatch(getPcoListCall(data, callbackFunction)),\n  uploadImageCall: (data, callbackFunction) => dispatch(uploadImageCall(data, callbackFunction)),\n  deleteImageCall: (data, callbackFunction) => dispatch(deleteImageCall(data, callbackFunction)),\n  getPcoListSuggestionCall: (data, callbackFunction) => dispatch(getPcoListSuggestionCall(data, callbackFunction)),\n  setSelectedPco: data => dispatch(setSelectedPco(data))\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(PCO);","map":{"version":3,"names":["connect","Cookies","addPCOCall","updatePCOCall","deletePCOCall","getPcoListCall","setSelectedPco","getPcoListSuggestionCall","uploadImageCall","deleteImageCall","PCO","cookies","mapStateToProps","state","getPcoListLoading","pco","getPcoListSuccess","pcoList","selectedId","addPcoLoading","addPcoSuccess","updatePcoLoading","updatePcoSuccess","totalNumber","allPcoCount","currentPage","userCountryCode","auth","countryCode","get","mapDispatchToProps","dispatch","data","callbackFunction"],"sources":["/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/pco/index.ts"],"sourcesContent":["import { connect } from 'react-redux';\nimport Cookies from 'universal-cookie';\nimport {\n  addPCOCall, updatePCOCall, deletePCOCall, getPcoListCall, setSelectedPco, getPcoListSuggestionCall,\n} from '../../redux/pco/action';\nimport { uploadImageCall, deleteImageCall } from '../../redux/common/action';\nimport { PCO } from './PCO';\n\nconst cookies = new Cookies();\n\nconst mapStateToProps = (state: any) => ({\n  getPcoListLoading: state.pco.getPcoListLoading,\n  getPcoListSuccess: state.pco.getPcoListSuccess,\n  pcoList: state.pco.pcoList,\n  selectedId: state.pco.selectedId,\n  addPcoLoading: state.pco.addPcoLoading,\n  addPcoSuccess: state.pco.addPcoSuccess,\n  updatePcoLoading: state.pco.updatePcoLoading,\n  updatePcoSuccess: state.pco.updatePcoSuccess,\n  totalNumber: state.pco.allPcoCount,\n  currentPage: state.pco.currentPage,\n  userCountryCode: state.auth.countryCode || cookies.get('loginDetails').userCountryCode,\n});\n\nconst mapDispatchToProps = (dispatch: any) => ({\n  addPCOCall: (data: {}, callbackFunction: () => void) => dispatch(addPCOCall(data, callbackFunction)),\n  updatePCOCall: (data: {}, callbackFunction: () => void) => dispatch(updatePCOCall(data, callbackFunction)),\n  deletePCOCall: (data: {}, callbackFunction: () => void) => dispatch(deletePCOCall(data, callbackFunction)),\n  getPcoListCall: (data: {}, callbackFunction: () => void) => dispatch(getPcoListCall(data, callbackFunction)),\n  uploadImageCall: (data: {}, callbackFunction: () => void) => dispatch(uploadImageCall(data, callbackFunction)),\n  deleteImageCall: (data: {}, callbackFunction: () => void) => dispatch(deleteImageCall(data, callbackFunction)),\n  getPcoListSuggestionCall: (data: {}, callbackFunction: () => void) => dispatch(getPcoListSuggestionCall(data, callbackFunction)),\n  setSelectedPco: (data: any) => dispatch(setSelectedPco(data)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PCO);\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,aAAa;AACrC,OAAOC,OAAO,MAAM,kBAAkB;AACtC,SACEC,UAAU,EAAEC,aAAa,EAAEC,aAAa,EAAEC,cAAc,EAAEC,cAAc,EAAEC,wBAAwB,QAC7F,wBAAwB;AAC/B,SAASC,eAAe,EAAEC,eAAe,QAAQ,2BAA2B;AAC5E,SAASC,GAAG,QAAQ,OAAO;AAE3B,MAAMC,OAAO,GAAG,IAAIV,OAAO,EAAE;AAE7B,MAAMW,eAAe,GAAIC,KAAU,KAAM;EACvCC,iBAAiB,EAAED,KAAK,CAACE,GAAG,CAACD,iBAAiB;EAC9CE,iBAAiB,EAAEH,KAAK,CAACE,GAAG,CAACC,iBAAiB;EAC9CC,OAAO,EAAEJ,KAAK,CAACE,GAAG,CAACE,OAAO;EAC1BC,UAAU,EAAEL,KAAK,CAACE,GAAG,CAACG,UAAU;EAChCC,aAAa,EAAEN,KAAK,CAACE,GAAG,CAACI,aAAa;EACtCC,aAAa,EAAEP,KAAK,CAACE,GAAG,CAACK,aAAa;EACtCC,gBAAgB,EAAER,KAAK,CAACE,GAAG,CAACM,gBAAgB;EAC5CC,gBAAgB,EAAET,KAAK,CAACE,GAAG,CAACO,gBAAgB;EAC5CC,WAAW,EAAEV,KAAK,CAACE,GAAG,CAACS,WAAW;EAClCC,WAAW,EAAEZ,KAAK,CAACE,GAAG,CAACU,WAAW;EAClCC,eAAe,EAAEb,KAAK,CAACc,IAAI,CAACC,WAAW,IAAIjB,OAAO,CAACkB,GAAG,CAAC,cAAc,CAAC,CAACH;AACzE,CAAC,CAAC;AAEF,MAAMI,kBAAkB,GAAIC,QAAa,KAAM;EAC7C7B,UAAU,EAAE,CAAC8B,IAAQ,EAAEC,gBAA4B,KAAKF,QAAQ,CAAC7B,UAAU,CAAC8B,IAAI,EAAEC,gBAAgB,CAAC,CAAC;EACpG9B,aAAa,EAAE,CAAC6B,IAAQ,EAAEC,gBAA4B,KAAKF,QAAQ,CAAC5B,aAAa,CAAC6B,IAAI,EAAEC,gBAAgB,CAAC,CAAC;EAC1G7B,aAAa,EAAE,CAAC4B,IAAQ,EAAEC,gBAA4B,KAAKF,QAAQ,CAAC3B,aAAa,CAAC4B,IAAI,EAAEC,gBAAgB,CAAC,CAAC;EAC1G5B,cAAc,EAAE,CAAC2B,IAAQ,EAAEC,gBAA4B,KAAKF,QAAQ,CAAC1B,cAAc,CAAC2B,IAAI,EAAEC,gBAAgB,CAAC,CAAC;EAC5GzB,eAAe,EAAE,CAACwB,IAAQ,EAAEC,gBAA4B,KAAKF,QAAQ,CAACvB,eAAe,CAACwB,IAAI,EAAEC,gBAAgB,CAAC,CAAC;EAC9GxB,eAAe,EAAE,CAACuB,IAAQ,EAAEC,gBAA4B,KAAKF,QAAQ,CAACtB,eAAe,CAACuB,IAAI,EAAEC,gBAAgB,CAAC,CAAC;EAC9G1B,wBAAwB,EAAE,CAACyB,IAAQ,EAAEC,gBAA4B,KAAKF,QAAQ,CAACxB,wBAAwB,CAACyB,IAAI,EAAEC,gBAAgB,CAAC,CAAC;EAChI3B,cAAc,EAAG0B,IAAS,IAAKD,QAAQ,CAACzB,cAAc,CAAC0B,IAAI,CAAC;AAC9D,CAAC,CAAC;AAEF,eAAehC,OAAO,CAACY,eAAe,EAAEkB,kBAAkB,CAAC,CAACpB,GAAG,CAAC"},"metadata":{},"sourceType":"module"}