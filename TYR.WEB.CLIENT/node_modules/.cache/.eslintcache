[{"/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/index.tsx":"1","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/reportWebVitals.ts":"2","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/redux/store.ts":"3","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/App.tsx":"4","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/redux/root-reducer.ts":"5","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/shared/api/apiWrapper.ts":"6","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/queries/FtrQueries.tsx":"7","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/reports/FtrReports.tsx":"8","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/help/FtrHelp.tsx":"9","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/searches/FtrSearches.tsx":"10","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/shared/components/BreadCrumb.tsx":"11","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/config.js":"12","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/customization/index.ts":"13","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/users/index.ts":"14","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/animals/index.ts":"15","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/pco/index.ts":"16","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/signup/index.ts":"17","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/dashboard/index.ts":"18","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/invite/index.ts":"19","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/login/index.ts":"20","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/landing/index.ts":"21","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/animals/milestones/index.ts":"22","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/forgot_password_username/index.ts":"23","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/admin_signup_confirm/index.ts":"24","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/ResetPassword/index.ts":"25","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/redux/pco/index.ts":"26","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/redux/auth/index.ts":"27","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/redux/animal/index.ts":"28","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/redux/common/index.ts":"29","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/redux/user/index.ts":"30","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/redux/user/action.ts":"31","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/redux/animal/action.ts":"32","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/redux/common/action.ts":"33","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/redux/pco/action.ts":"34","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/redux/auth/action.ts":"35","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/customization/Customization.tsx":"36","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/users/Users.tsx":"37","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/animals/FtrAnimals.tsx":"38","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/pco/PCO.tsx":"39","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/dashboard/Dashboard.tsx":"40","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/login/Login.tsx":"41","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/signup/Signup.tsx":"42","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/invite/Invite.tsx":"43","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/landing/LandingPage.tsx":"44","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/animals/milestones/AnimalMilestone.tsx":"45","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/admin_signup_confirm/ConfirmPage.tsx":"46","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/forgot_password_username/ForgotUsernamePassword.tsx":"47","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/ResetPassword/ResetPassword.tsx":"48","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/redux/pco/reducer.ts":"49","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/redux/auth/reducer.ts":"50","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/redux/animal/reducer.ts":"51","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/redux/common/reducer.ts":"52","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/redux/user/reducer.ts":"53","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/redux/user/types.ts":"54","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/redux/common/types.ts":"55","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/redux/animal/types.ts":"56","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/redux/pco/types.ts":"57","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/redux/auth/types.ts":"58","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/shared/validationRegex.ts":"59","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/shared/components/CustomTablePagination.tsx":"60","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/shared/components/ButtonLoader.tsx":"61","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/animals/milestones/MilestoneAddEditForm.tsx":"62","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/assets/images/index.ts":"63","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/animals/components/forms/AnimalIntakeMilestone.tsx":"64","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/animals/components/forms/AnimalBirthMilestone.tsx":"65","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/animals/components/minifiedPcoScreen/index.ts":"66","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/animals/components/minifiedPcoScreen/PCOMinifiedScreen.tsx":"67","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/shared/components/Inputs/SearchInput.component.tsx":"68","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/pco/components/PcoAddModal.tsx":"69","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/pco/Pco.data.ts":"70","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/shared/components/Inputs/SingleAvatarUpload.tsx":"71","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/shared/components/Inputs/CustomPhoneInput.tsx":"72","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/shared/constants/tooltips.data.tsx":"73","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/pco/pco-mock.js":"74","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/animals/FtrAnimals.data.ts":"75","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/animals/animals-mock.ts":"76","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/utils/pluralToSingular.ts":"77","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/pco/components/ContentToolbar.tsx":"78","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/animals/components/ContentToolbar.tsx":"79","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/dashboard/components/Card.tsx":"80","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/animals/components/AnimalsAddModal.tsx":"81","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/users/components/UsersList.tsx":"82","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/customization/components/OrganizationInfo.tsx":"83","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/customization/components/AnimalRescues.tsx":"84","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/customization/components/AnimalVeterinarian.tsx":"85","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/customization/components/AnimalVaccinationType.tsx":"86","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/customization/components/VolunteerActivities.tsx":"87","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/customization/components/AnimalMedicine.tsx":"88","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/customization/components/HealthProcedure.tsx":"89","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/customization/components/HospitalClinics.tsx":"90","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/customization/components/Behaviors.tsx":"91","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/customization/components/AnimalAcquisitionWay.tsx":"92","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/customization/components/AnimalTypes.tsx":"93","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/shared/components/CustomTable.tsx":"94","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/users/components/AddUserForm.tsx":"95","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/customization/components/Tooltips/AcquisitionFormInfo.tsx":"96","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/customization/components/Tooltips/VeterinarianFormInfo.tsx":"97","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/shared/components/Inputs/MultiSelect.tsx":"98"},{"size":907,"mtime":1673971559755,"results":"99","hashOfConfig":"100"},{"size":436,"mtime":1673971559762,"results":"101","hashOfConfig":"100"},{"size":578,"mtime":1673971559760,"results":"102","hashOfConfig":"100"},{"size":10305,"mtime":1673971559704,"results":"103","hashOfConfig":"100"},{"size":860,"mtime":1673971559760,"results":"104","hashOfConfig":"100"},{"size":3788,"mtime":1673971559762,"results":"105","hashOfConfig":"100"},{"size":914,"mtime":1673971559749,"results":"106","hashOfConfig":"100"},{"size":914,"mtime":1673971559749,"results":"107","hashOfConfig":"100"},{"size":890,"mtime":1673971559742,"results":"108","hashOfConfig":"100"},{"size":922,"mtime":1673971559750,"results":"109","hashOfConfig":"100"},{"size":1506,"mtime":1673971559763,"results":"110","hashOfConfig":"100"},{"size":403,"mtime":1673971559755,"results":"111","hashOfConfig":"100"},{"size":80,"mtime":1673971559738,"results":"112","hashOfConfig":"100"},{"size":1071,"mtime":1673971559755,"results":"113","hashOfConfig":"100"},{"size":2220,"mtime":1673971559726,"results":"114","hashOfConfig":"100"},{"size":1904,"mtime":1673971559748,"results":"115","hashOfConfig":"100"},{"size":447,"mtime":1673971559752,"results":"116","hashOfConfig":"100"},{"size":550,"mtime":1673971559740,"results":"117","hashOfConfig":"100"},{"size":910,"mtime":1673971559743,"results":"118","hashOfConfig":"100"},{"size":439,"mtime":1673971559745,"results":"119","hashOfConfig":"100"},{"size":234,"mtime":1673971559744,"results":"120","hashOfConfig":"100"},{"size":1211,"mtime":1673971559727,"results":"121","hashOfConfig":"100"},{"size":918,"mtime":1673971559741,"results":"122","hashOfConfig":"100"},{"size":632,"mtime":1673971559720,"results":"123","hashOfConfig":"100"},{"size":496,"mtime":1673971559717,"results":"124","hashOfConfig":"100"},{"size":68,"mtime":1673971559760,"results":"125","hashOfConfig":"100"},{"size":70,"mtime":1673971559758,"results":"126","hashOfConfig":"100"},{"size":74,"mtime":1673971559756,"results":"127","hashOfConfig":"100"},{"size":74,"mtime":1673971559759,"results":"128","hashOfConfig":"100"},{"size":70,"mtime":1673971559761,"results":"129","hashOfConfig":"100"},{"size":5077,"mtime":1673971559761,"results":"130","hashOfConfig":"100"},{"size":9877,"mtime":1673971559756,"results":"131","hashOfConfig":"100"},{"size":5183,"mtime":1673971559758,"results":"132","hashOfConfig":"100"},{"size":7556,"mtime":1673971559759,"results":"133","hashOfConfig":"100"},{"size":12555,"mtime":1673971559757,"results":"134","hashOfConfig":"100"},{"size":4276,"mtime":1673971559729,"results":"135","hashOfConfig":"100"},{"size":1488,"mtime":1673971559753,"results":"136","hashOfConfig":"100"},{"size":10035,"mtime":1673971559721,"results":"137","hashOfConfig":"100"},{"size":9763,"mtime":1673971559745,"results":"138","hashOfConfig":"100"},{"size":4793,"mtime":1673971559739,"results":"139","hashOfConfig":"100"},{"size":3448,"mtime":1673971559744,"results":"140","hashOfConfig":"100"},{"size":14628,"mtime":1673971559751,"results":"141","hashOfConfig":"100"},{"size":6654,"mtime":1673971559742,"results":"142","hashOfConfig":"100"},{"size":1937,"mtime":1673971559743,"results":"143","hashOfConfig":"100"},{"size":6784,"mtime":1673971559727,"results":"144","hashOfConfig":"100"},{"size":1982,"mtime":1673971559719,"results":"145","hashOfConfig":"100"},{"size":3490,"mtime":1673971559741,"results":"146","hashOfConfig":"100"},{"size":3321,"mtime":1673971559717,"results":"147","hashOfConfig":"100"},{"size":2758,"mtime":1673971559760,"results":"148","hashOfConfig":"100"},{"size":2876,"mtime":1673971559758,"results":"149","hashOfConfig":"100"},{"size":3963,"mtime":1673971559757,"results":"150","hashOfConfig":"100"},{"size":1335,"mtime":1673971559759,"results":"151","hashOfConfig":"100"},{"size":1744,"mtime":1673971559761,"results":"152","hashOfConfig":"100"},{"size":542,"mtime":1673971559762,"results":"153","hashOfConfig":"100"},{"size":352,"mtime":1673971559759,"results":"154","hashOfConfig":"100"},{"size":970,"mtime":1673971559757,"results":"155","hashOfConfig":"100"},{"size":607,"mtime":1673971559760,"results":"156","hashOfConfig":"100"},{"size":938,"mtime":1673971559758,"results":"157","hashOfConfig":"100"},{"size":230,"mtime":1673971559769,"results":"158","hashOfConfig":"100"},{"size":8012,"mtime":1673971559764,"results":"159","hashOfConfig":"100"},{"size":326,"mtime":1673971559763,"results":"160","hashOfConfig":"100"},{"size":11763,"mtime":1673971559727,"results":"161","hashOfConfig":"100"},{"size":531,"mtime":1673971559709,"results":"162","hashOfConfig":"100"},{"size":9472,"mtime":1673971559725,"results":"163","hashOfConfig":"100"},{"size":4244,"mtime":1673971559725,"results":"164","hashOfConfig":"100"},{"size":1819,"mtime":1673971559726,"results":"165","hashOfConfig":"100"},{"size":6334,"mtime":1673971559726,"results":"166","hashOfConfig":"100"},{"size":1064,"mtime":1673971559765,"results":"167","hashOfConfig":"100"},{"size":21246,"mtime":1673971559747,"results":"168","hashOfConfig":"100"},{"size":965,"mtime":1673971559746,"results":"169","hashOfConfig":"100"},{"size":6328,"mtime":1673971559766,"results":"170","hashOfConfig":"100"},{"size":1797,"mtime":1673971559764,"results":"171","hashOfConfig":"100"},{"size":1788,"mtime":1673971559769,"results":"172","hashOfConfig":"100"},{"size":17241,"mtime":1673971559748,"results":"173","hashOfConfig":"100"},{"size":2913,"mtime":1673971559720,"results":"174","hashOfConfig":"100"},{"size":5420,"mtime":1673971559722,"results":"175","hashOfConfig":"100"},{"size":836,"mtime":1673971559770,"results":"176","hashOfConfig":"100"},{"size":4647,"mtime":1673971559747,"results":"177","hashOfConfig":"100"},{"size":5364,"mtime":1673971559725,"results":"178","hashOfConfig":"100"},{"size":675,"mtime":1673971559740,"results":"179","hashOfConfig":"100"},{"size":37535,"mtime":1673971559724,"results":"180","hashOfConfig":"100"},{"size":5930,"mtime":1673971559754,"results":"181","hashOfConfig":"100"},{"size":17553,"mtime":1673971559736,"results":"182","hashOfConfig":"100"},{"size":8337,"mtime":1673971559732,"results":"183","hashOfConfig":"100"},{"size":10558,"mtime":1673971559734,"results":"184","hashOfConfig":"100"},{"size":10256,"mtime":1673971559734,"results":"185","hashOfConfig":"100"},{"size":8684,"mtime":1673971559738,"results":"186","hashOfConfig":"100"},{"size":11196,"mtime":1673971559732,"results":"187","hashOfConfig":"100"},{"size":10670,"mtime":1673971559735,"results":"188","hashOfConfig":"100"},{"size":8809,"mtime":1673971559735,"results":"189","hashOfConfig":"100"},{"size":10289,"mtime":1673971559734,"results":"190","hashOfConfig":"100"},{"size":10125,"mtime":1673971559730,"results":"191","hashOfConfig":"100"},{"size":9380,"mtime":1673971559733,"results":"192","hashOfConfig":"100"},{"size":6069,"mtime":1673971559764,"results":"193","hashOfConfig":"100"},{"size":6935,"mtime":1673971559754,"results":"194","hashOfConfig":"100"},{"size":830,"mtime":1673971559737,"results":"195","hashOfConfig":"100"},{"size":667,"mtime":1673971559737,"results":"196","hashOfConfig":"100"},{"size":587,"mtime":1673971559765,"results":"197","hashOfConfig":"100"},{"filePath":"198","messages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"11fs890",{"filePath":"200","messages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"202","messages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"204","messages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206"},{"filePath":"207","messages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209"},{"filePath":"210","messages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"212","messages":"213","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"214","messages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"216","messages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"218","messages":"219","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"220","messages":"221","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222"},{"filePath":"223","messages":"224","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"225","messages":"226","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"227","messages":"228","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"229","messages":"230","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"231","messages":"232","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"233","messages":"234","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"235","messages":"236","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"237","messages":"238","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"239","messages":"240","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"241","messages":"242","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"243","messages":"244","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"245","messages":"246","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"247","messages":"248","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"249","messages":"250","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"251","messages":"252","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"253","messages":"254","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"255","messages":"256","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"257","messages":"258","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"259","messages":"260","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"261","messages":"262","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"263"},{"filePath":"264","messages":"265","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"266"},{"filePath":"267","messages":"268","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"269"},{"filePath":"270","messages":"271","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"272"},{"filePath":"273","messages":"274","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"275"},{"filePath":"276","messages":"277","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278"},{"filePath":"279","messages":"280","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"281"},{"filePath":"282","messages":"283","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"284"},{"filePath":"285","messages":"286","errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"287"},{"filePath":"288","messages":"289","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"290"},{"filePath":"291","messages":"292","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"293","messages":"294","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"295"},{"filePath":"296","messages":"297","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"298"},{"filePath":"299","messages":"300","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"301","messages":"302","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"303"},{"filePath":"304","messages":"305","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"306"},{"filePath":"307","messages":"308","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"309"},{"filePath":"310","messages":"311","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"312"},{"filePath":"313","messages":"314","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"315","messages":"316","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"317","messages":"318","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"319","messages":"320","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"321","messages":"322","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"323","messages":"324","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"325","messages":"326","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"327","messages":"328","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"329","messages":"330","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"331","messages":"332","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"333","messages":"334","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"335","messages":"336","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"337"},{"filePath":"338","messages":"339","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"340","messages":"341","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"342"},{"filePath":"343","messages":"344","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"345","messages":"346","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"347"},{"filePath":"348","messages":"349","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"350"},{"filePath":"351","messages":"352","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"353"},{"filePath":"354","messages":"355","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"356"},{"filePath":"357","messages":"358","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"359"},{"filePath":"360","messages":"361","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"362"},{"filePath":"363","messages":"364","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"365","messages":"366","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"367"},{"filePath":"368","messages":"369","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"370","messages":"371","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"372","messages":"373","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"374","messages":"375","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"376","messages":"377","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"378","messages":"379","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"380","messages":"381","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"382"},{"filePath":"383","messages":"384","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"385"},{"filePath":"386","messages":"387","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"388","messages":"389","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"390"},{"filePath":"391","messages":"392","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"393"},{"filePath":"394","messages":"395","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"396"},{"filePath":"397","messages":"398","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"399","messages":"400","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"401","messages":"402","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"403","messages":"404","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"405","messages":"406","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"407","messages":"408","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"409"},{"filePath":"410","messages":"411","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"412"},{"filePath":"413","messages":"414","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"415"},{"filePath":"416","messages":"417","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"418","messages":"419","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"420","messages":"421","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"422"},{"filePath":"423","messages":"424","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"425"},{"filePath":"426","messages":"427","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"428","messages":"429","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"430","messages":"431","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"432"},"/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/index.tsx",[],"/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/reportWebVitals.ts",[],"/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/redux/store.ts",[],"/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/App.tsx",["433"],"import { FC, useEffect, useState } from 'react';\nimport {\n  Layout,\n  Menu,\n  Avatar,\n  message,\n  Button,\n  Popover,\n} from 'antd';\nimport { connect } from 'react-redux';\nimport './App.less';\nimport { UserOutlined } from '@ant-design/icons';\nimport styled from 'styled-components';\nimport {\n  Routes, Route, Link, useLocation, useNavigate,\n} from 'react-router-dom';\nimport Cookies from 'universal-cookie';\nimport Animals from './components/animals';\nimport PCO from './components/pco';\nimport Customization from './components/customization';\nimport Users from './components/users';\nimport { Searches } from './components/searches/FtrSearches';\nimport { Queries } from './components/queries/FtrQueries';\nimport { Reports } from './components/reports/FtrReports';\nimport { Help } from './components/help/FtrHelp';\n// import { About } from './components/about/FtrAbout';\nimport Signup from './components/signup';\nimport Login from './components/login';\nimport Dashboard from './components/dashboard';\nimport LandingPage from './components/landing';\nimport Invite from './components/invite';\nimport ConfirmPage from './components/admin_signup_confirm';\nimport { apiCall } from './shared/api/apiWrapper';\nimport AnimalMilestone from './components/animals/milestones';\nimport ForgotUsernamePassword from './components/forgot_password_username';\nimport ResetPassword from './components/ResetPassword';\nimport BreadCrumb from './shared/components/BreadCrumb';\n\ninterface IState {\n}\n\nconst { Header, Content, Footer } = Layout;\n\nexport const isBrowser = !!(typeof window !== 'undefined' && window.document && window.document.createElement);\n\nconst StyledLayout = styled(Layout)`\n  position: relative;\n  height: 100vh;\n`;\nconst StyledContent = styled(Content)`\n  padding: 0 50px;\n  margin-top: 64px;\n  height: 100vh;\n  overflow: hidden auto;\n  & .site-layout-content {\n    min-height: 380px;\n    padding: 24px;\n    background: #fff;\n  }\n  @media only screen and (max-width: 600px) {\n    padding: 20px;\n  }\n`;\nconst StyledHeader = styled(Header)`\n  position: fixed;\n  z-index: 1;\n  width: 100%;\n  display: flex;\n  justify-content: flex-start;\n`;\n\nconst Logo = styled.div`\n  float: left;\n  width: 160px;\n  height: 31px;\n  margin: 16px 24px 16px 0;\n  background: rgba(255, 255, 255, 0.3);\n  color: #fff;\n  cursor: pointer;\n  &.ant-row-rtl .logo {\n    float: right;\n    margin: 16px 0 16px 24px;\n  }\n`;\n\nconst App: FC<any> = ({ login }) => {\n  const navigate = useNavigate();\n  const [view, setView] = useState<string[]>([]);\n  const [isLogin, setLogin] = useState(false);\n  const authExludedRoutes = ['/login', '/signup', '/', '/auth', '/forgot-username', '/forgot-password'];\n  const [tenantName, setTenantName] = useState('To Your Rescue');\n  const location = useLocation().pathname;\n\n  const cookies = new Cookies();\n  const isLogged = cookies.get('login');\n\n  useEffect(() => {\n    if (isLogged) {\n      const data = {};\n      apiCall('tenant/get-tenant-info', 'GET', data)\n        .then((resp: any) => {\n          if (resp?.data?.success) {\n            const tenantLoginName = resp?.data?.data?.tenant?.name;\n            const tenantAcronym = resp?.data?.data?.tenant?.tenantAcronym;\n            setTenantName(tenantLoginName?.length < 35 ? tenantLoginName : tenantAcronym);\n            localStorage.setItem('countryId', resp?.data?.data?.tenant?.countryId);\n          }\n        });\n    }\n  }, [isLogged]);\n\n  useEffect(() => {\n    location && setView([location]);\n    const isLoggedOut = !cookies.get('login');\n\n    if (isLoggedOut) {\n      const newLocation = location.split('/')[1];\n      // eslint-disable-next-line prefer-template\n      if (location === '/') {\n        navigate('/');\n      } else if (location === '/signup') {\n        navigate('/signup');\n      } else if (location.split('/auth')[1]) {\n        // navigate(location);\n      } else if (authExludedRoutes.includes(`/${newLocation}`)) {\n        navigate(`${location}`);\n      } else {\n        console.log('triggering logout 3');\n        navigate('/login');\n      }\n    } else if (authExludedRoutes.includes(location)) {\n      navigate('/');\n    }\n    const isLoggedIn = cookies.get('login');\n    setLogin(isLoggedIn);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [location]);\n\n  const handleClickHelp = () => {\n    window.open('https://www.toyourrescue.org/TYR-User-Guide-V2/index.htm');\n  };\n\n  const handleClick = (e: any) => {\n    const routesDef = ['/animals', '/pco', '/searches', '/queries', '/donations', '/customization', '/reports', '/help', '/login', '/signup'];\n    if (routesDef.includes(e.key)) setView([e.key]);\n  };\n\n  const basicRoutes = [\n    { path: '/animals', title: 'Animals' },\n    { path: '/pco', title: 'PCOs' },\n    { path: '/searches', title: 'Searches' },\n    { path: '/queries', title: 'Queries' },\n    { path: '/reports', title: 'Reports' },\n    { path: '/customization', title: 'Customization' },\n    { path: '#', title: 'Help' },\n  ];\n\n  let routesLeft = [];\n\n  if ((cookies.get('loginDetails')?.userType === 'Administrator')) {\n    routesLeft = [...basicRoutes, { path: '/users', title: 'Users' }];\n  } else {\n    routesLeft = [...basicRoutes];\n  }\n\n  // const routesRight = [\n  //   { path: '/login', title: 'Login' },\n  //   { path: '/signup', title: 'Signup' },\n  // ];\n\n  const onLogout = (sesstionExpire: boolean) => {\n    sesstionExpire ? message.error('Session Expire', 1.5) : message.success('Logout Successful', 1.5);\n    cookies.remove('login', { path: '/' });\n    cookies.remove('loginDetails', { path: '/' });\n    setTenantName('To Your Rescue');\n    setLogin(false);\n    navigate('/login');\n  };\n\n  const navigateToHomePage = () => {\n    const isLoggedOut = !cookies.get('login');\n\n    if (isLoggedOut) {\n      navigate('/');\n    } else {\n      navigate('/');\n    }\n  };\n\n  useEffect(() => {\n    if (!login) {\n      return;\n    }\n    setInterval(() => {\n      const isLoggedIn = cookies.get('login');\n      if (!isLoggedIn && !authExludedRoutes.includes(`/${window.location?.pathname?.split('/')?.[0]}`)) {\n        onLogout(true);\n      }\n      if (isLoggedIn && authExludedRoutes.includes(window.location.pathname)) {\n        navigate('/');\n      }\n    }, 1000);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [login]);\n\n  useEffect(() => {\n    if (isBrowser) setView([window.location.pathname]);\n    setInterval(() => {\n      const isLoggedIn = cookies.get('login');\n      if (!isLoggedIn && !authExludedRoutes.includes(`/${window.location?.pathname?.split('/')?.[0]}`)) {\n        onLogout(true);\n      }\n      if (isLoggedIn && authExludedRoutes.includes(window.location.pathname)) {\n        navigate('/');\n      }\n    }, 1000);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <StyledLayout>\n      <StyledHeader>\n        <Logo onClick={navigateToHomePage} style={{ width: `${tenantName ? (tenantName?.length * 9) : 100}px` }}>\n          <p style={{\n            height: 31, margin: 0, textAlign: 'center', lineHeight: 2,\n          }}\n          >\n            {tenantName}\n          </p>\n        </Logo>\n        {isLogin\n          && (\n            <Menu className=\"menu-left\" onClick={handleClick} theme=\"dark\" mode=\"horizontal\" selectedKeys={view}>\n              {routesLeft.map((route) => (\n                <Menu.Item key={route.path}>\n                  {route.title === 'Help'\n                    ? <Link to=\"#\" target=\"_blank\" onClick={handleClickHelp}>{route.title}</Link>\n                    : <Link to={route.path}>{route.title}</Link>}\n                </Menu.Item>\n              ))}\n            </Menu>\n          )}\n\n        {isLogin\n          && (\n            <>\n              <Menu theme=\"dark\" mode=\"horizontal\" selectedKeys={view}>\n                <Popover\n                  placement=\"bottom\"\n                  content={(\n                    <Button\n                      style={{\n                        textAlign: 'center', cursor: 'pointer',\n                      }}\n                      onClick={() => onLogout(false)}\n                    >\n                      <div>Logout</div>\n                    </Button>\n                  )}\n                  trigger=\"click\"\n                >\n                  <div style={{\n                    height: 31, marginTop: '4px', marginLeft: '20px', textAlign: 'center', cursor: 'pointer', lineHeight: 1.5,\n                  }}\n                  >\n                    <Avatar size={35} icon={<UserOutlined />} />\n                    <p>{cookies.get('loginDetails')?.user || 'Dummy User'}</p>\n                  </div>\n                </Popover>\n              </Menu>\n            </>\n          )}\n      </StyledHeader>\n      <StyledContent>\n        {isLogged && <BreadCrumb />}\n        <Routes>\n          {isLogged\n            ? <Route path=\"/\" element={<Dashboard />} />\n            : <Route path=\"/\" element={<LandingPage />} />}\n          <Route path=\"animals/*\" element={<Animals />} />\n          <Route path=\"animals/milestone\" element={<AnimalMilestone />} />\n          <Route path=\"pco/*\" element={<PCO />} />\n          <Route path=\"searches/*\" element={<Searches />} />\n          <Route path=\"queries/*\" element={<Queries />} />\n          <Route path=\"reports/*\" element={<Reports />} />\n          <Route path=\"customization/*\" element={<Customization />} />\n          <Route path=\"#\" element={<Help />} />\n          {(cookies.get('loginDetails')?.userType === 'Administrator') && <Route path=\"/users\" element={<Users />} />}\n          <Route path=\"signup/*\" element={<Signup />} />\n          <Route path=\"login/*\" element={<Login />} />\n          <Route path=\"/auth/verify/*\" element={<Invite />} />\n          <Route path=\"/auth/verify-signup/*\" element={<ConfirmPage />} />\n          <Route path=\"/forgot-username\" element={<ForgotUsernamePassword />} />\n          <Route path=\"/forgot-password\" element={<ForgotUsernamePassword />} />\n          <Route path=\"/auth/reset-password/*\" element={<ResetPassword />} />\n          <Route path=\"*\" />\n        </Routes>\n        <Footer style={{ textAlign: 'center' }}>{`To Your Rescue ©${new Date().getFullYear()}`}</Footer>\n      </StyledContent>\n    </StyledLayout>\n  );\n};\n\nconst mapStateToProps = (state: any) => ({\n  login: state.auth.login,\n});\n\nexport default connect<IState, null>(mapStateToProps, null)(App);\n","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/redux/root-reducer.ts",["434"],"import { combineReducers } from 'redux';\nimport { persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport authReducer from './auth';\nimport userReducer from './user';\nimport pcoReducer from './pco';\nimport animalReducer from './animal';\nimport commonReducer from './common';\n\nconst persistConfig = {\n  key: 'rootTyr',\n  storage,\n  whitelist: ['auth'],\n};\n\nconst appReducer = combineReducers({\n  auth: authReducer,\n  user: userReducer,\n  pco: pcoReducer,\n  animal: animalReducer,\n  common: commonReducer,\n});\n\nconst rootReducer = (state: any, action: any) => {\n  console.log(state, '---------------Root Reducer  state-----', action, '------action ------');\n\n  if (action.type === 'USER_LOGOUT') {\n    return undefined;\n  }\n  return appReducer(state, action);\n};\n\nexport default persistReducer(persistConfig, rootReducer);\n","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/shared/api/apiWrapper.ts",[],"/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/queries/FtrQueries.tsx",[],"/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/reports/FtrReports.tsx",[],"/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/help/FtrHelp.tsx",[],"/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/searches/FtrSearches.tsx",[],"/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/shared/components/BreadCrumb.tsx",["435","436","437","438","439","440"],"/* eslint-disable jsx-a11y/click-events-have-key-events */\n/* eslint-disable jsx-a11y/no-static-element-interactions */\n/* eslint-disable no-unused-vars */\nimport {\n  message, Modal, Select, Space, Typography, Row, Col,\n} from 'antd';\nimport {\n  FlagFilled,\n} from '@ant-design/icons';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport navigationConstant from '../constants/navigationConstant.json';\n\nconst navigationConstantObj: any = navigationConstant;\n\ninterface BreadCrumbProps {\n}\n\nconst { Title } = Typography;\n\nconst cssPrefix = 'ftr-animals';\n\n// eslint-disable-next-line\nexport const BreadCrumb = (props: BreadCrumbProps) => {\n  const location = useLocation();\n  const navigate = useNavigate();\n\n  return (\n    <Row>\n      {location?.pathname.split('/')?.map((locationName: any, i) => (\n        <Col>\n          <Title level={3} style={{ margin: '16px 0' }}>\n            <span\n              onClick={() => {\n                (i < (location?.pathname.split('/')?.length - 1)) && navigate(`/${locationName}`);\n              }}\n              style={{ color: (i < (location?.pathname.split('/')?.length - 1)) ? 'gray' : '', cursor: 'pointer' }}\n            >\n              {navigationConstantObj?.[locationName]}\n            </span>\n            {' '}\n            {(i < (location?.pathname.split('/')?.length - 1)) && navigationConstantObj?.[locationName] && (\n              '>'\n            )}\n          </Title>\n        </Col>\n      ))}\n    </Row>\n  );\n};\n\nexport default BreadCrumb;\n","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/config.js",[],"/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/customization/index.ts",[],"/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/users/index.ts",[],"/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/animals/index.ts",[],"/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/pco/index.ts",[],"/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/signup/index.ts",[],"/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/dashboard/index.ts",[],"/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/invite/index.ts",[],"/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/login/index.ts",[],"/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/landing/index.ts",[],"/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/animals/milestones/index.ts",[],"/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/forgot_password_username/index.ts",[],"/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/admin_signup_confirm/index.ts",[],"/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/ResetPassword/index.ts",[],"/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/redux/pco/index.ts",[],"/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/redux/auth/index.ts",[],"/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/redux/animal/index.ts",[],"/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/redux/common/index.ts",[],"/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/redux/user/index.ts",[],"/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/redux/user/action.ts",["441","442","443","444","445","446"],"/* eslint-disable no-unused-vars */\nimport { message } from 'antd';\nimport { useNavigate } from 'react-router-dom';\nimport Cookies from 'universal-cookie';\nimport { apiCall } from '../../shared/api/apiWrapper';\nimport { userActionTypes } from './types';\n\nconst getUserListLoading = (data: any) => ({\n  type: userActionTypes.GET_USER_LIST_LOADING,\n  payload: data,\n});\n\nconst getUserListSuccess = (data: any) => ({\n  type: userActionTypes.GET_USER_LIST_SUCCESS,\n  payload: data,\n});\n\nconst inviteUserLoading = (data: any) => ({\n  type: userActionTypes.INVITE_USER_LOADING,\n  payload: data,\n});\n\nconst inviteUserSuccess = (data: any) => ({\n  type: userActionTypes.INVITE_USER_SUCCESS,\n  payload: data,\n});\n\nexport const inviteUserCall = (data: any, callbackFunction: () => void) => {\n  console.log(data);\n\n  return (dispatch: any, getSate: any) => {\n    dispatch(inviteUserLoading(true));\n    apiCall('User/inviteuser', 'POST', data)\n      .then((resp: any) => {\n        dispatch(inviteUserLoading(false));\n        dispatch(inviteUserSuccess(false));\n        if (resp.status !== 200) {\n          resp?.data?.message && message.error({\n            content: resp?.data?.message,\n            style: {\n              marginTop: '2vh',\n            },\n            key: 'updatable',\n          });\n          return;\n        }\n        callbackFunction();\n        resp?.data?.message && message.success({\n          content: resp?.data?.message,\n          style: {\n            marginTop: '2vh',\n          },\n          key: 'updatable',\n        });\n      });\n  };\n};\n\nexport const getUserListCall = (data: any, callbackFunction: () => void) => {\n  console.log(data);\n\n  return (dispatch: any, getSate: any) => {\n    dispatch(getUserListLoading(true));\n    apiCall(`user/get-users/${data ? 'false' : 'true'}`, 'GET', data)\n      .then((resp: any) => {\n        dispatch(getUserListLoading(false));\n        if (resp.status !== 200) {\n          getUserListSuccess(false);\n          resp?.data?.message && message.error({\n            content: resp?.data?.message,\n            style: {\n              marginTop: '2vh',\n            },\n            key: 'updatable',\n          });\n          return;\n        }\n        // resp?.data?.message && message.success({\n        //   content: resp?.data?.message,\n        //   style: {\n        //     marginTop: '2vh',\n        //   },\n        //   key: 'updatable',\n        // });\n        dispatch(getUserListSuccess(resp?.data?.data?.usersVMs));\n        callbackFunction();\n      });\n  };\n};\n\nconst updateUserLoading = (data: any) => ({\n  type: userActionTypes.INVITE_USER_LOADING,\n  payload: data,\n});\n\nconst updateUserSuccess = (data: any) => ({\n  type: userActionTypes.INVITE_USER_SUCCESS,\n  payload: data,\n});\n\nexport const updateUser = (data: any, callbackFunction: () => void) => {\n  console.log(data);\n\n  return (dispatch: any, getSate: any) => {\n    dispatch(updateUserLoading(true));\n    apiCall(`user/update-user/${data?.id}`, 'PUT', data)\n      .then((resp: any) => {\n        dispatch(updateUserSuccess(false));\n        if (resp.status !== 200) {\n          resp?.data?.message && message.error({\n            content: resp?.data?.message,\n            style: {\n              marginTop: '2vh',\n            },\n            key: 'updatable',\n          });\n          return;\n        }\n        callbackFunction();\n        resp?.data?.message && message.success({\n          content: resp?.data?.message,\n          style: {\n            marginTop: '2vh',\n          },\n          key: 'updatable',\n        });\n      });\n  };\n};\n\nconst deleteUserLoading = (data: any) => ({\n  type: userActionTypes.DELETE_USER_LOADING,\n  payload: data,\n});\n\nconst deleteUserSuccess = (data: any) => ({\n  type: userActionTypes.DELETE_USER_SUCCESS,\n  payload: data,\n});\n\nexport const deleteUser = (data: any, callbackFunction: () => void) => {\n  console.log(data);\n\n  return (dispatch: any, getSate: any) => {\n    dispatch(deleteUserLoading(true));\n    apiCall(`user/delete-user/${data?.userId}`, 'PATCH', {})\n      .then((resp: any) => {\n        dispatch(deleteUserSuccess(false));\n        if (!resp?.data?.success) {\n          const messageText = resp?.data?.message || resp?.data?.errors?.[0];\n          messageText && message.error({\n            content: messageText,\n            style: {\n              marginTop: '2vh',\n            },\n            key: 'updatable',\n          });\n          return;\n        }\n        callbackFunction();\n        resp?.data?.message && message.success({\n          content: resp?.data?.message,\n          style: {\n            marginTop: '2vh',\n          },\n          key: 'updatable',\n        });\n      });\n  };\n};\n\n// export const isEmailAvialbleCall = (data: any, callbackFunction: () => void) => {\n//   console.log(data);\n\n//   return (dispatch: any, getSate: any) => {\n//     dispatch(deleteUserLoading(true));\n//     apiCall(`user/available-email-address?email=${data?.email}`, 'PATCH', {})\n//       .then((resp: any) => {\n//         dispatch(deleteUserSuccess(false));\n//         // callbackFunction(resp?.success);\n//       });\n//   };\n// };\n","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/redux/animal/action.ts",["447","448","449"],"/* eslint-disable quotes */\n/* eslint-disable quote-props */\n/* eslint-disable no-unused-vars */\nimport { message } from 'antd';\nimport { useNavigate } from 'react-router-dom';\nimport Cookies from 'universal-cookie';\nimport { apiCall } from '../../shared/api/apiWrapper';\nimport { animalActionTypes } from './types';\n\nconst getAnimalListLoading = (data: any) => ({\n  type: animalActionTypes.GET_ANIMAL_LIST_LOADING,\n  payload: data,\n});\n\nconst getAnimalListSuccess = (data: any) => ({\n  type: animalActionTypes.GET_ANIMAL_LIST_SUCCESS,\n  payload: data,\n});\n\nconst addAnimalLoading = (data: any) => ({\n  type: animalActionTypes.ADD_ANIMAL_LOADING,\n  payload: data,\n});\n\nconst addAnimalSuccess = (data: any) => ({\n  type: animalActionTypes.ADD_ANIMAL_SUCCESS,\n  payload: data,\n});\n\nconst updateAnimalLoading = (data: any) => ({\n  type: animalActionTypes.UPDATE_ANIMAL_LOADING,\n  payload: data,\n});\n\nconst updateAnimalSuccess = (data: any) => ({\n  type: animalActionTypes.UPDATE_ANIMAL_SUCCESS,\n  payload: data,\n});\n\nconst deleteAnimalLoading = (data: any) => ({\n  type: animalActionTypes.DELETE_ANIMAL_LOADING,\n  payload: data,\n});\n\nconst deleteAnimalSuccess = (data: any) => ({\n  type: animalActionTypes.DELETE_ANIMAL_SUCCESS,\n  payload: data,\n});\n\nconst getAnimalSuggestionListLoading = (data: any) => ({\n  type: animalActionTypes.GET_ANIMAL_SUGGESTION_LIST_LOADING,\n  payload: data,\n});\n\nconst getAnimalSuggestionListSuccess = (data: any) => ({\n  type: animalActionTypes.GET_ANIMAL_SUGGESTION_LIST_SUCCESS,\n  payload: data,\n});\n\nexport const setSelectedAnimal = (data: any) => ({\n  type: animalActionTypes.SET_SELECTED_ANIMAL,\n  payload: data,\n});\n\nconst getAnimalMilestoneListLoading = (data: any) => ({\n  type: animalActionTypes.GET_ANIMAL_MILESTONE_LIST_LOADING,\n  payload: data,\n});\n\nconst getAnimalMilestoneListSuccess = (data: any) => ({\n  type: animalActionTypes.GET_ANIMAL_MILESTONE_LIST_SUCCESS,\n  payload: data,\n});\n\nconst updateAnimalMilestoneLoading = () => ({\n  type: animalActionTypes.UPDATE_ANIMAL_MILESTONE_LOADING,\n});\n\nconst updateAnimalMilestoneSuccess = () => ({\n  type: animalActionTypes.UPDATE_ANIMAL_MILESTONE_SUCCESS,\n});\n\nexport const addAnimalCall = (data: any, callbackFunction: (selectedIds: any) => void) => {\n  const {\n    noOfAnimal, noOfMale, noOfFemale, noOfUnknown, formData,\n  } = data;\n\n  return (dispatch: any, getSate: any) => {\n    dispatch(addAnimalLoading(true));\n    apiCall(`animal/create-animal?noofAnimals=${noOfAnimal}&male=${noOfMale}&female=${noOfFemale}&unknown=${noOfUnknown}`, 'POST', formData)\n      .then((resp: any) => {\n        dispatch(addAnimalSuccess(resp?.data?.data));\n        if (resp.status !== 200) {\n          resp?.data?.message && message.error({\n            content: resp?.data?.message,\n            style: {\n              marginTop: '2vh',\n            },\n            key: 'updatable',\n          });\n          return;\n        }\n        const selectedIds: any = [];\n        resp?.data?.data?.map((animalData: any) => {\n          selectedIds.push(animalData?.id);\n          return '';\n        });\n        callbackFunction(selectedIds);\n        resp?.data?.message && message.success({\n          content: resp?.data?.message,\n          style: {\n            marginTop: '2vh',\n          },\n          key: 'updatable',\n        });\n      });\n  };\n};\n\nexport const updateAnimalCall = (data: any, callbackFunction: () => void) => {\n  const { id } = data;\n  return (dispatch: any, getSate: any) => {\n    dispatch(updateAnimalLoading(true));\n    apiCall(`animal/Update-animal?Id=${id}`, 'PUT', data)\n      .then((resp: any) => {\n        dispatch(updateAnimalSuccess(resp?.data?.data?.animal));\n        if (resp.status !== 200) {\n          resp?.data?.message && message.error({\n            content: resp?.data?.message,\n            style: {\n              marginTop: '2vh',\n            },\n            key: 'updatable',\n          });\n          return;\n        }\n        callbackFunction();\n        resp?.data?.message && message.success({\n          content: resp?.data?.message,\n          style: {\n            marginTop: '2vh',\n          },\n          key: 'updatable',\n        });\n      });\n  };\n};\n\nexport const deleteAnimalCall = (data: any, callbackFunction: () => void) => {\n  const { id } = data;\n  return (dispatch: any, getSate: any) => {\n    dispatch(deleteAnimalLoading(true));\n    apiCall(`animal/delete-animal/${id}`, 'PATCH', {})\n      .then((resp: any) => {\n        dispatch(deleteAnimalSuccess(resp?.data?.data?.pco));\n        if (resp.status !== 200) {\n          resp?.data?.message && message.error({\n            content: resp?.data?.message,\n            style: {\n              marginTop: '2vh',\n            },\n            key: 'updatable',\n          });\n          return;\n        }\n        callbackFunction();\n        resp?.data?.message && message.success({\n          content: resp?.data?.message,\n          style: {\n            marginTop: '2vh',\n          },\n          key: 'updatable',\n        });\n      });\n  };\n};\n\nexport const getAnimalListCall = (data: any, callbackFunction: () => void) => {\n  const {\n    page, length, searchText, isAvailable, isDeleted,\n  } = data;\n\n  return (dispatch: any, getSate: any) => {\n    dispatch(getAnimalListLoading(true));\n    apiCall(`animal/get-animal?Limit=${length}&Page=${page}&searchText=${searchText}&isAvailable=${isAvailable}&isDeleted=${isDeleted}`, 'GET', data)\n      .then((resp: any) => {\n        dispatch(getAnimalListLoading(false));\n        if (resp.status !== 200) {\n          getAnimalListSuccess(false);\n          resp?.data?.message && message.error({\n            content: resp?.data?.message,\n            style: {\n              marginTop: '2vh',\n            },\n            key: 'updatable',\n          });\n          return;\n        }\n        // resp?.data?.message && message.success({\n        //   content: resp?.data?.message,\n        //   style: {\n        //     marginTop: '2vh',\n        //   },\n        //   key: 'updatable',\n        // });\n        const currentResponse = resp?.data?.data;\n        dispatch(getAnimalListSuccess(currentResponse));\n        callbackFunction();\n      });\n  };\n};\n\nexport const getAnimalListSuggestionCall = (data: any, callbackFunction: () => void) => {\n  const {\n    page, length, searchText, entityType, isDeleted,\n  } = data;\n\n  return (dispatch: any, getSate: any) => {\n    dispatch(getAnimalSuggestionListLoading(true));\n    apiCall(`PCO/get-PCO?Limit=${length}&page=${page}&searchText=${searchText}&entityType=${(entityType === 'all') ? '' : entityType}&isDeleted=${isDeleted}`, 'GET', data)\n      .then((resp: any) => {\n        dispatch(getAnimalSuggestionListLoading(false));\n        if (resp.status !== 200) {\n          getAnimalSuggestionListSuccess(false);\n          resp?.data?.message && message.error({\n            content: resp?.data?.message,\n            style: {\n              marginTop: '2vh',\n            },\n            key: 'updatable',\n          });\n          return;\n        }\n        // resp?.data?.message && message.success({\n        //   content: resp?.data?.message,\n        //   style: {\n        //     marginTop: '2vh',\n        //   },\n        //   key: 'updatable',\n        // });\n        const currentResponse = resp?.data?.data;\n        const reconstructedData = {\n          ...currentResponse,\n          data: {\n            \"currentPage\": currentResponse?.currentPage,\n            \"totalItems\": (currentResponse?.totalPage * length) || currentResponse?.totalItems,\n            \"totalPage\": currentResponse?.totalPage,\n            \"pcoList\": currentResponse?.data,\n          },\n        };\n        dispatch(getAnimalListSuccess(currentResponse));\n        callbackFunction();\n      });\n  };\n};\n\nexport const getAnimalMilestoneListCall = (data: any, callbackFunction: () => void) => {\n  // const {\n  //   page, length, searchText, entityType, isDeleted, animalId,\n  // } = data;\n\n  const { animalId, page, length } = data;\n\n  return (dispatch: any, getSate: any) => {\n    dispatch(getAnimalMilestoneListLoading(true));\n    // ?Limit=${length}&page=${page}&searchText=${searchText}&entityType=${(entityType === 'all') ? '' : entityType}&isDeleted=${isDeleted}\n    apiCall(`animal-milestone/get-animal-milestone-animalid/${animalId}?limit=${length}&page=${page}`, 'GET', data)\n      .then((resp: any) => {\n        dispatch(getAnimalMilestoneListLoading(false));\n        if (resp.status !== 200) {\n          getAnimalMilestoneListSuccess(false);\n          resp?.data?.message && message.error({\n            content: resp?.data?.message,\n            style: {\n              marginTop: '2vh',\n            },\n            key: 'updatable',\n          });\n          return;\n        }\n        // resp?.data?.message && message.success({\n        //   content: resp?.data?.message,\n        //   style: {\n        //     marginTop: '2vh',\n        //   },\n        //   key: 'updatable',\n        // });\n        const currentResponse = resp?.data?.data;\n        dispatch(getAnimalMilestoneListSuccess(currentResponse));\n        callbackFunction();\n      });\n  };\n};\n\nexport const updateAnimalMilestoneListCall = (data: any, callbackFunction: () => void) => {\n  const { milestoneId } = data;\n\n  return (dispatch: any, getSate: any) => {\n    dispatch(updateAnimalMilestoneLoading());\n    // ?Limit=${length}&page=${page}&searchText=${searchText}&entityType=${(entityType === 'all') ? '' : entityType}&isDeleted=${isDeleted}\n    apiCall(`animal-milestone/update-animal-milestone/${milestoneId}`, 'POST', data)\n      .then((resp: any) => {\n        dispatch(updateAnimalMilestoneSuccess());\n        if (resp.status !== 200) {\n          resp?.data?.message && message.error({\n            content: resp?.data?.message,\n            style: {\n              marginTop: '2vh',\n            },\n            key: 'updatable',\n          });\n          return;\n        }\n        callbackFunction();\n      });\n  };\n};\n","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/redux/common/action.ts",["450","451"],"/* eslint-disable no-unused-vars */\nimport { message } from 'antd';\nimport { apiCall } from '../../shared/api/apiWrapper';\nimport { commonActionTypes } from './types';\n\nconst getCountLoading = (data: any) => ({\n  type: commonActionTypes.GET_COUNT_LOADING,\n  payload: data,\n});\n\nconst getCountSuccess = (data: any) => ({\n  type: commonActionTypes.GET_COUNT_SUCCESS,\n  payload: data,\n});\n\nexport const getCountCall = (data: any, callbackFunction: () => void) => {\n  console.log(data);\n\n  return (dispatch: any, getSate: any) => {\n    dispatch(getCountLoading(true));\n    apiCall('dashboard/get-count', 'GET', data)\n      .then((resp: any) => {\n        dispatch(getCountLoading(false));\n        if (resp.status !== 200) {\n          getCountSuccess(false);\n          resp?.data?.message && message.error({\n            content: resp?.data?.message,\n            style: {\n              marginTop: '2vh',\n            },\n            key: 'updatable',\n          });\n          return;\n        }\n        // resp?.data?.message && message.success({\n        //   content: resp?.data?.message,\n        //   style: {\n        //     marginTop: '2vh',\n        //   },\n        //   key: 'updatable',\n        // });\n        dispatch(getCountSuccess(resp?.data?.data));\n        callbackFunction();\n      });\n  };\n};\n\nconst uploadImageLoading = (data: any) => ({\n  type: commonActionTypes.UPLOAD_IMAGE_LOADING,\n  payload: data,\n});\n\nconst uploadImageSuccess = (data: any) => ({\n  type: commonActionTypes.UPLOAD_IMAGE_SUCCESS,\n  payload: data,\n});\n\nexport const uploadImageCall = (data: any, callbackFunction: () => void) => {\n  const {\n    imageState,\n    animalId,\n    pcoId,\n    Entity,\n    PublicityRank,\n    AttachmentDate,\n    AttachmentType,\n  } = data;\n\n  return (dispatch: any, getSate: any) => {\n    if (!imageState) {\n      return;\n    }\n    let url = 'artifact-attachment/create-artifactattachment';\n    dispatch(uploadImageLoading(true));\n    const newFormData = new FormData();\n    newFormData.set('Imagefiles', imageState);\n    if (pcoId) {\n      newFormData.set('pcoId', pcoId);\n    }\n    if (animalId) {\n      if (animalId.length > 1) {\n        url = 'artifact-attachment/create-maultiple-artifactattachment';\n        // eslint-disable-next-line array-callback-return\n        animalId.map((id: any) => {\n          newFormData.append('ListAnimalId', id);\n        });\n      } else {\n        newFormData.set('animalId', animalId?.[0]);\n      }\n    }\n    newFormData.set('Entity', Entity);\n    newFormData.set('PublicityRank', PublicityRank);\n    newFormData.set('AttachmentDate', new Date().toDateString());\n    newFormData.set('AttachmentType', AttachmentType);\n\n    apiCall(url, 'POST', newFormData)\n      .then((resp: any) => {\n        dispatch(uploadImageSuccess(resp?.data?.data?.id));\n        // if (!resp?.data?.success && imageState.entityType === 'Person') {\n        //   resp?.data?.errors?.[0] && message.error({\n        //     content: addConfirmPco(resp.data.errors[0]),\n        //     style: {\n        //       marginTop: '2vh',\n        //     },\n        //     key: 'updatable',\n        //     duration: 15,\n        //   });\n        //   return;\n        // }\n        if (resp.status !== 200) {\n          resp?.data?.message && message.error({\n            content: resp?.data?.message,\n            style: {\n              marginTop: '2vh',\n            },\n            key: 'updatable',\n          });\n          return;\n        }\n        callbackFunction();\n        resp?.data?.message && message.success({\n          content: resp?.data?.message,\n          style: {\n            marginTop: '2vh',\n          },\n          key: 'updatable',\n        });\n      });\n  };\n};\n\nconst deleteImageLoading = (data: any) => ({\n  type: commonActionTypes.DELETE_IMAGE_LOADING,\n  payload: data,\n});\n\nconst deleteImageSuccess = (data: any) => ({\n  type: commonActionTypes.DELETE_IMAGE_SUCCESS,\n  payload: data,\n});\n\nexport const deleteImageCall = (data: any, callbackFunction: () => void) => {\n  const {\n    id,\n  } = data;\n\n  return (dispatch: any, getSate: any) => {\n    if (!id) {\n      return;\n    }\n\n    dispatch(deleteImageLoading(true));\n    apiCall(`artifact-attachment/delete-artifactattachment/${id}`, 'PATCH', {})\n      .then((resp: any) => {\n        dispatch(deleteImageSuccess(resp?.data?.data?.id));\n        // if (!resp?.data?.success && imageState.entityType === 'Person') {\n        //   resp?.data?.errors?.[0] && message.error({\n        //     content: addConfirmPco(resp.data.errors[0]),\n        //     style: {\n        //       marginTop: '2vh',\n        //     },\n        //     key: 'updatable',\n        //     duration: 15,\n        //   });\n        //   return;\n        // }\n        if (resp.status !== 200) {\n          resp?.data?.message && message.error({\n            content: resp?.data?.message,\n            style: {\n              marginTop: '2vh',\n            },\n            key: 'updatable',\n          });\n          return;\n        }\n        callbackFunction();\n        resp?.data?.message && message.success({\n          content: resp?.data?.message,\n          style: {\n            marginTop: '2vh',\n          },\n          key: 'updatable',\n        });\n      });\n  };\n};\n","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/redux/pco/action.ts",["452","453","454","455"],"/* eslint-disable quotes */\n/* eslint-disable quote-props */\n/* eslint-disable no-unused-vars */\nimport { message } from 'antd';\nimport { useNavigate } from 'react-router-dom';\nimport Cookies from 'universal-cookie';\nimport { apiCall } from '../../shared/api/apiWrapper';\nimport { pcoActionTypes } from './types';\n\nconst getPcoListLoading = (data: any) => ({\n  type: pcoActionTypes.GET_PCO_LIST_LOADING,\n  payload: data,\n});\n\nconst getPcoListSuccess = (data: any) => ({\n  type: pcoActionTypes.GET_PCO_LIST_SUCCESS,\n  payload: data,\n});\n\nconst addPcoLoading = (data: any) => ({\n  type: pcoActionTypes.ADD_PCO_LOADING,\n  payload: data,\n});\n\nconst addPcoSuccess = (data: any) => ({\n  type: pcoActionTypes.ADD_PCO_SUCCESS,\n  payload: data,\n});\n\nconst updatePcoLoading = (data: any) => ({\n  type: pcoActionTypes.UPDATE_PCO_LOADING,\n  payload: data,\n});\n\nconst updatePcoSuccess = (data: any) => ({\n  type: pcoActionTypes.UPDATE_PCO_SUCCESS,\n  payload: data,\n});\n\nconst deletePcoLoading = (data: any) => ({\n  type: pcoActionTypes.DELETE_PCO_LOADING,\n  payload: data,\n});\n\nconst deletePcoSuccess = (data: any) => ({\n  type: pcoActionTypes.DELETE_PCO_SUCCESS,\n  payload: data,\n});\n\nexport const setSelectedPco = (data: any) => ({\n  type: pcoActionTypes.SET_SELECTED_PCO,\n  payload: data,\n});\n\nconst getPcoSuggestionListLoading = (data: any) => ({\n  type: pcoActionTypes.GET_PCO_SUGGESTION_LIST_LOADING,\n  payload: data,\n});\n\nconst getPcoSuggestionListSuccess = (data: any) => ({\n  type: pcoActionTypes.GET_PCO_SUGGESTION_LIST_SUCCESS,\n  payload: data,\n});\n\nexport const addPCOCall = (data: any, callbackFunction: (id: any) => void) => {\n  const { formData, forceAdd, addConfirmPco } = data;\n\n  return (dispatch: any, getSate: any) => {\n    dispatch(addPcoLoading(true));\n    apiCall(`PCO/create-PCO?force=${forceAdd}`, 'POST', formData)\n      .then((resp: any) => {\n        dispatch(addPcoSuccess(resp?.data?.data?.id));\n        if (!resp?.data?.success && formData.entityType === 'Person') {\n          resp?.data?.errors?.[0] && message.error({\n            content: addConfirmPco(resp.data.errors[0]),\n            style: {\n              marginTop: '2vh',\n            },\n            key: 'updatable',\n            duration: 15,\n          });\n          return;\n        }\n        if (resp.status !== 200) {\n          resp?.data?.message && message.error({\n            content: resp?.data?.message,\n            style: {\n              marginTop: '2vh',\n            },\n            key: 'updatable',\n          });\n          return;\n        }\n        callbackFunction(resp?.data?.data?.id);\n        resp?.data?.message && message.success({\n          content: resp?.data?.message,\n          style: {\n            marginTop: '2vh',\n          },\n          key: 'updatable',\n        });\n      });\n  };\n};\n\nexport const updatePCOCall = (data: any, callbackFunction: () => void) => {\n  const { id } = data;\n  return (dispatch: any, getSate: any) => {\n    dispatch(updatePcoLoading(true));\n    apiCall(`PCO/update-PCO/${id}`, 'PUT', data)\n      .then((resp: any) => {\n        dispatch(updatePcoSuccess(resp?.data?.data?.pco));\n        if (resp.status !== 200) {\n          resp?.data?.message && message.error({\n            content: resp?.data?.message,\n            style: {\n              marginTop: '2vh',\n            },\n            key: 'updatable',\n          });\n          return;\n        }\n        callbackFunction();\n        resp?.data?.message && message.success({\n          content: resp?.data?.message,\n          style: {\n            marginTop: '2vh',\n          },\n          key: 'updatable',\n        });\n      });\n  };\n};\n\nexport const deletePCOCall = (data: any, callbackFunction: () => void) => {\n  const { id } = data;\n  return (dispatch: any, getSate: any) => {\n    dispatch(deletePcoLoading(true));\n    apiCall(`PCO/delete-PCO/${id}`, 'PATCH', {})\n      .then((resp: any) => {\n        dispatch(deletePcoSuccess(resp?.data?.data?.pco));\n        if (resp.status !== 200 || !resp?.data?.success) {\n          const errorMsg = resp?.data?.message || resp?.data?.errors?.[0];\n          errorMsg && message.error({\n            content: errorMsg,\n            style: {\n              marginTop: '2vh',\n            },\n            key: 'updatable',\n          });\n          return;\n        }\n        callbackFunction();\n        resp?.data?.message && message.success({\n          content: resp?.data?.message,\n          style: {\n            marginTop: '2vh',\n          },\n          key: 'updatable',\n        });\n      });\n  };\n};\n\nexport const getPcoListCall = (data: any, callbackFunction: () => void) => {\n  const {\n    page, length, searchText, entityType, isDeleted,\n  } = data;\n\n  return (dispatch: any, getSate: any) => {\n    dispatch(getPcoListLoading(true));\n    apiCall(`PCO/get-PCO?Limit=${length}&page=${page}&searchText=${searchText}&entityType=${(entityType === 'all') ? '' : entityType}&isDeleted=${isDeleted}`, 'GET', data)\n      .then((resp: any) => {\n        dispatch(getPcoListLoading(false));\n        if (resp.status !== 200) {\n          getPcoListSuccess(false);\n          resp?.data?.message && message.error({\n            content: resp?.data?.message,\n            style: {\n              marginTop: '2vh',\n            },\n            key: 'updatable',\n          });\n          return;\n        }\n        // resp?.data?.message && message.success({\n        //   content: resp?.data?.message,\n        //   style: {\n        //     marginTop: '2vh',\n        //   },\n        //   key: 'updatable',\n        // });\n        const currentResponse = resp?.data?.data;\n        const reconstructedData = {\n          ...currentResponse,\n          data: {\n            \"currentPage\": currentResponse?.currentPage,\n            \"totalItems\": (currentResponse?.totalPage * length) || currentResponse?.totalItems,\n            \"totalPage\": currentResponse?.totalPage,\n            \"pcoList\": currentResponse?.data,\n          },\n        };\n        dispatch(getPcoListSuccess(currentResponse));\n        callbackFunction();\n      });\n  };\n};\n\nexport const getPcoListSuggestionCall = (data: any, callbackFunction: () => void) => {\n  const {\n    page, length, searchText, entityType, isDeleted,\n  } = data;\n\n  return (dispatch: any, getSate: any) => {\n    dispatch(getPcoSuggestionListLoading(true));\n    apiCall(`PCO/get-PCO?Limit=${length}&page=${page}&searchText=${searchText}&entityType=${(entityType === 'all') ? '' : entityType}&isDeleted=${isDeleted}`, 'GET', data)\n      .then((resp: any) => {\n        dispatch(getPcoSuggestionListLoading(false));\n        if (resp.status !== 200) {\n          getPcoSuggestionListSuccess(false);\n          resp?.data?.message && message.error({\n            content: resp?.data?.message,\n            style: {\n              marginTop: '2vh',\n            },\n            key: 'updatable',\n          });\n          return;\n        }\n        // resp?.data?.message && message.success({\n        //   content: resp?.data?.message,\n        //   style: {\n        //     marginTop: '2vh',\n        //   },\n        //   key: 'updatable',\n        // });\n        const currentResponse = resp?.data?.data;\n        const reconstructedData = {\n          ...currentResponse,\n          data: {\n            \"currentPage\": currentResponse?.currentPage,\n            \"totalItems\": (currentResponse?.totalPage * length) || currentResponse?.totalItems,\n            \"totalPage\": currentResponse?.totalPage,\n            \"pcoList\": currentResponse?.data,\n          },\n        };\n        dispatch(getPcoListSuccess(currentResponse));\n        callbackFunction();\n      });\n  };\n};\n","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/redux/auth/action.ts",["456","457","458","459","460","461","462","463"],"/* eslint-disable no-unused-vars */\nimport { message } from 'antd';\nimport moment from 'moment';\nimport { useNavigate } from 'react-router-dom';\nimport Cookies from 'universal-cookie';\nimport { apiCall } from '../../shared/api/apiWrapper';\nimport { authTypes } from './types';\nimport { refreshTokenTime, loginMaxAge } from '../../shared/constants/auth.json';\n\nconst signupLoading = (data: any) => ({\n  type: authTypes.SIGNUP_LOADING,\n  payload: data,\n});\n\nconst loginLoading = (data: any) => ({\n  type: authTypes.LOGIN_LOADING,\n  payload: data,\n});\n\nconst loginSuccess = (data: any) => ({\n  type: authTypes.LOGIN_SUCCESS,\n  payload: data,\n});\n\nconst logout = () => ({\n  type: authTypes.USER_LOGOUT,\n});\n\nconst getUserDetailByTokenLoading = (data: any) => ({\n  type: authTypes.GET_USER_DETAIL_BY_TOKEN_LOADING,\n  payload: data,\n});\n\nconst getUserDetailByTokenSuccess = (data: any) => ({\n  type: authTypes.GET_USER_DETAIL_BY_TOKEN_SUCCESS,\n  payload: data,\n});\n\nconst verifySignupByTokenLoading = (data: any) => ({\n  type: authTypes.VERIFY_SIGNUP_BY_TOKEN_LOADING,\n  payload: data,\n});\n\nconst verifySignupByTokenSuccess = (data: any) => ({\n  type: authTypes.VERIFY_SIGNUP_BY_TOKEN_SUCCESS,\n  payload: data,\n});\n\nconst updatePasswordInviteLoading = (data: any) => ({\n  type: authTypes.UPDATE_PASSWORD_INVITE_LOADING,\n  payload: data,\n});\n\nconst updatePasswordInviteSuccess = (data: any) => ({\n  type: authTypes.UPDATE_PASSWORD_INVITE_SUCCESS,\n  payload: data,\n});\n\nconst forgotUsernameLoading = () => ({\n  type: authTypes.FORGOT_USERNAME_LOADING,\n});\n\nconst forgotUsernameSuccess = () => ({\n  type: authTypes.FORGOT_USERNAME_SUCCESS,\n});\n\nconst forgotPasswordLoading = () => ({\n  type: authTypes.FORGOT_PASSWORD_LOADING,\n});\n\nconst forgotPasswordSuccess = () => ({\n  type: authTypes.FORGOT_PASSWORD_SUCCESS,\n});\n\nconst resetPasswordLoading = () => ({\n  type: authTypes.RESET_PASSWORD_LOADING,\n});\n\nconst resetPasswordSuccess = () => ({\n  type: authTypes.RESET_PASSWORD_SUCCESS,\n});\n\n// eslint-disable-next-line no-unused-vars\nexport const signUpCall = (data: any, callbackFunction: () => void) => {\n  console.log(data);\n\n  // eslint-disable-next-line no-unused-vars\n  return (dispatch: any, getSate: any) => {\n    dispatch(signupLoading(true));\n    apiCall('authenticate/signup-admin', 'POST', data)\n      .then((resp: any) => {\n        dispatch(signupLoading(false));\n        if (resp.status !== 200) {\n          resp?.data?.message && message.error({\n            content: resp?.data?.message,\n            style: {\n              marginTop: '2vh',\n            },\n            key: 'updatable',\n          });\n          return;\n        }\n        callbackFunction();\n        resp?.data?.message && message.success({\n          content: resp?.data?.message,\n          style: {\n            marginTop: '2vh',\n          },\n          key: 'updatable',\n        });\n      });\n  };\n};\n\n// eslint-disable-next-line no-unused-vars\nexport const loginCall = (data: any, callbackFunction: () => void) => {\n  console.log(data);\n  const cookies = new Cookies();\n  // eslint-disable-next-line no-unused-vars\n  return (dispatch: any, getSate: any) => {\n    dispatch(loginLoading(true));\n    apiCall('authenticate/signin', 'POST', data)\n      .then((resp: any) => {\n        dispatch(loginLoading(false));\n        if (resp.status !== 200) {\n          loginSuccess(false);\n          resp?.data?.message && message.error({\n            content: resp?.data?.message,\n            style: {\n              marginTop: '2vh',\n            },\n            key: 'updatable',\n          });\n          return;\n        }\n        resp?.data?.message && message.success({\n          content: resp?.data?.message,\n          style: {\n            marginTop: '2vh',\n          },\n          key: 'updatable',\n        });\n        dispatch(loginSuccess(resp?.data?.data));\n        if (data?.staySignedIn) {\n          cookies.set('login', true, { path: '/', maxAge: loginMaxAge });\n          cookies.set('loginDetails', {\n            token: resp?.data?.token,\n            refreshToken: resp?.data?.refreshToken,\n            expireAt: moment(Date.now()).add(refreshTokenTime, 'minute').format('YYYY-MM-DDTHH:mm:ssZz'),\n            user: data?.userName,\n            loginDetails: resp?.data,\n            userType: resp?.data?.data?.roleName,\n            tenantId: resp?.data?.data?.tenantId,\n            userCountryCode: resp?.data?.data?.countryCode,\n          }, { path: '/', maxAge: loginMaxAge });\n        } else {\n          cookies.set('login', true, { path: '/' });\n          cookies.set('loginDetails', {\n            token: resp?.data?.token,\n            refreshToken: resp?.data?.refreshToken,\n            expireAt: moment(Date.now()).add(refreshTokenTime, 'minute').format('YYYY-MM-DDTHH:mm:ssZz'),\n            user: data?.userName,\n            loginDetails: resp?.data,\n            sessionLogin: true,\n            userType: resp?.data?.data?.roleName,\n            tenantId: resp?.data?.data?.tenantId,\n            userCountryCode: resp?.data?.data?.countryCode,\n          }, { path: '/' });\n        }\n        callbackFunction();\n      });\n  };\n};\n\n// eslint-disable-next-line no-unused-vars\nexport const logoutCall = (data: any) => {\n  console.log(data);\n\n  // eslint-disable-next-line no-unused-vars\n  return (dispatch: any, getSate: any) => {\n    const navigate = useNavigate();\n    navigate('/');\n    dispatch(logout());\n  };\n};\n\n// eslint-disable-next-line no-unused-vars\nexport const getUserDetailByToken = (data: any, callbackFunction: (detailMessage: string) => void) => {\n  console.log(data);\n\n  const { token, email } = data;\n  // eslint-disable-next-line no-unused-vars\n  return (dispatch: any, getSate: any) => {\n    dispatch(getUserDetailByTokenLoading(true));\n    apiCall(`user/verify-email?token=${token}&email=${email}`, 'GET', {})\n      .then((resp: any) => {\n        dispatch(getUserDetailByTokenSuccess(resp?.data?.data?.usersVM));\n        if (resp.status !== 200) {\n          callbackFunction(resp?.data?.errors?.[0]);\n          resp?.data?.message && message.error({\n            content: resp?.data?.message,\n            style: {\n              marginTop: '2vh',\n            },\n            key: 'updatable',\n          });\n          return;\n        }\n        callbackFunction(resp?.data?.errors?.[0]);\n        resp?.data?.message && message.success({\n          content: resp?.data?.message,\n          style: {\n            marginTop: '2vh',\n          },\n          key: 'updatable',\n        });\n      });\n  };\n};\n\n// eslint-disable-next-line no-unused-vars\nexport const verifySignupByToken = (data: any, callbackFunction: (detailMessage: string) => void) => {\n  console.log(data);\n\n  const { token, email } = data;\n  // eslint-disable-next-line no-unused-vars\n  return (dispatch: any, getSate: any) => {\n    dispatch(verifySignupByTokenLoading(true));\n    apiCall(`user/signup-verify-email?token=${token}&email=${email}`, 'GET', {})\n      .then((resp: any) => {\n        dispatch(verifySignupByTokenSuccess(resp?.data?.data?.usersVM));\n        if (resp.status !== 200) {\n          callbackFunction(resp?.data?.errors?.[0]);\n          resp?.data?.message && message.error({\n            content: resp?.data?.message,\n            style: {\n              marginTop: '2vh',\n            },\n            key: 'updatable',\n          });\n          return;\n        }\n        callbackFunction(resp?.data?.errors?.[0]);\n        resp?.data?.message && message.success({\n          content: resp?.data?.message,\n          style: {\n            marginTop: '2vh',\n          },\n          key: 'updatable',\n        });\n      });\n  };\n};\n\n// eslint-disable-next-line no-unused-vars\nexport const updatePasswordInvite = (data: any, callbackFunction: () => void) => {\n  console.log(data);\n\n  // eslint-disable-next-line no-unused-vars\n  return (dispatch: any, getSate: any) => {\n    dispatch(updatePasswordInviteLoading(true));\n\n    const { token } = data;\n    apiCall(`user/update-user-on-emailconfirmation?token=${token}`, 'POST', data)\n      .then((resp: any) => {\n        dispatch(updatePasswordInviteLoading(false));\n        dispatch(updatePasswordInviteSuccess(resp?.data));\n        if (resp.status !== 200 || !resp?.data?.success) {\n          const errorMessage = resp?.data?.message || resp?.data?.errors?.[0];\n          errorMessage && message.error({\n            content: errorMessage,\n            style: {\n              marginTop: '2vh',\n            },\n            key: 'updatable',\n          });\n          return;\n        }\n        callbackFunction();\n        resp?.data?.message && message.success({\n          content: resp?.data?.message,\n          style: {\n            marginTop: '2vh',\n          },\n          key: 'updatable',\n        });\n      });\n  };\n};\n\nexport const getRefreshToken = (data: any, callbackFunction: () => void) => {\n  console.log(data);\n\n  const { token, refreshToken } = data;\n  // eslint-disable-next-line no-unused-vars\n  return (dispatch: any, getSate: any) => {\n    apiCall('authenticate/refresh-token', 'POST', { token, refreshToken })\n      .then((resp: any) => {\n        if (resp.status !== 200) {\n          resp?.data?.message && message.error({\n            content: resp?.data?.message,\n            style: {\n              marginTop: '2vh',\n            },\n            key: 'updatable',\n          });\n          return;\n        }\n        callbackFunction();\n        resp?.data?.message && message.success({\n          content: resp?.data?.message,\n          style: {\n            marginTop: '2vh',\n          },\n          key: 'updatable',\n        });\n      });\n  };\n};\n\n// eslint-disable-next-line no-unused-vars\nexport const forgotUsername = (data: any, callbackFunction: (messageData: any) => void) => {\n  const { email } = data;\n\n  // eslint-disable-next-line no-unused-vars\n  return (dispatch: any, getSate: any) => {\n    dispatch(forgotUsernameLoading());\n    apiCall(`authenticate/forgot-username?email=${email}`, 'POST', {})\n      .then((resp: any) => {\n        dispatch(forgotUsernameSuccess());\n        if (resp.status !== 200) {\n          resp?.data?.message && message.error({\n            content: resp?.data?.message,\n            style: {\n              marginTop: '2vh',\n            },\n            key: 'updatable',\n          });\n          return;\n        }\n        callbackFunction(resp?.data?.message);\n        resp?.data?.message && message.success({\n          content: resp?.data?.message,\n          style: {\n            marginTop: '2vh',\n          },\n          key: 'updatable',\n        });\n      });\n  };\n};\n\n// eslint-disable-next-line no-unused-vars\nexport const forgotPassword = (data: any, callbackFunction: (messageData: any) => void) => {\n  const { email, username } = data;\n\n  // eslint-disable-next-line no-unused-vars\n  return (dispatch: any, getSate: any) => {\n    dispatch(forgotPasswordLoading());\n    apiCall(`authenticate/forgot-password?userName=${username}&email=${email}`, 'POST', {})\n      .then((resp: any) => {\n        dispatch(forgotPasswordSuccess());\n        if (resp.status !== 200) {\n          resp?.data?.message && message.error({\n            content: resp?.data?.message,\n            style: {\n              marginTop: '2vh',\n            },\n            key: 'updatable',\n          });\n          return;\n        }\n        callbackFunction(resp?.data?.message);\n        resp?.data?.message && message.success({\n          content: resp?.data?.message,\n          style: {\n            marginTop: '2vh',\n          },\n          key: 'updatable',\n        });\n      });\n  };\n};\n\n// eslint-disable-next-line no-unused-vars\nexport const resetPassword = (data: any, callbackFunction: (messageData: any) => void) => {\n  console.log('reset password api call');\n\n  // eslint-disable-next-line no-unused-vars\n  return (dispatch: any, getSate: any) => {\n    dispatch(resetPasswordLoading());\n    apiCall('authenticate/reset-password', 'POST', data)\n      .then((resp: any) => {\n        dispatch(resetPasswordSuccess());\n        if (resp.status !== 200) {\n          resp?.data?.message && message.error({\n            content: resp?.data?.message,\n            style: {\n              marginTop: '2vh',\n            },\n            key: 'updatable',\n          });\n          return;\n        }\n        callbackFunction(resp?.data?.message);\n        resp?.data?.message && message.success({\n          content: resp?.data?.message,\n          style: {\n            marginTop: '2vh',\n          },\n          key: 'updatable',\n        });\n      });\n  };\n};\n\nexport const setIntervalId = (data: any) => ({\n  type: authTypes.SET_INTERVAL_ID,\n  payload: data,\n});\n","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/customization/Customization.tsx",["464","465"],"import { useState } from 'react';\nimport {\n  Tabs, Typography,\n} from 'antd';\n// eslint-disable-next-line no-unused-vars\nimport { isMobile } from 'react-device-detect';\nimport AnimalTypes from './components/AnimalTypes';\n// import AnimalSpecies from './components/AnimalSpecies';\nimport AnimalAcquisitionWay from './components/AnimalAcquisitionWay';\n// import AnimalBehaviors from './components/AnimalBehaviors';\nimport Behaviors from './components/Behaviors';\nimport HospitalClinics from './components/HospitalClinics';\nimport HealthProcedure from './components/HealthProcedure';\nimport AnimalVaccinationType from './components/AnimalVaccinationType';\nimport AnimalVeterinarians from './components/AnimalVeterinarian';\n// import VaccinesInventory from './components/VaccinesInventory';\nimport AnimalMedicine from './components/AnimalMedicine';\nimport VolunteerActivities from './components/VolunteerActivities';\nimport OrganizationInfo from './components/OrganizationInfo';\nimport AnimalRescues from './components/AnimalRescues';\n// eslint-disable-next-line\nimport { CustomizationProps } from \"./Customization.types\";\nimport './Customization.less';\n\n// eslint-disable-next-line no-unused-vars\nconst { Title } = Typography;\nconst { TabPane } = Tabs;\n\nconst cssPrefix = 'ftr-customization';\n\n// eslint-disable-next-line\nexport const Customization = () => {\n  // eslint-disable-next-line\n  const [data, setData] = useState('');\n  // eslint-disable-next-line\n  const [activeTab, setActiveTab] = useState('');\n\n  const customizationTabs = [\n    { title: 'Organization Info', content: <OrganizationInfo /> },\n    { title: 'Animal Types', content: <AnimalTypes /> },\n    { title: 'Animal Acquisition Ways', content: <AnimalAcquisitionWay /> },\n    { title: 'Animal Behaviors', content: <Behaviors activeTab={activeTab} /> },\n    { title: 'Animal Hospitals/Clinics', content: <HospitalClinics /> },\n    { title: 'Veterinarians', content: <AnimalVeterinarians activeTab={activeTab} /> },\n    { title: 'Health Procedures', content: <HealthProcedure activeTab={activeTab} /> },\n    { title: 'Vaccination Types', content: <AnimalVaccinationType activeTab={activeTab} /> },\n    { title: 'Medicines', content: <AnimalMedicine /> },\n    { title: 'Volunteer Activities', content: <VolunteerActivities /> },\n    { title: 'Other Animal Rescues/Shelters', content: <AnimalRescues /> },\n    // { title: 'Animal Breed/Species', content: <AnimalSpecies activeTab={activeTab} /> },\n    // { title: 'Vaccines In Inventory', content: <VaccinesInventory activeTab={activeTab} /> },\n  ];\n\n  /**\n   *\n   * Methods related to CRUD operations goes below\n   *\n  * */\n\n  /**\n   *\n   * Navigate or move view to other components\n   *\n  * */\n\n  /**\n   *\n   * Business Logic goes below\n   *\n  * */\n\n  /**\n   *\n   * All ReactElements or JSX Elements are below\n   *\n  * */\n  const pageHeader = (\n    <div className={`${cssPrefix}__header-row`}>\n      {/* <Title level={3} style={{ margin: '16px 0' }}>\n        Customization\n      </Title> */}\n    </div>\n  );\n\n  return (\n    <div className={`${cssPrefix}`}>\n      {pageHeader}\n      <div className=\"desktop-view\">\n        <Tabs\n          onChange={(activeKey) => setActiveTab(activeKey)}\n          activeKey={activeTab}\n          tabBarStyle={{ width: 230, fontSize: '2px !important' }}\n          tabPosition=\"left\"\n          style={{ minHeight: '440px', width: '100%' }}\n        >\n          {customizationTabs.map((value, i) => (\n            // eslint-disable-next-line react/no-array-index-key\n            <TabPane tab={value.title} key={i} disabled={i === 28}>\n              {value.content}\n            </TabPane>\n          ))}\n        </Tabs>\n      </div>\n      <div className=\"mobile-view\">\n        <Tabs\n          onChange={(activeKey) => setActiveTab(activeKey)}\n          activeKey={activeTab}\n          tabBarStyle={{ width: '94vw', fontSize: '2px !important' }}\n          tabPosition=\"top\"\n          style={{ minHeight: '440px', width: '100%' }}\n        >\n          {customizationTabs.map((value, i) => (\n            // eslint-disable-next-line react/no-array-index-key\n            <TabPane tab={value.title} key={i} disabled={i === 28}>\n              {value.content}\n            </TabPane>\n          ))}\n        </Tabs>\n      </div>\n    </div>\n  );\n};\n","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/users/Users.tsx",["466","467"],"import {\n  useEffect, useRef, useState, FC,\n} from 'react';\nimport UsersList from './components/UsersList';\nimport { UsersProps } from './Users.types';\nimport './Users.less';\n\nconst cssPrefix = 'ftr-users';\n\nexport const Users: FC<UsersProps> = (newUsersProps) => {\n  const titleRef = useRef<HTMLInputElement>(null);\n  const {\n    getUserListCall, getUserListLoading, inviteUserCall, userList, updateUser, deleteUser, inviteUserLoading,\n  } = newUsersProps;\n  const [viewInactive, setViewInactive] = useState(false);\n\n  useEffect(() => {\n    // titleRef.current?.scrollIntoView();\n  }, [titleRef]);\n\n  useEffect(() => {\n    getUserListCall(viewInactive, () => console.log('--------'));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [viewInactive]);\n\n  // eslint-disable-next-line no-unused-vars\n  const pageHeader = (\n    <>\n      <div className={`${cssPrefix}__header-row`}>\n        {/* <Title level={3} style={{ margin: '16px 0' }}>\n          Users\n        </Title> */}\n      </div>\n    </>\n  );\n\n  return (\n    <div className={`${cssPrefix}`} ref={titleRef}>\n      {/* {pageHeader} */}\n      <UsersList\n        inviteUserLoading={inviteUserLoading}\n        loading={getUserListLoading}\n        userList={userList}\n        getUserListCall={getUserListCall}\n        updateUser={updateUser}\n        deleteUser={deleteUser}\n        inviteUserCall={inviteUserCall}\n        viewInactive={viewInactive}\n        setViewInactive={setViewInactive}\n      />\n    </div>\n  );\n};\n","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/animals/FtrAnimals.tsx",["468","469","470","471","472","473","474","475","476","477","478","479","480","481","482","483","484"],"/* eslint-disable no-unused-vars */\nimport {\n  message, Modal, Select, Space, Typography,\n} from 'antd';\nimport {\n  FlagFilled,\n} from '@ant-design/icons';\nimport { useEffect, useState } from 'react';\nimport {\n  AnimalsProps, DataType, TableFilterOptions, TableFilterTypes,\n} from './FtrAnimals.types';\nimport './FtrAnimals.less';\nimport { AnimalsAddModal } from './components/AnimalsAddModal';\nimport { ContentToolbar } from './components/ContentToolbar';\nimport { columns, CURRENT, FORMER } from './FtrAnimals.data';\nimport { animalMock } from './animals-mock';\nimport { pageLength } from '../../shared/constants/pagination.json';\nimport { apiCall } from '../../shared/api/apiWrapper';\nimport { pluralToSingular } from '../../utils/pluralToSingular';\nimport CustomTablePagination from '../../shared/components/CustomTablePagination';\nimport BreadCrumb from '../../shared/components/BreadCrumb';\n\nconst { Title } = Typography;\nconst { Option } = Select;\nconst { confirm } = Modal;\n\nconst cssPrefix = 'ftr-animals';\n\n// eslint-disable-next-line\nexport const Animals = (props: AnimalsProps) => {\n  const {\n    getAnimalListLoading, getAnimalListSuccess, animalList, totalNumber, currentPage,\n    addAnimalLoading, updateAnimalLoading, addAnimalSuccess, pcoList, setSelectedPcoId,\n    getAnimalListCall, getAnimalListSuggestionCall, addAnimalCall, updateAnimalCall,\n    deleteAnimalCall, selectedPcoId, selectedAnimalId, setSelectedAnimal, uploadImageCall, deleteImageCall,\n  } = props;\n  const filterOptions: TableFilterOptions[] = [\n    // { id: 'all', name: 'All' },\n    { id: CURRENT, name: 'Current Residents' },\n    { id: FORMER, name: 'Former Residents' },\n  ];\n\n  const [onLoad, setOnLoadFlag] = useState(true);\n  const [tableData, setTableData] = useState(JSON.parse(JSON.stringify(animalMock))); // eslint-disable-line\n  const [filteredTableData, setFilteredTableData] = useState(tableData);\n  const [tableFilter, setTableFilter] = useState(true);\n  const [addModalVisible, setAddModalVisible] = useState(false);\n  const [selectedRows, setSelectedRows] = useState<React.Key[]>([]);\n  const [editRecord, setEditRecord] = useState(null);\n  const [currentPageLocal, setCurrentPageLocal] = useState(1);\n  const [searchKey, setSearchKey] = useState('');\n  const [searchKeyFinal, setSearchKeyFinal] = useState('');\n  const [selectedId, setSelectedId] = useState('');\n  const [animalDataForDelete, setAnimalDataForDelete] = useState<any>('');\n\n  /** Methods related to CRUD operations goes below * */\n\n  // eslint-disable-next-line no-unused-vars\n  const onDeleteAnimal = (id: string): void => {\n    deleteAnimalCall({ id }, () => {\n      getAnimalListCall({\n        length: pageLength,\n        page: currentPageLocal,\n        isDeleted: false,\n        isAvailable: tableFilter,\n        searchText: searchKey,\n      }, () => console.log('get list of pco'));\n    });\n  };\n\n  const getAnimalMilestoneById = (animalId: any) => {\n    setAnimalDataForDelete('');\n    apiCall(`animal/get-animal-milestone/${animalId}`, 'GET', {})\n      .then((resp: any) => {\n        if (resp.status === 200) {\n          setAnimalDataForDelete(resp?.data?.data);\n        }\n      });\n  };\n\n  const deleteAllClicked = () => {\n    const myPromises = []; // eslint-disable-line\n  };\n\n  /** Navigate or move view to other components * */\n\n  const setAddModalVisibility = (flag: boolean): void => {\n    setAddModalVisible(flag);\n  };\n\n  const onActionItemClick = (key: React.Key, value: string) => {\n    if (key === 'wide-exposure') {\n      return;\n    }\n    if (String(value).includes('*')) {\n      if (selectedRows.length === 0) {\n        message.warn({\n          content: 'You must select at least one animal',\n          style: {\n            marginTop: '2vh',\n          },\n          key: 'actionItemClick',\n        });\n      }\n    } else {\n      // eslint-disable-next-line no-lonely-if\n      if (selectedRows.length === 0) {\n        message.warn({\n          content: 'You must select an animal',\n          style: {\n            marginTop: '2vh',\n          },\n          key: 'actionItemClick',\n        });\n      } else if (selectedRows.length > 1) {\n        message.warn({\n          content: 'You may only select one animal',\n          style: {\n            marginTop: '2vh',\n          },\n          key: 'actionItemClick',\n        });\n      }\n    }\n  };\n\n  const onRefresh = () => {\n    setOnLoadFlag(true);\n  };\n\n  /** Business Logic goes below * */\n\n  const filterTableEntries = (key: string) => (str: string) => {\n    const newData: DataType[] = (key && key !== '') && (str && str !== '')\n      ? tableData.filter((entry: any) => entry[key].toLowerCase().includes(str.toLowerCase())) as DataType[]\n      : tableData as DataType[];\n    setFilteredTableData(newData as any);\n  };\n\n  const handleFilterChange = (val: TableFilterTypes) => {\n    setSelectedAnimal([]);\n    setTableFilter(val === 'current');\n  };\n\n  const updateSelectedRows = (records: DataType[]) => {\n    const keys: React.Key[] = records.length > 0 ? records.map((r) => r.key) : [];\n    setSelectedRows(keys);\n  };\n\n  useEffect(() => {\n    getAnimalListCall({\n      length: pageLength,\n      page: currentPageLocal,\n      isDeleted: false,\n      isAvailable: tableFilter,\n      searchText: searchKeyFinal,\n    }, () => console.log('get list of animal length'));\n  }, [currentPageLocal, tableFilter, searchKeyFinal]);\n\n  useEffect(() => {\n    if (!searchKey) {\n      setSearchKeyFinal('');\n      getAnimalListCall({\n        length: pageLength,\n        page: currentPageLocal,\n        isDeleted: false,\n        isAvailable: tableFilter,\n        searchText: '',\n      }, () => console.log('get list of animal length'));\n    }\n  }, [searchKey]);\n\n  useEffect(() => {\n    setSelectedAnimal('');\n  }, []);\n\n  /** All ReactElements or JSX Elements are below * */\n  const pageHeader = (\n    <div className={`${cssPrefix}__header-row`}>\n      <Title level={3} style={{ margin: '16px 0' }}>\n        Animals\n      </Title>\n    </div>\n  );\n\n  const filterSlot = (\n    <Select\n      className={`${cssPrefix}__ct__filter`}\n      defaultValue={filterOptions[0].id}\n      onChange={handleFilterChange}\n    >\n      {filterOptions?.map((opt) => (\n        <Option key={opt.id} value={opt.id}>{opt.name}</Option>\n      ))}\n    </Select>\n  );\n\n  const contentToolbar = (\n    <ContentToolbar\n      selectedAnimalId={selectedAnimalId}\n      filterSlot={filterSlot}\n      searchKey={searchKey}\n      setSearchKey={setSearchKey}\n      setSearchKeyFinal={setSearchKeyFinal}\n      onAddIconClicked={setAddModalVisibility}\n      disableDeleteIcon={false}\n      onDeleteIconClicked={deleteAllClicked}\n      onActionItemClick={onActionItemClick}\n      onRefresh={() => onRefresh()}\n    />\n  );\n\n  const nameColumnRenderer = (text: string, record: any) => (\n    <Space align=\"baseline\" size=\"middle\">\n      <span>\n        {text}\n      </span>\n      {record.flag ? (\n        <FlagFilled\n          className={`${cssPrefix}__table-cell-flag${record.flag ? '--flagged' : ''}`}\n        />\n      ) : <span />}\n    </Space>\n  );\n\n  const animalTypeRender = (text: string, record: any) => (\n    <span>{pluralToSingular(record?.animalType)}</span>\n  );\n\n  const columnsConfig = [\n    {\n      title: 'Name',\n      dataIndex: 'animalName',\n      sorter: (a: any, b: any) => a.animalName.localeCompare(b.animalName),\n      render: nameColumnRenderer,\n    },\n    {\n      title: 'Type',\n      dataIndex: 'animalType',\n      sorter: (a: any, b: any) => a?.animalType?.localeCompare(b?.animalType),\n      render: animalTypeRender,\n    },\n    ...columns,\n  ];\n\n  /** API calls and Hooks * */\n\n  if (onLoad) {\n    filterTableEntries('resident')('current');\n    setOnLoadFlag(false);\n  }\n\n  const setEditModalOpen = (value: boolean, data: any) => {\n    setEditRecord(data);\n    setAddModalVisible(value);\n  };\n\n  return (\n    <div className={`${cssPrefix}`}>\n      {/* {pageHeader} */}\n      {contentToolbar}\n      <CustomTablePagination\n        config={{\n          rowSelection: 'checkbox',\n          selectedRow: selectedAnimalId,\n          setSelectedRow: setSelectedAnimal,\n          isNotEditable: false,\n          showHeader: true,\n          selectable: true,\n          tableType: 'Animals',\n          deleteConfirmationData: animalDataForDelete,\n          getDeleteConfirmationDetail: (id: string) => getAnimalMilestoneById(id),\n        }}\n        totalNumber={totalNumber}\n        currentPage={currentPageLocal}\n        setPaginationData={setCurrentPageLocal}\n        tableData={animalList}\n        columnData={columnsConfig}\n        isLoading={getAnimalListLoading}\n        delete={(id: string) => onDeleteAnimal(id)}\n        setEditModalOpen={(isOpen: boolean, data: any) => setEditModalOpen(isOpen, data)}\n      />\n      {/* <SharedTable\n        columns={columnsConfig}\n        dataSource={animalList}\n        selectedRowKeys={selectedRows}\n        updateSelectedRows={updateSelectedRows}\n      /> */}\n      <AnimalsAddModal\n        pcoList={pcoList}\n        visible={addModalVisible}\n        editRecord={editRecord}\n        setEditRecord={setEditRecord}\n        selectedPcoId={selectedPcoId}\n        addAnimalCall={addAnimalCall}\n        getAnimalListCall={getAnimalListCall}\n        addAnimalLoading={addAnimalLoading}\n        updateAnimalCall={updateAnimalCall}\n        updateAnimalLoading={updateAnimalLoading}\n        setSelectedPcoId={setSelectedPcoId}\n        setSelectedAnimal={setSelectedAnimal}\n        selectedAnimalId={selectedAnimalId}\n        setAddModalVisibility={setAddModalVisibility}\n        setSearchKey={setSearchKey}\n        setSearchKeyFinal={setSearchKeyFinal}\n        uploadImageCall={uploadImageCall}\n        deleteImageCall={deleteImageCall}\n        getAnimalFilter={{\n          length: pageLength,\n          page: currentPageLocal,\n          isDeleted: false,\n          isAvailable: tableFilter,\n          searchText: searchKey,\n        }}\n        handleCancel={() => {\n          setAddModalVisibility(false);\n          setEditRecord(null);\n        }}\n      />\n    </div>\n  );\n};\n\nexport default Animals;\n","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/pco/PCO.tsx",["485","486","487","488","489","490","491","492","493","494","495","496","497","498","499","500","501","502","503","504"],"/* eslint-disable no-unused-vars */\nimport { useEffect, useState, FC } from 'react';\nimport {\n  Modal, Select, Space, Switch, Typography, AutoComplete,\n} from 'antd';\nimport {\n  QuestionCircleOutlined, CheckOutlined, CloseOutlined, FlagFilled,\n} from '@ant-design/icons';\nimport {\n  filterOptions, ORG,\n} from './Pco.data';\nimport {\n  TableData, PcoProps, TableFilterTypes,\n} from './PCO.types';\nimport { pcoMock } from './pco-mock';\nimport { ContentToolbar } from './components/ContentToolbar';\nimport { PcoAddModal } from './components/PcoAddModal';\nimport CustomTablePagination from '../../shared/components/CustomTablePagination';\nimport { pageLength } from '../../shared/constants/pagination.json';\nimport './PCO.less';\n\nconst { Title } = Typography;\nconst { Option } = Select;\nconst { confirm } = Modal;\n\nconst cssPrefix = 'ftr-pco';\n\n// eslint-disable-next-line\nexport const PCO: FC<PcoProps> = (newPcoProps) => {\n  const [tableData, setTableData] = useState(JSON.parse(JSON.stringify(pcoMock)));\n  // eslint-disable-next-line no-unused-vars\n  const [filteredTableData, setFilteredTableData] = useState(tableData);\n  const [tableFilter, setTableFilter] = useState<TableFilterTypes>(filterOptions[0].id);\n  const [addModalVisible, setAddModalVisible] = useState(false);\n  const [tempForm, setTempForm] = useState({});\n  const [editRecord, setEditRecord] = useState(null);\n  const [currentPageLocal, setCurrentPageLocal] = useState(1);\n  const [searchKey, setSearchKey] = useState('');\n  const [searchKeyFinal, setSearchKeyFinal] = useState('');\n  const [clickedValue, setClickedValue] = useState(false);\n\n  const {\n    getPcoListLoading,\n    getPcoListCall,\n    addPCOCall,\n    updatePCOCall,\n    pcoList,\n    selectedId,\n    addPcoLoading,\n    updatePcoLoading,\n    deletePCOCall,\n    setSelectedPco,\n    totalNumber,\n    userCountryCode,\n    uploadImageCall,\n    deleteImageCall,\n  } = newPcoProps;\n\n  /** Methods related to CRUD operations goes below  */\n\n  const onDeletePco = (id: string): void => {\n    setSelectedPco(id);\n    deletePCOCall({ id }, () => {\n      getPcoListCall({\n        length: pageLength,\n        page: currentPageLocal,\n        isDeleted: false,\n        entityType: tableFilter,\n        searchText: searchKey,\n      }, () => console.log('get list of pco'));\n    });\n  };\n\n  const setEditModalOpen = (value: boolean, data: any) => {\n    setSelectedPco(data?.id);\n    setEditRecord(data);\n    setAddModalVisible(value);\n    setTempForm(data);\n  };\n\n  const deleteAllClicked = () => {\n    // const newData: TableData[] = tableData.filter((entry: TableData) => !selectedRows.includes(entry.key)) as TableData[];\n    // setTableData(newData as any);\n    // setFilteredTableData(newData as any);\n  };\n\n  /*  Navigate or move view to other components */\n\n  const setAddModalVisibility = (flag: boolean): void => {\n    setAddModalVisible(flag);\n  };\n\n  /** Business Logic goes below */\n\n  const handleFilterChange = (val: TableFilterTypes) => {\n    setSearchKey('');\n    setSearchKeyFinal('');\n    setSelectedPco('');\n    setCurrentPageLocal(1);\n    setTableFilter(val);\n  };\n\n  /** All ReactElements or JSX Elements are below * */\n  const pageHeader = (\n    <div className={`${cssPrefix}__header-row`}>\n      <Title level={3} style={{ margin: '16px 0' }}>\n        People, Companies, and Organizations\n      </Title>\n    </div>\n  );\n\n  const filterSlot = (\n    <Select\n      className={`${cssPrefix}__ct__filter`}\n      defaultValue={filterOptions[0].id}\n      onChange={handleFilterChange}\n    >\n      {filterOptions?.map((opt) => (\n        <Option key={opt.id} value={opt.id}>{opt.name}</Option>\n      ))}\n    </Select>\n  );\n\n  const contentToolbar = (\n    <ContentToolbar\n      filterSlot={filterSlot}\n      searchKey={searchKey}\n      setSearchKey={setSearchKey}\n      setSearchKeyFinal={setSearchKeyFinal}\n      currentPage={currentPageLocal}\n      pageLength={pageLength}\n      tableFilter={tableFilter}\n      onAddIconClicked={setAddModalVisibility}\n      disableDeleteIcon={false}\n      onDeleteIconClicked={deleteAllClicked}\n      onActionItemClick={() => alert('item clicked')}\n    />\n  );\n\n  const nameColumnRenderer = (text: string, record: any) => (\n    <Space align=\"baseline\" size=\"middle\">\n      <span>\n        {text}\n      </span>\n      {record.flag ? (\n        <FlagFilled\n          className={`${cssPrefix}__table-cell-flag${record.flag ? '--flagged' : ''}`}\n        />\n      ) : <span />}\n    </Space>\n  );\n\n  const mailListColumnRenderer = (_text: any, record: any) => (\n    <Space size=\"middle\">\n      <Switch\n        className={`${cssPrefix}__table-row-switch`}\n        defaultChecked={record.mailList}\n        checkedChildren={<CheckOutlined />}\n        unCheckedChildren={<CloseOutlined />}\n        checked={record?.mailList}\n        onChange={(checked: boolean) => {\n          console.log(record, 'record');\n          updatePCOCall({ ...record, mailList: checked, countryId: record.countryId ?? localStorage.getItem('countryId') }, () => {\n            setAddModalVisibility(false);\n          });\n        }}\n      />\n    </Space>\n  );\n\n  const sortedInfo = {};\n  const filteredInfo = {};\n\n  const pcoColumns = [{\n    title: tableFilter === ORG ? 'Name' : 'Last Name',\n    dataIndex: 'lastName',\n    onFilter: (value: any, record: any) => record.name.includes(value),\n    sorter: (a: any, b: any) => a.lastName.localeCompare(b.lastName),\n    render: nameColumnRenderer,\n  },\n  {\n    title: 'First Name',\n    dataIndex: 'firstName',\n    onFilter: (value: any, record: any) => record.name.includes(value),\n    sorter: (a: any, b: any) => a.firstName.localeCompare(b.firstName),\n  },\n  {\n    title: 'Street',\n    dataIndex: 'street',\n    onFilter: (value: any, record: any) => record.name.includes(value),\n    sorter: (a: any, b: any) => a.street.localeCompare(b.street),\n  },\n  {\n    title: 'Street 2',\n    dataIndex: 'street2',\n    onFilter: (value: any, record: any) => record.name.includes(value),\n    sorter: (a: any, b: any) => a.street2.localeCompare(b.street2),\n  },\n  {\n    title: 'City',\n    dataIndex: 'city',\n    onFilter: (value: any, record: any) => record.name.includes(value),\n    sorter: (a: any, b: any) => a.city.localeCompare(b.city),\n    width: 100,\n  },\n  {\n    title: 'State',\n    dataIndex: 'state',\n    onFilter: (value: any, record: any) => record.name.includes(value),\n    sorter: (a: any, b: any) => a.state.localeCompare(b.state),\n  },\n  {\n    title: 'Zip',\n    dataIndex: 'zip',\n    onFilter: (value: any, record: any) => record.name.includes(value),\n    sorter: (a: any, b: any) => a.zip.localeCompare(b.zip),\n  },\n  {\n    title: 'Phone',\n    dataIndex: 'phone',\n    onFilter: (value: any, record: any) => record.name.includes(value),\n    sorter: (a: any, b: any) => a.phone.length - b.phone.length,\n  },\n  {\n    title: 'Email',\n    dataIndex: 'email',\n    onFilter: (value: any, record: any) => record.name.includes(value),\n    sorter: (a: any, b: any) => a.email.length - b.email.length,\n    width: 220,\n  },\n  {\n    title: 'Mail List',\n    dataIndex: 'mailList',\n    render: mailListColumnRenderer,\n  }];\n\n  /** Hooks goes below * */\n  useEffect(() => {\n    getPcoListCall({\n      length: pageLength,\n      page: clickedValue ? '1' : currentPageLocal,\n      isDeleted: false,\n      entityType: tableFilter,\n      searchText: searchKey,\n    }, () => console.log('get list of pco'));\n  }, [currentPageLocal, tableFilter, searchKeyFinal]);\n\n  useEffect(() => {\n    if (!searchKey) {\n      setSearchKeyFinal('');\n      getPcoListCall({\n        length: pageLength,\n        page: clickedValue ? '1' : currentPageLocal,\n        isDeleted: false,\n        entityType: tableFilter,\n        searchText: searchKey,\n      }, () => console.log('get list of pco'));\n    }\n  }, [searchKey]);\n\n  useEffect(() => {\n    setSelectedPco('');\n  }, []);\n\n  return (\n    <div className=\"container\">\n      {/* {pageHeader} */}\n      {contentToolbar}\n      {/* <SharedTable\n        columns={columnsConfig}\n        dataSource={filteredTableData}\n        selectedRowKeys={selectedRows}\n        updateSelectedRows={updateSelectedRows}\n      /> */}\n      <CustomTablePagination\n        config={{\n          rowSelection: 'radio',\n          selectedRow: selectedId,\n          setSelectedRow: setSelectedPco,\n          isNotEditable: false,\n          showHeader: true,\n          selectable: true,\n          tableType: 'Users',\n        }}\n        totalNumber={totalNumber}\n        currentPage={currentPageLocal}\n        setPaginationData={setCurrentPageLocal}\n        tableData={pcoList}\n        columnData={pcoColumns}\n        isLoading={getPcoListLoading}\n        delete={(id: string) => onDeletePco(id)}\n        setEditModalOpen={(isOpen: boolean, data: any) => setEditModalOpen(isOpen, data)}\n      />\n      <PcoAddModal\n        minifiedVersion={false}\n        visible={addModalVisible}\n        setAddModalVisibility={setAddModalVisibility}\n        editRecord={editRecord}\n        setEditRecord={setEditRecord}\n        addPCOCall={addPCOCall}\n        updatePCOCall={updatePCOCall}\n        addPcoLoading={addPcoLoading}\n        updatePcoLoading={updatePcoLoading}\n        getPcoListCall={getPcoListCall}\n        userCountryCode={userCountryCode}\n        setSearchKey={setSearchKey}\n        setSearchKeyFinal={setSearchKeyFinal}\n        setSelectedPco={setSelectedPco}\n        uploadImageCall={uploadImageCall}\n        deleteImageCall={deleteImageCall}\n        selectedPcoId={selectedId}\n        getPcoFilter={{\n          length: pageLength,\n          page: currentPageLocal,\n          isDeleted: false,\n          entityType: tableFilter,\n          searchText: '',\n        }}\n        handleCancel={() => {\n          setAddModalVisibility(false);\n          setEditRecord(null);\n        }}\n      />\n    </div>\n  );\n};\n","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/dashboard/Dashboard.tsx",["505","506","507"],"import { useEffect, useRef, FC } from 'react';\nimport { useNavigate } from 'react-router-dom';\n// eslint-disable-next-line no-unused-vars\nimport Title from 'antd/lib/typography/Title';\nimport {\n  // eslint-disable-next-line no-unused-vars\n  Row, Col, Button,\n} from 'antd';\nimport { LoadingOutlined } from '@ant-design/icons';\nimport { DashboardProps } from './Dashboard.types';\nimport Card from './components/Card';\nimport './Dashboard.less';\nimport {\n  animalIcon, calendarIcon, customizationIcon, thankYouIcon, userIcon, vaccineIcon,\n} from '../../assets/images';\n\nconst cssPrefix = 'ftr-dashboard';\n\nexport const Dashboard: FC<DashboardProps> = (newDashboardProps) => {\n  // eslint-disable-next-line no-unused-vars\n  const { getCountLoading, counts, getCountCall } = newDashboardProps;\n  const navigate = useNavigate();\n  const titleRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    getCountCall({}, () => {\n      console.log('fetching count');\n    });\n    titleRef.current?.scrollIntoView();\n  }, [titleRef]);\n\n  const cardData = [\n    {\n      imageUrl: animalIcon,\n      title: 'Animals',\n      url: '/animals',\n      description: (<div>\n        {getCountLoading ? <LoadingOutlined style={{ marginRight: '4px' }} spin /> : `${counts?.animalCount?.residentAnimalCount || 0} `}\n        Current Residents\n        <br />\n        {getCountLoading ? <LoadingOutlined style={{ marginRight: '4px' }} spin /> : `${counts?.animalCount?.formarAnimalCount || 0} `}\n        Former Residents\n      </div>),\n    },\n    {\n      imageUrl: userIcon,\n      title: (<div>\n        People, Companies,\n        <br />\n        and Organizations\n      </div>),\n      url: '/pco',\n      description: (<div>\n        {getCountLoading ? <LoadingOutlined style={{ marginRight: '4px' }} spin /> : `${counts?.pcoCount?.personCount || 0} `}\n        People\n        <br />\n        {getCountLoading ? <LoadingOutlined style={{ marginRight: '4px' }} spin /> : `${counts?.pcoCount?.organizationCount || 0} `}\n        Companies and Organizations\n      </div>),\n    },\n    {\n      imageUrl: customizationIcon,\n      title: 'Customization',\n      url: '/customization',\n      description: 'Customize all settings',\n    },\n    {\n      imageUrl: vaccineIcon,\n      title: (<div>\n        Vaccination and Procedure\n        <br />\n        Reminders\n      </div>),\n      url: '',\n      description: (<div>\n        43 Vaccination Reminders\n        <br />\n        5 Procedure Reminders\n      </div>),\n    },\n    {\n      imageUrl: calendarIcon,\n      title: 'Med Reminders',\n      url: '',\n      description: (<div>\n        10 – Today’s Med Reminders\n      </div>),\n    },\n    {\n      imageUrl: thankYouIcon,\n      title: 'Thank You Reminders',\n      url: '',\n      description: (<div>\n        16 Pending Thank Yous\n      </div>),\n    },\n  ];\n\n  const pageHeader = (\n    <div className={`${cssPrefix}__header-row`}>\n      <Title level={3} style={{ marginTop: '16px' }}>\n        Dashboard\n      </Title>\n    </div>\n  );\n\n  return (\n    <div className={`${cssPrefix}`} ref={titleRef}>\n      {pageHeader}\n      <Row justify=\"space-around\" gutter={[16, 16]}>\n        {\n          cardData.map((data) => (\n            <Col span={8} xs={24} xl={8} onClick={() => navigate(data.url)}>\n              <Card image={data.imageUrl} title={data.title} description={data.description} />\n            </Col>\n          ))\n        }\n      </Row>\n      {/* <Row justify=\"space-around\" gutter={[6, 6]}>\n        {\n          cardDataTop?.map((data) => (\n            <Col span={8} xs={24} xl={8} onClick={() => navigate(data.url)}>\n              <Card image={data.imageUrl} title={data.title} description={data.description} />\n            </Col>\n          ))\n        }\n        {\n          cardDataBottom?.map((data) => (\n            <Col span={8} xs={24} xl={8} onClick={() => navigate(data.url)}>\n              <Card image={data.imageUrl} title={data.title} description={data.description} />\n            </Col>\n          ))\n        }\n      </Row>\n      {/* <br />\n      <br />\n      <Row justify=\"space-around\" gutter={[6, 6]}>\n        {\n          cardDataBottom.map((data) => (\n            <Col onClick={() => navigate(data.url)}>\n              <Card image={data.imageUrl} title={data.title} description={data.description} />\n            </Col>\n          ))\n        }\n      </Row> */}\n      {/* <Row justify=\"center\">\n        <Col lg={12} xs={24}>\n          <Row justify=\"center\">\n            <Button className={`${cssPrefix}__button`} type=\"primary\">Search, Quiereis &amp; Reports</Button>\n          </Row>\n        </Col>\n        <Col lg={12} xs={24}>\n          <Row justify=\"center\">\n            <Button className={`${cssPrefix}__button`} type=\"primary\">Utilities</Button>\n          </Row>\n        </Col>\n      </Row> */}\n    </div>\n  );\n};\n","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/login/Login.tsx",[],"/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/signup/Signup.tsx",["508","509","510"],"/* eslint-disable jsx-a11y/no-static-element-interactions */\n/* eslint-disable jsx-a11y/click-events-have-key-events */\nimport {\n  useEffect, useState, useRef, FC,\n} from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Title from 'antd/lib/typography/Title';\nimport { kebabCase } from 'lodash';\nimport {\n  Form,\n  Input,\n  Button,\n  Tooltip,\n  Typography,\n  Select,\n  message,\n  // Col,\n  // Row,\n} from 'antd';\nimport NumberFormat from 'react-number-format';\nimport { InfoCircleOutlined } from '@ant-design/icons';\nimport ButtonLoader from '../../shared/components/ButtonLoader';\nimport { WebsiteValidationTooltip, PhoneValidationTooltip } from '../../shared/constants/tooltips.data';\nimport { SignupProps } from './Signup.types';\n\nimport { apiCall } from '../../shared/api/apiWrapper';\nimport { passwordRegex } from '../../shared/validationRegex';\nimport './Signup.less';\nimport { tyrLogoSrc } from '../../assets/images';\n\nconst cssPrefix = 'ftr-signup';\n\ninterface CountryNameInterface {\n  id: string;\n  countryName: string;\n}\n\n// eslint-disable-next-line\nexport const Signup: FC<SignupProps> = (newSignupProps) => {\n  const { signupLoading } = newSignupProps;\n  const newCountryNameInterface: CountryNameInterface[] = [];\n  const [countryCodePhone, setCountryCodePhone] = useState('1');\n  // eslint-disable-next-line no-unused-vars\n  const [countryCodePhone2, setCountryCodePhone2] = useState('1');\n  const [countryName, setCountryName] = useState(newCountryNameInterface);\n  // eslint-disable-next-line no-unused-vars\n  const [selectCountry, setSelectCountry] = useState('');\n  const [mobileView, setMobileView] = useState(window.innerWidth);\n  const handleWindowResize = () => {\n    setMobileView(window.innerWidth);\n  };\n\n  useEffect(() => {\n    window.addEventListener('resize', handleWindowResize);\n    return () => {\n      window.removeEventListener('resize', handleWindowResize);\n    };\n  }, []);\n\n  useEffect(() => {\n    const data = {};\n    apiCall('country/get-country', 'GET', data)\n      .then((resp: any) => {\n        if (resp?.data?.success) {\n          setCountryName(resp?.data?.data?.countries);\n        }\n      });\n  }, []);\n\n  // eslint-disable-next-line no-unused-vars\n  const navigate = useNavigate();\n  const { Option } = Select;\n  const [form] = Form.useForm();\n  const titleRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    titleRef.current?.scrollIntoView();\n  }, [titleRef]);\n\n  // eslint-disable-next-line no-unused-vars\n  const onFinish = (values: any) => {\n    const {\n      alternateEmailAddress,\n      city,\n      countryId = selectCountry,\n      email,\n      firstName,\n      lastName,\n      name,\n      password,\n      phone,\n      emailAddressPerson,\n      phoneNumber,\n      state,\n      street,\n      tenantAcronym,\n      username,\n      Website,\n      zip,\n    } = form.getFieldsValue();\n\n    // eslint-disable-next-line no-unused-vars\n    const formData = {\n      username,\n      email,\n      alternateEmailAddress,\n      password,\n      firstName,\n      lastName,\n      phoneNumber,\n      status: sessionStorage.getItem('signup-type'),\n      tenantVm: {\n        name,\n        tenantAcronym,\n        street,\n        city,\n        state,\n        zip,\n        countryId,\n        phone,\n        emailAddress: emailAddressPerson,\n        website: Website,\n        mailList: true,\n      },\n    };\n    console.log(formData, 'selectCountry');\n    localStorage.setItem('countryId', formData.tenantVm.countryId);\n    newSignupProps.signUpCall(formData, () => {\n      navigate('/login');\n    });\n  };\n\n  const onChangeDropDown = (e: any) => {\n    setSelectCountry(e);\n  };\n\n  // eslint-disable-next-line no-unused-vars\n  const onFinishFailed = (errorInfo: any) => {\n    message.error('Please correct highlighted fields', 1.5);\n  };\n\n  // eslint-disable-next-line\n  const pageHeader = (\n    <div className={`${cssPrefix}__header-row`}>\n      <Title level={3} style={{ margin: '16px 0' }}>\n        Signup\n      </Title>\n    </div>\n  );\n\n  const onChangeCountry = (value: any) => {\n    setCountryCodePhone(value);\n  };\n\n  // eslint-disable-next-line no-unused-vars\n  const prefixSelector = (\n    <Select\n      value={countryCodePhone}\n      style={{ width: 70 }}\n      showSearch\n      placeholder=\"Select a country\"\n      optionFilterProp=\"children\"\n      onChange={onChangeCountry}\n      filterOption={(input, option) => option?.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n    >\n      <Option value=\"1\">US</Option>\n      <Option value=\"91\">IN</Option>\n      <Option value=\"44\">UK</Option>\n    </Select>\n  );\n\n  const isMobile = mobileView > 600;\n\n  const signupForm = (\n    <Form\n      className={`${cssPrefix}__form`}\n      name=\"basic\"\n      labelCol={{ span: 8 }}\n      wrapperCol={{ span: 8 }}\n      initialValues={{ remember: true }}\n      form={form}\n      onFinish={onFinish}\n      onFinishFailed={onFinishFailed}\n      autoComplete=\"on\"\n    >\n      <img className={`${cssPrefix}__form__img`} style={{ width: '13vh' }} src={tyrLogoSrc} alt=\"toyourrescue.com\" />\n      <hr className={`${cssPrefix}__form__hr`} />\n      <Title className={`${cssPrefix}__form__header`} level={5}>Your Rescue Information</Title>\n      <Form.Item\n        label=\"Rescue Name\"\n        name=\"name\"\n        rules={[{ required: true, message: 'Rescue Name is required' }]}\n      >\n        <Input placeholder=\"Your rescue name\" />\n      </Form.Item>\n      <Form.Item\n        label=\"Rescue Acronym\"\n        name=\"tenantAcronym\"\n        rules={[{ required: true, message: 'Rescue Acronym is required' }]}\n      >\n        <Input placeholder=\"Your rescue acronym\" />\n      </Form.Item>\n      <Form.Item\n        label=\"Street\"\n        name=\"street\"\n        rules={[{ required: true, message: 'Street Name is required' }]}\n      >\n        <Input placeholder=\"Street\" />\n      </Form.Item>\n      <Form.Item\n        label=\"City or Township\"\n        name=\"city\"\n        rules={[{ required: true, message: 'City or Township Name is required' }]}\n      >\n        <Input placeholder=\"City or Township Name\" />\n      </Form.Item>\n      <Form.Item\n        label=\"State or Locality Code\"\n        name=\"state\"\n        rules={[\n          { required: true, message: 'State or Locality Code is required' },\n          {\n            pattern: /^.{1,2}$/,\n            message: 'State must not be more than two characters',\n          },\n        ]}\n      >\n        <Input placeholder=\"State or Locality Code\" />\n      </Form.Item>\n      {/* <Form.Item\n        label=\"Country Code\"\n        name=\"countryCode\"\n        rules={[{ required: true }, { pattern: /^[a-zA-Z]{1,3}$/, message: 'Max 3 letters are required' }]}\n      >\n        <Input placeholder=\"Country\" />\n      </Form.Item> */}\n      <Form.Item\n        label=\"Country\"\n        name=\"countryId\"\n        rules={[{ required: true, message: 'Country name is required' }]}\n      >\n        <Select\n          onChange={onChangeDropDown}\n          showSearch\n          filterOption={(input, option) => option?.children.toLowerCase().startsWith(input.toLowerCase())}\n        >\n          {countryName?.map((data) => (\n            <Option key={kebabCase(data.id)} value={data?.id}>{data?.countryName}</Option>\n          ))}\n        </Select>\n      </Form.Item>\n      <Form.Item\n        label=\"Zip/Postal Code\"\n        name=\"zip\"\n      // rules={[{ required: true, message: 'Zip is required' }, { pattern: /^\\d{5}[-\\s]?(?:\\d{4})?$/, message: 'Please enter valid zip' }]}\n      >\n        <Input placeholder=\"Zip/Postal Code\" />\n      </Form.Item>\n      <Form.Item\n        name=\"phoneNumber\"\n        label=\"Phone\"\n        rules={[\n          {\n            pattern: /^(\\+\\d{1,2}\\s)?\\(?\\d{3}\\)?[\\s.-]\\d{3}[\\s.-]\\d{4}$/,\n            message: 'Please enter valid 10 digit number',\n          },\n        ]}\n      >\n        <div className={`${cssPrefix}__form__inline`}>\n          <NumberFormat\n            customInput={Input}\n            addonBefore={prefixSelector}\n            key=\"phone\"\n            placeholder=\"Enter Phone\"\n            format={`+${countryCodePhone} (###) ###-####`}\n          />\n          <Tooltip overlayClassName={`${cssPrefix}__form__tooltip`} placement=\"bottom\" title={PhoneValidationTooltip}>\n            <Typography.Link><InfoCircleOutlined /></Typography.Link>\n          </Tooltip>\n        </div>\n      </Form.Item>\n      <Form.Item\n        label=\"Email Address\"\n        name=\"emailAddressPerson\"\n        rules={[{ type: 'email', message: 'Invalid Email Address' }]}\n      >\n        <Input placeholder=\"Email Address\" />\n      </Form.Item>\n      <Form.Item\n        label=\"Website\"\n        name={['Website']}\n        rules={[{\n          pattern: /^(https?:\\/\\/)?((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|((\\d{1,3}\\.){3}\\d{1,3}))(:\\d+)?(\\/[-a-z\\d%_.~+]*)*(\\?[;&a-z\\d%_.~+=-]*)?(#[-a-z\\d_]*)?$/i,\n          message: 'Please enter valid URL',\n        }]}\n      >\n        <div className={`${cssPrefix}__form__inline`}>\n          <Input name=\"website\" className={`${cssPrefix}__form__input`} placeholder=\"Website\" />\n          <Tooltip overlayClassName={`${cssPrefix}__form__tooltip`} placement=\"right\" title={WebsiteValidationTooltip}>\n            <Typography.Link><InfoCircleOutlined /></Typography.Link>\n          </Tooltip>\n        </div>\n      </Form.Item>\n\n      <hr className={`${cssPrefix}__form__hr`} />\n      <Title className={`${cssPrefix}__form__header`} level={5}>Your Information</Title>\n      <Form.Item\n        label=\"First Name\"\n        name=\"firstName\"\n        rules={[{ required: true, type: 'string', message: 'First Name is required' }]}\n      >\n        <Input placeholder=\"First Name\" />\n      </Form.Item>\n      <Form.Item\n        label=\"Last Name\"\n        name=\"lastName\"\n        rules={[{ required: true, type: 'string', message: 'Last Name is required' }]}\n      >\n        <Input placeholder=\"Last Name\" />\n      </Form.Item>\n      <Form.Item\n        label=\"User ID\"\n        name=\"username\"\n        rules={[{ required: true, message: 'User Id is required' }]}\n      >\n        <Input placeholder=\"User ID\" />\n      </Form.Item>\n      <Form.Item\n        label=\"Password\"\n        name=\"password\"\n        hasFeedback\n        rules={[\n          {\n            required: true,\n            message: 'Password is required',\n          },\n          {\n            pattern: passwordRegex,\n            message: 'Minimum eight characters, at least one uppercase and one lowercase letter, one number and one special character',\n          },\n        ]}\n      >\n        <Input.Password autoComplete=\"new-password\" />\n      </Form.Item>\n      <Form.Item\n        label=\"Password Confirmation\"\n        name=\"confirmPassword\"\n        dependencies={['password']}\n        hasFeedback\n        rules={[\n          { required: true, message: 'Confirm Password is required' },\n          ({ getFieldValue }) => ({\n            validator(_, value) {\n              if (!value || getFieldValue('password') === value) {\n                return Promise.resolve();\n              }\n              return Promise.reject(new Error('Password mismatch'));\n            },\n          }),\n        ]}\n      >\n        <Input.Password />\n      </Form.Item>\n      <Form.Item\n        name=\"phone\"\n        label=\"Phone\"\n        rules={[\n          {\n            required: true,\n            message: 'Phone is required',\n          },\n          {\n            pattern: /^(\\+\\d{1,2}\\s)?\\(?\\d{3}\\)?[\\s.-]\\d{3}[\\s.-]\\d{4}$/,\n            message: 'Please enter valid 10 digit number',\n          },\n        ]}\n      >\n        <div className={`${cssPrefix}__form__inline`}>\n          <NumberFormat\n            customInput={Input}\n            addonBefore={prefixSelector}\n            key=\"phone\"\n            placeholder=\"Enter Phone\"\n            format={`+${countryCodePhone} (###) ###-####`}\n          />\n        </div>\n      </Form.Item>\n      <Form.Item\n        label=\"Email Address\"\n        name=\"email\"\n        rules={[{ required: true, message: 'Email Address is required' }, { type: 'email', message: 'Email is not a valid email' }]}\n      >\n        <Input placeholder=\"Your Email Address\" />\n      </Form.Item>\n      <Form.Item\n        label=\"Alternate Email Address\"\n        name=\"alternateEmailAddress\"\n        rules={[\n          { type: 'email', message: 'Email is not a valid email' },\n          ({ getFieldValue }) => ({\n            validator(_, value) {\n              if (!value || getFieldValue('email') !== value) {\n                return Promise.resolve();\n              }\n              return Promise.reject(new Error('Alternate Email should not be same as Email Address'));\n            },\n          }),\n        ]}\n      >\n        <Input placeholder=\"Alternate Email Address\" />\n      </Form.Item>\n      {\n        isMobile\n        && (\n          <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\n            <Button className={`${cssPrefix}__form__submit`} type=\"primary\" htmlType=\"submit\">\n              Submit\n              {signupLoading && <ButtonLoader />}\n            </Button>\n            <div className={`${cssPrefix}__form__signin-instead`}>\n              <span>Already have an account? </span>\n              <span\n                style={{\n                  textDecoration: 'underline',\n                  color: 'blue',\n                  textDecorationColor: 'blue',\n                  cursor: 'pointer',\n                }}\n                onClick={() => navigate('/login')}\n              >\n                Sign in instead\n              </span>\n            </div>\n            {/* <img className={`${cssPrefix}__form__img`} src={tyrAnimalImgSrc} alt=\"toyourrescue.com\" /> */}\n          </Form.Item>\n        )\n      }\n      {\n        !isMobile\n        && (\n          <Form.Item>\n            <Button className={`${cssPrefix}__form__submit`} type=\"primary\" htmlType=\"submit\">\n              Submit\n              {signupLoading && <ButtonLoader />}\n            </Button>\n            <div className={`${cssPrefix}__form__signin-instead`}>\n              <span>Already have an account? </span>\n              <span\n                style={{\n                  textDecoration: 'underline',\n                  color: 'blue',\n                  textDecorationColor: 'blue',\n                  cursor: 'pointer',\n                }}\n                onClick={() => navigate('/login')}\n              >\n                Sign in instead\n              </span>\n            </div>\n            {/* <img className={`${cssPrefix}__form__img`} src={tyrAnimalImgSrc} alt=\"toyourrescue.com\" /> */}\n          </Form.Item>\n        )\n      }\n    </Form>\n  );\n\n  return (\n    <div className={`${cssPrefix}`} ref={titleRef}>\n      {/* {pageHeader} */}\n      {signupForm}\n    </div>\n  );\n};\n","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/invite/Invite.tsx",["511","512","513","514"],"/* eslint-disable no-template-curly-in-string */\nimport {\n  useEffect, useRef, useState, FC,\n} from 'react';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\nimport {\n  Button, Input, Form, Row,\n} from 'antd';\nimport { passwordRegex } from '../../shared/validationRegex';\nimport { InviteProps } from './Invite.types';\nimport './Invite.less';\n\nconst cssPrefix = 'ftr-invite';\n\n// eslint-disable-next-line no-unused-vars\nexport const Invite: FC<InviteProps> = (newInviteProps) => {\n  const {\n    getUserDetailByToken, tempUserDetail, updatePasswordInvite, getUserDetailByTokenLoading,\n  } = newInviteProps;\n  const navigate = useNavigate();\n  // eslint-disable-next-line no-unused-vars\n  const [userForm, setUserForm] = useState<any>({\n    name: '',\n    email: '',\n    userName: '',\n    phoneNumber: '',\n  });\n\n  // eslint-disable-next-line no-unused-vars\n  const [newKey, setNewKey] = useState(Date.now());\n  const titleRef = useRef<HTMLInputElement>(null);\n  const [form] = Form.useForm();\n  // eslint-disable-next-line no-unused-vars\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [verificationMessage, setVerificationMessage] = useState<any>('');\n  const [firstError, setFirstError] = useState<any>('');\n\n  useEffect(() => {\n    titleRef.current?.scrollIntoView();\n  }, [titleRef]);\n\n  const validateMessages = {\n    required: '${label} is required',\n    types: {\n      email: '${label} is not a valid email',\n      number: '${label} is not a valid number',\n    },\n    number: {\n      range: '${label} must be between ${min} and ${max}',\n    },\n  };\n\n  const callbackAfterPasswordUpdate = () => {\n    navigate('/login');\n  };\n\n  const handleOk = async () => {\n    updatePasswordInvite({ ...userForm, token: searchParams.get('token') }, () => { callbackAfterPasswordUpdate(); });\n  };\n\n  const callbackAfterGettingDetail = (message: string) => {\n    setVerificationMessage(message);\n  };\n\n  const handleInput = (e: any) => {\n    console.log({ [e.target.name]: e.target.value });\n    form.setFieldsValue({ [e.target.name]: e.target.value });\n    setUserForm({ ...userForm, [e.target.name]: e.target.value });\n  };\n\n  useEffect(() => {\n    if (!tempUserDetail) {\n      return;\n    }\n    const {\n      id, firstName, lastName, email,\n    } = tempUserDetail;\n    setUserForm({\n      id,\n      firstName,\n      lastName,\n      email,\n    });\n  }, [tempUserDetail]);\n\n  useEffect(() => {\n    const token = searchParams.get('token');\n    const email = searchParams.get('email');\n    getUserDetailByToken({ token, email }, (message: any) => callbackAfterGettingDetail(message));\n    setFirstError('firstName');\n  }, []);\n\n  return (\n    <div className={`${cssPrefix}`} ref={titleRef}>\n      {(!getUserDetailByTokenLoading && !tempUserDetail)\n        ? (<Row justify=\"center\"><p style={{ color: 'red' }}>{verificationMessage || 'Link Expired'}</p></Row>)\n        : (\n          <Row justify=\"center\">\n            <Form style={{ width: '600px', color: 'red' }} labelCol={{ span: 7 }} wrapperCol={{ span: 30 }} key={newKey} onFinish={handleOk} form={form} validateMessages={validateMessages}>\n              <Form.Item\n                label=\"First Name\"\n                required\n              >\n                <Input\n                  onClick={() => setFirstError('')}\n                  ref={(ref) => (firstError === 'firstName') && ref && ref.focus()}\n                  onChange={(e) => handleInput(e)}\n                  value={userForm.firstName}\n                  name=\"firstName\"\n                />\n              </Form.Item>\n              <Form.Item\n                label=\"Last Name\"\n                required\n              >\n                <Input\n                  onClick={() => setFirstError('')}\n                  onChange={(e) => handleInput(e)}\n                  value={userForm.lastName}\n                  name=\"lastName\"\n                />\n              </Form.Item>\n              {/* <Form.Item\n                label=\"Phone\"\n                required\n              >\n                <Input\n                  onChange={(e) => handleInput(e)}\n                  value={userForm.phoneNumber}\n                  name=\"phoneNumber\"\n                />\n              </Form.Item> */}\n              <Form.Item\n                label=\"Email\"\n                required\n              >\n                <Input\n                  onClick={() => setFirstError('')}\n                  value={userForm.email}\n                  name=\"email\"\n                  disabled\n                />\n              </Form.Item>\n              <Form.Item\n                label=\"User Name\"\n                required\n              >\n                <Input\n                  onClick={() => setFirstError('')}\n                  onChange={(e) => handleInput(e)}\n                  value={userForm.userName}\n                  name=\"userName\"\n                />\n              </Form.Item>\n              <Form.Item\n                label=\"Password\"\n                name=\"password\"\n                hasFeedback\n                rules={[\n                  {\n                    required: true,\n                    message: 'Password is required',\n                  },\n                  {\n                    pattern: passwordRegex,\n                    message: 'Minimum eight characters, at least one uppercase and one lowercase letter, one number and one special character',\n                  },\n                ]}\n              >\n                <Input.Password onClick={() => setFirstError('')} name=\"password\" onChange={(e) => handleInput(e)} />\n              </Form.Item>\n              <Form.Item\n                label=\"Password Confirmation\"\n                name=\"confirmPassword\"\n                dependencies={['password']}\n                hasFeedback\n                rules={[\n                  { required: true, message: 'Confirm Password is required' },\n                  ({ getFieldValue }) => ({\n                    validator(_, value) {\n                      if (!value || getFieldValue('password') === value) {\n                        return Promise.resolve();\n                      }\n                      return Promise.reject(new Error('Password mismatch'));\n                    },\n                  }),\n                ]}\n              >\n                <Input.Password onClick={() => setFirstError('')} autoComplete=\"new-password\" />\n              </Form.Item>\n              <Row justify=\"center\" style={{ marginBottom: '10px', alignItems: 'center' }}>\n                <Button type=\"primary\" htmlType=\"submit\">\n                  Update\n                </Button>\n              </Row>\n            </Form>\n          </Row>\n        )}\n    </div>\n  );\n};\n","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/landing/LandingPage.tsx",[],"/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/animals/milestones/AnimalMilestone.tsx",["515","516","517","518","519","520","521","522","523","524"],"/* eslint-disable no-unused-vars */\nimport {\n  message, Modal, Select, Button, Typography, Row, Col, Image,\n} from 'antd';\nimport moment from 'moment';\nimport {\n  FlagFilled, PlusOutlined,\n} from '@ant-design/icons';\nimport { useEffect, useState } from 'react';\nimport { pageLength } from '../../../shared/constants/pagination.json';\nimport CustomTablePagination from '../../../shared/components/CustomTablePagination';\nimport { MilestoneAddEditForm } from './MilestoneAddEditForm';\nimport { apiCall } from '../../../shared/api/apiWrapper';\nimport './Milestone.less';\n\ninterface AnimalMilestoneProps {\n  getAnimalMilestoneListCall: any;\n  updateAnimalMilestoneListCall: any;\n  animalMilestoneList: any;\n  getAnimalMilestoneListLoading: boolean;\n  selectedAnimalId: any;\n  setSelectedPco: any;\n  animalList: any;\n  selectedPcoId: any;\n  updateAnimalMilestoneLoading: boolean;\n}\n\nconst { Title } = Typography;\nconst { Option } = Select;\nconst { confirm } = Modal;\n\nconst cssPrefix = 'milestone';\n\n// eslint-disable-next-line\nexport const AnimalMilestone = (props: AnimalMilestoneProps) => {\n  const {\n    getAnimalMilestoneListCall, updateAnimalMilestoneListCall, animalMilestoneList, selectedAnimalId, animalList,\n    setSelectedPco, selectedPcoId, updateAnimalMilestoneLoading,\n  } = props;\n  const [currentPageLocal, setCurrentPageLocal] = useState(1);\n  const [editRecord, setEditRecord] = useState(null);\n  const [addModalVisible, setAddModalVisible] = useState(false);\n  const [animalDetails, setAnimalDetail] = useState<any>({});\n  const [imageUrl, setImageUrl] = useState<any>();\n\n  // eslint-disable-next-line no-unused-vars\n  // const onDeleteAnimal = (id: string): void => {\n  //   deleteAnimalCall({ id }, () => {\n  //     getAnimalListCall({\n  //       length: pageLength,\n  //       page: currentPageLocal,\n  //       isDeleted: false,\n  //       isAvailable: tableFilter,\n  //       searchText: searchKey,\n  //     }, () => console.log('get list of pco'));\n  //   });\n  // };\n\n  // const getAnimalMilestoneById = (animalId: any) => {\n  //   setAnimalDataForDelete('');\n  //   apiCall(`animal/get-animal-milestone/${animalId}`, 'GET', {})\n  //     .then((resp: any) => {\n  //       if (resp.status === 200) {\n  //         setAnimalDataForDelete(resp?.data?.data);\n  //       }\n  //     });\n  // };\n\n  useEffect(() => {\n    if (selectedAnimalId?.[0]) {\n      localStorage.setItem('selectedAnimalId', selectedAnimalId?.[0]);\n    } else {\n      let animalDetailsJson: any = localStorage.getItem('animalDetails');\n      if (animalDetailsJson) {\n        animalDetailsJson = JSON.parse(animalDetailsJson);\n        setAnimalDetail(animalDetailsJson);\n      }\n    }\n    getAnimalMilestoneListCall({\n      animalId: selectedAnimalId?.[0] || localStorage.getItem('selectedAnimalId'),\n      length: pageLength,\n      page: currentPageLocal,\n    }, () => {\n      console.log('ddd');\n    });\n\n    apiCall(`artifact-attachment/get-artifactattachment-byanimal/${selectedAnimalId?.[0]}`, 'GET', {})\n      .then((resp: any) => {\n        console.log();\n        setImageUrl(resp?.data?.data?.artifactAttachment?.blobUrl);\n      });\n  }, []);\n\n  useEffect(() => {\n    animalList?.forEach((data: any) => {\n      if (data?.id === selectedAnimalId?.[0]) {\n        localStorage.setItem('animalDetails', JSON.stringify(data));\n        setAnimalDetail(data);\n      }\n    });\n  }, [selectedAnimalId]);\n\n  const setEditModalOpen = (value: boolean, data: any) => {\n    setEditRecord(data);\n    setAddModalVisible(value);\n  };\n\n  return (\n    <div className={`${cssPrefix}`}>\n      <Row align=\"bottom\" justify=\"space-between\">\n        <Col>\n          <Row>\n            <Col>\n              <Image\n                preview={false}\n                src={imageUrl}\n                className=\"\"\n                style={{\n                  objectFit: 'contain',\n                  border: '1px dashed #8F8F8F',\n                  maxWidth: 100,\n                  maxHeight: 100,\n                }}\n              />\n            </Col>\n            <Col style={{ marginLeft: '10px' }}>\n              <Title style={{ margin: '4px' }} level={3}>{`${animalDetails?.animalName} - ID NO: ${animalDetails?.animalId}`}</Title>\n              <Title style={{ margin: '4px' }} level={5}>{`${animalDetails?.breed}, ${animalDetails?.color}`}</Title>\n              <Title style={{ margin: '4px' }} level={5}>{`${animalDetails?.sex} - ${(animalMilestoneList?.[0]?.isApproxDOB) ? 'Approx ' : 'Actual '}Birth Date: ${moment(animalMilestoneList?.[0]?.milestoneDate).format('MMM DD YYYY')}`}</Title>\n            </Col>\n          </Row>\n        </Col>\n        <Col>\n          <Button\n            className={`${cssPrefix}__button`}\n            style={{ margin: '6px' }}\n            type=\"dashed\"\n            onClick={() => alert('addd clicked')}\n            icon={<PlusOutlined />}\n          >\n            Add\n          </Button>\n        </Col>\n      </Row>\n      <CustomTablePagination\n        config={{\n          selectable: false,\n          isNotEditableBlur: true,\n          showHeader: true,\n          tableType: 'AnimalMilestone',\n        }}\n        totalNumber={4}\n        currentPage={currentPageLocal}\n        setPaginationData={setCurrentPageLocal}\n        tableData={animalMilestoneList}\n        columnData={[\n          {\n            title: 'Milestone Date',\n            dataIndex: 'milestoneDate',\n            render: (data: any) => (data ? moment(data).format('MMM DD YYYY') : ''),\n          },\n          {\n            title: 'Milestone',\n            dataIndex: 'milestoneType',\n          },\n          {\n            title: 'First Name',\n            dataIndex: ['pco', 'firstName'],\n          },\n          {\n            title: 'Last Name',\n            dataIndex: ['pco', 'lastName'],\n          },\n          {\n            title: 'Notes',\n            dataIndex: 'notes',\n          },\n        ]}\n        isLoading={false}\n        delete={(id: string) => alert('delete')}\n        setEditModalOpen={(isOpen: boolean, data: any) => setEditModalOpen(isOpen, data)}\n      />\n      <MilestoneAddEditForm\n        animalDetail={animalDetails}\n        editRecord={editRecord}\n        visible={addModalVisible}\n        setVisible={setAddModalVisible}\n        updateAnimalMilestoneListCall={updateAnimalMilestoneListCall}\n        animalMilestoneList={animalMilestoneList}\n        getAnimalMilestoneListCall={getAnimalMilestoneListCall}\n        setSelectedPco={setSelectedPco}\n        selectedPcoId={selectedPcoId}\n        selectedAnimalId={selectedAnimalId}\n        updateAnimalMilestoneLoading={updateAnimalMilestoneLoading}\n        animalMilestoneFilter={{\n          animalId: selectedAnimalId?.[0],\n          length: pageLength,\n          page: currentPageLocal,\n        }}\n      />\n    </div>\n  );\n};\n\nexport default AnimalMilestone;\n","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/admin_signup_confirm/ConfirmPage.tsx",["525","526"],"/* eslint-disable no-template-curly-in-string */\nimport {\n  useEffect, useRef, FC, useState,\n} from 'react';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\nimport {\n  Row, Col, Button,\n} from 'antd';\nimport { InviteProps } from './ConfirmPage.types';\nimport './ConfirmPage.less';\n\nconst cssPrefix = 'ftr-invite';\n\n// eslint-disable-next-line no-unused-vars\nexport const ConfirmPage: FC<InviteProps> = (newInviteProps) => {\n  const {\n    verifySignupByToken, verifySignupByTokenLoading,\n  } = newInviteProps;\n  const [errorMessage, setErrorMessage] = useState<any>('');\n  const navigate = useNavigate();\n\n  const titleRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-unused-vars\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  useEffect(() => {\n    titleRef.current?.scrollIntoView();\n  }, [titleRef]);\n\n  const callbackAfterGettingDetail = (currentMessage: string) => {\n    setErrorMessage(currentMessage);\n  };\n\n  useEffect(() => {\n    const token = searchParams.get('token');\n    const email = searchParams.get('email');\n    verifySignupByToken({ token, email }, (currentMessage: string) => { callbackAfterGettingDetail(currentMessage); });\n  }, []);\n\n  return (\n    <div className={`${cssPrefix}`} ref={titleRef}>\n      {verifySignupByTokenLoading && (<Row justify=\"center\"><p>Verifying Account ...</p></Row>)}\n      {(!verifySignupByTokenLoading && !errorMessage) && (\n        <div>\n          <Row justify=\"center\">\n            <Col className=\"text-muted\">Account Confirmed, Thank You !</Col>\n          </Row>\n          <br />\n          <Row justify=\"center\">\n            <Button onClick={() => navigate('/login')}>Back To Login</Button>\n          </Row>\n        </div>\n      )}\n      {(!verifySignupByTokenLoading && errorMessage) && (\n        <Row justify=\"center\" style={{ color: 'red' }}>\n          <Col className=\"text-muted\">{errorMessage || 'Verification Failed !'}</Col>\n        </Row>\n      )}\n    </div>\n  );\n};\n","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/forgot_password_username/ForgotUsernamePassword.tsx",["527","528","529"],"/* eslint-disable no-unused-vars */\n/* eslint-disable no-template-curly-in-string */\nimport {\n  useEffect, useRef, FC, useState,\n} from 'react';\nimport { useNavigate, useSearchParams, useLocation } from 'react-router-dom';\nimport {\n  Row, Col, Button, Form, Input,\n} from 'antd';\nimport ButtonLoader from '../../shared/components/ButtonLoader';\nimport { InviteProps } from './ForgotUsernamePassword.types';\nimport './ForgotUsernamePassword.less';\n\nconst cssPrefix = 'ftr-forgot';\n\n// eslint-disable-next-line no-unused-vars\nexport const ForgotUsernamePassword: FC<InviteProps> = (newInviteProps) => {\n  const {\n    forgotUsername,\n    forgotPassword,\n    forgotUsernameLoading,\n    forgotPasswordLoading,\n  } = newInviteProps;\n  const [form] = Form.useForm();\n  const [hideFormMessage, setHideFormMessage] = useState<any>(false);\n  const [pageType, setPageType] = useState<any>('');\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  const titleRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-unused-vars\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  useEffect(() => {\n    titleRef.current?.scrollIntoView();\n  }, [titleRef]);\n\n  useEffect(() => {\n    setPageType(location?.pathname?.split('-')[1]);\n  }, [location]);\n\n  const onFinish = () => {\n    const email = form.getFieldValue('emailAddress');\n    const username = form.getFieldValue('username');\n    if ((pageType === 'password')) {\n      forgotPassword({ email, username }, (messageData: string) => {\n        setHideFormMessage(messageData);\n      });\n    } else {\n      forgotUsername({ email }, (messageData: string) => {\n        setHideFormMessage(messageData);\n      });\n    }\n  };\n\n  return (\n    <div className={`${cssPrefix}`} ref={titleRef}>\n      <Form\n        className={`${cssPrefix}__form`}\n        name=\"basic\"\n        labelCol={{ span: 8 }}\n        wrapperCol={{ span: 8 }}\n        initialValues={{ remember: true }}\n        form={form}\n        onFinish={onFinish}\n        autoComplete=\"on\"\n      >\n        {hideFormMessage ? (\n          <div style={{ textAlign: 'center', marginTop: '100px' }}>{hideFormMessage}</div>\n        ) : (\n          <>\n            <Form.Item\n              label=\"Email Address\"\n              name=\"emailAddress\"\n              rules={[\n                { required: true, message: 'Email address is required' },\n                { type: 'email', message: 'Invalid Email Address' },\n              ]}\n            >\n              <Input placeholder=\"Email Address\" />\n            </Form.Item>\n            {(pageType === 'password') && (\n              <Form.Item\n                label=\"User Name\"\n                name=\"username\"\n                rules={[\n                  { required: true, message: 'User name is required' },\n                ]}\n              >\n                <Input placeholder=\"User Name\" />\n              </Form.Item>\n            )}\n            <Row justify=\"center\">\n              <Button className={`${cssPrefix}__form__submit`} type=\"primary\" htmlType=\"submit\">\n                Submit\n                {(forgotUsernameLoading || forgotPasswordLoading) && <ButtonLoader />}\n              </Button>\n            </Row>\n          </>\n        )}\n        <br />\n        <Row justify=\"center\">\n          <Button onClick={() => navigate('/login')} className={`${cssPrefix}__form__submit`}>\n            BACK TO LOGIN\n            {false && <ButtonLoader />}\n          </Button>\n        </Row>\n      </Form>\n    </div>\n  );\n};\n","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/ResetPassword/ResetPassword.tsx",["530","531"],"/* eslint-disable no-template-curly-in-string */\nimport {\n  useEffect, useRef, FC, useState,\n} from 'react';\nimport { useLocation, useSearchParams, useNavigate } from 'react-router-dom';\nimport {\n  Row, Button, Form, Input,\n} from 'antd';\nimport { passwordRegex } from '../../shared/validationRegex';\nimport ButtonLoader from '../../shared/components/ButtonLoader';\nimport './ResetPassword.less';\n\nconst cssPrefix = 'ftr-reset-password';\ninterface ResetPasswordProps {\n  resetPassword: any,\n  forgotPasswordLoading: boolean,\n}\n\n// eslint-disable-next-line no-unused-vars\nexport const ResetPassword: FC<ResetPasswordProps> = (props) => {\n  const { resetPassword, forgotPasswordLoading } = props;\n  const [form] = Form.useForm();\n  // eslint-disable-next-line no-unused-vars\n  const [pageType, setPageType] = useState<any>('');\n  const location = useLocation();\n  // eslint-disable-next-line no-unused-vars\n  const [searchParams, setSearchParams] = useSearchParams();\n  const navigate = useNavigate();\n\n  const titleRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    titleRef.current?.scrollIntoView();\n  }, [titleRef]);\n\n  useEffect(() => {\n    setPageType(location?.pathname?.split('-')[1]);\n  }, [location]);\n\n  const onFinish = () => {\n    const token = searchParams.get('token');\n    const email = searchParams.get('email');\n    const password = form.getFieldValue('password');\n    resetPassword({\n      token,\n      email,\n      password,\n    }, () => {\n      setInterval(() => {\n        navigate('/login');\n      }, 1000);\n    });\n  };\n\n  return (\n    <div className={`${cssPrefix}`} ref={titleRef}>\n      <Form\n        className={`${cssPrefix}__form`}\n        name=\"basic\"\n        labelCol={{ span: 8 }}\n        wrapperCol={{ span: 8 }}\n        initialValues={{ remember: true }}\n        form={form}\n        onFinish={onFinish}\n        autoComplete=\"on\"\n      >\n        <Form.Item\n          label=\"Password\"\n          name=\"password\"\n          hasFeedback\n          rules={[\n            {\n              required: true,\n              message: 'Password is required',\n            },\n            {\n              pattern: passwordRegex,\n              message: 'Minimum eight characters, at least one uppercase and one lowercase letter, one number and one special character',\n            },\n          ]}\n        >\n          <Input.Password autoComplete=\"new-password\" />\n        </Form.Item>\n        <Form.Item\n          label=\"Password Confirmation\"\n          name=\"confirmPassword\"\n          dependencies={['password']}\n          hasFeedback\n          rules={[\n            { required: true, message: 'Confirm Password is required' },\n            ({ getFieldValue }) => ({\n              validator(_, value) {\n                if (!value || getFieldValue('password') === value) {\n                  return Promise.resolve();\n                }\n                return Promise.reject(new Error('Password mismatch'));\n              },\n            }),\n          ]}\n        >\n          <Input.Password />\n        </Form.Item>\n        <Row justify=\"center\">\n          <Button className={`${cssPrefix}__form__submit`} type=\"primary\" htmlType=\"submit\">\n            Reset Password\n            {forgotPasswordLoading && <ButtonLoader />}\n          </Button>\n        </Row>\n        <br />\n      </Form>\n    </div>\n  );\n};\n","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/redux/pco/reducer.ts",[],"/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/redux/auth/reducer.ts",[],"/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/redux/animal/reducer.ts",[],"/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/redux/common/reducer.ts",[],"/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/redux/user/reducer.ts",[],"/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/redux/user/types.ts",[],"/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/redux/common/types.ts",[],"/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/redux/animal/types.ts",[],"/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/redux/pco/types.ts",[],"/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/redux/auth/types.ts",[],"/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/shared/validationRegex.ts",[],"/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/shared/components/CustomTablePagination.tsx",["532","533"],"/* eslint-disable no-unused-vars */\n/* eslint-disable jsx-a11y/no-static-element-interactions */\n/* eslint-disable jsx-a11y/click-events-have-key-events */\n/* eslint-disable no-console */\nimport { useState, FC, useEffect } from 'react';\nimport {\n  Table, Form, Typography, Modal, Row, Col, Collapse, Pagination,\n} from 'antd';\nimport {\n  EditOutlined, DeleteOutlined, ExclamationCircleOutlined, LoadingOutlined,\n} from '@ant-design/icons';\nimport { pageLength } from '../constants/pagination.json';\n\nconst { confirm } = Modal;\n\ninterface Item {\n\n}\n\ninterface Props {\n  config: any,\n  tableData: Item[];\n  columnData: any,\n  isLoading: boolean,\n  totalNumber: number,\n  currentPage: number,\n  setPaginationData: (pageNo: number) => void,\n  // eslint-disable-next-line no-unused-vars\n  delete: (id: string) => void;\n  // eslint-disable-next-line no-unused-vars\n  setEditModalOpen: (value: boolean, data: any) => void\n}\n\n// eslint-disable-next-line no-shadow\nconst CustomTablePagination: FC<Props> = (Props) => {\n  const {\n    tableData, columnData, isLoading, totalNumber, currentPage, setPaginationData, config,\n  } = Props;\n  const {\n    selectable, showHeader, isNotEditable, isNotDeletable, isNotEditableBlur, deleteConfirmationData, getDeleteConfirmationDetail,\n  } = config;\n  const [form] = Form.useForm();\n  const [data, setData] = useState(tableData);\n  const [currentRecord, setCurrentRecord] = useState({});\n  const [editingKey, setEditingKey] = useState('');\n  const { Panel } = Collapse;\n  const edit = (record: Item) => {\n    Props.setEditModalOpen(true, record);\n  };\n\n  useEffect(() => {\n    setData(tableData);\n    setCurrentRecord(tableData[0]);\n  }, [tableData]);\n\n  const setNextPage = () => {\n    if ((totalNumber / pageLength) === currentPage) {\n      return;\n    }\n    setPaginationData(currentPage + 1);\n  };\n\n  const setPreviousPage = () => {\n    if (currentPage === 1) {\n      return;\n    }\n    setPaginationData(currentPage - 1);\n  };\n\n  const cancel = () => {\n    setEditingKey('');\n  };\n\n  const itemRender = (current: any, type: any, originalElement: any) => {\n    if (type === 'prev') {\n      return <a style={{ marginRight: '10px' }} onClick={setPreviousPage}>Previous</a>;\n    } if (type === 'next') {\n      return <a onClick={setNextPage}>Next</a>;\n    }\n    return originalElement;\n  };\n\n  const deleteItem = async (deleteRecord: any) => {\n    Props.delete(deleteRecord?.id);\n  };\n\n  const showConfirmModal = async (record: any) => {\n    confirm({\n      title: 'Are you sure?',\n      icon: <ExclamationCircleOutlined />,\n      content: <span>\n        Are you sure you want to delete\n        <b>{` ${record[columnData[0]?.dataIndex] ? record[columnData[0]?.dataIndex] : ''}`}</b>\n        ?\n        {deleteConfirmationData && (deleteConfirmationData.milestoneRecords > 2) && (\n          <Row justify=\"center\" style={{ backgroundColor: '#e3e1dc' }}>\n            <Col span={12}>\n              <b>Milestone Records</b>\n            </Col>\n            <Col span={2}>-</Col>\n            <Col span={2}>\n              {deleteConfirmationData.milestoneRecords}\n            </Col>\n          </Row>\n        )}\n      </span>,\n      okText: 'Yes',\n      okType: 'danger',\n      cancelText: 'No',\n      onOk() {\n        deleteItem(record);\n      },\n      onCancel() {\n        console.log('Cancel');\n      },\n    });\n  };\n\n  useEffect(() => {\n    if (getDeleteConfirmationDetail && deleteConfirmationData) {\n      showConfirmModal(currentRecord);\n    }\n  }, [deleteConfirmationData]);\n\n  const columns = [\n    ...columnData,\n    {\n      title: 'Action',\n      dataIndex: 'operation',\n      width: isNotDeletable ? '5%' : '15%',\n      render: (_: any, record: any) => (\n        <Row justify=\"start\" style={{ display: 'inline-flex' }}>\n          <Typography.Link style={{ marginRight: '10px', marginLeft: '5px' }} disabled={record.isNotEditable || isNotEditable} onClick={() => edit(record)}>\n            <EditOutlined />\n          </Typography.Link>\n          {!isNotDeletable && (\n            <Typography.Link\n              disabled={record.isNotEditable || isNotEditableBlur}\n              onClick={() => {\n                setCurrentRecord(record);\n                getDeleteConfirmationDetail ? getDeleteConfirmationDetail(record.id) : showConfirmModal(record);\n              }}\n            >\n              <span style={{ marginLeft: '15px' }}><DeleteOutlined /></span>\n            </Typography.Link>\n          )}\n        </Row>\n      ),\n    },\n  ];\n\n  const rowSelectionSingle = selectable ? {\n    rowSelection: {\n      selectedRowKeys: [config?.selectedRow],\n      hideSelectAll: (config?.rowSelection === 'radio'),\n      onChange: (selectedRowKeys: React.Key[], selectedRows: any[]) => {\n        if (config?.selectedRow === selectedRows?.[0]?.id) {\n          config.setSelectedRow(selectedRows?.[1]?.id);\n        } else {\n          config.setSelectedRow(selectedRows?.[0]?.id);\n        }\n      },\n      getCheckboxProps: (record: any) => ({\n        disabled: record.name === 'Disabled User', // Column configuration not to be checked\n        name: record.name,\n        className: 'checkbox-thik-change',\n      }),\n    },\n  } : {};\n\n  const rowSelectionMultiple = selectable ? {\n    rowSelection: {\n      selectedRowKeys: config?.selectedRow,\n      type: 'checkbox',\n      onChange: (selectedRowKeys: React.Key[], selectedRows: any[]) => {\n        console.log(selectedRows, '-----------------', config?.selectedRow, '-----', selectedRowKeys);\n\n        if (config?.selectedRow === selectedRows?.[0]?.id) {\n          config.setSelectedRow(selectedRowKeys);\n        } else {\n          config.setSelectedRow(selectedRowKeys);\n        }\n      },\n      getCheckboxProps: (record: any) => ({\n        disabled: record.name === 'Disabled User', // Column configuration not to be checked\n        name: record.name,\n        className: 'checkbox-thik-change',\n      }),\n    },\n  } : {};\n\n  const rowSelectionData: any = (config?.rowSelection === 'radio') ? rowSelectionSingle : rowSelectionMultiple;\n\n  return (\n    <>\n      <div className=\"mobile-view\">\n        <Collapse accordion bordered>\n          {data?.map?.((currentData, i) => {\n            const keyTyped = columns[0]?.dataIndex as keyof typeof currentData;\n            return (\n              // eslint-disable-next-line react/no-array-index-key\n              <Panel style={{ backgroundColor: 'whitesmoke' }} header={columns[0]?.render?.(null, currentData) || currentData[keyTyped]} key={i}>\n                {columns.map((colData, j) => {\n                  const keyName = columns[j]?.dataIndex as keyof typeof currentData;\n                  return (\n                    <>\n                      {(j !== 0) && <hr className=\"hr-line\" />}\n                      <b>{colData.title}</b>\n                      {' : '}\n                      {colData?.render?.(null, currentData) || currentData[keyName]}\n                    </>\n                  );\n                })}\n              </Panel>\n            );\n          })}\n        </Collapse>\n        <Row justify=\"end\" style={{ marginTop: '10px' }}>\n          <Pagination itemRender={itemRender} showLessItems defaultCurrent={1} total={500} />\n        </Row>\n      </div>\n\n      <div className=\"desktop-view\">\n        <Form form={form} component={false}>\n          <Table\n            loading={{ indicator: <LoadingOutlined style={{ fontSize: 14 }} spin />, spinning: isLoading }}\n            style={{ borderTop: '#820014 1px solid' }}\n            dataSource={data}\n            columns={columns}\n            rowClassName=\"editable-row\"\n            rowKey=\"id\"\n            pagination={{\n              showSizeChanger: false,\n              onChange: cancel,\n              total: totalNumber,\n              pageSize: pageLength,\n              itemRender,\n            }}\n            showHeader={showHeader}\n            // eslint-disable-next-line react/jsx-props-no-spreading\n            {...rowSelectionData}\n          />\n        </Form>\n      </div>\n    </>\n  );\n};\n\nexport default CustomTablePagination;\n","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/shared/components/ButtonLoader.tsx",[],"/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/animals/milestones/MilestoneAddEditForm.tsx",["534","535","536","537","538","539","540","541","542","543","544","545","546","547","548","549","550","551"],"/* eslint-disable no-use-before-define */\n/* eslint-disable no-unused-vars */\nimport {\n  Button, Form, FormInstance, message, Modal, Row, Select,\n} from 'antd';\nimport { LoadingOutlined } from '@ant-design/icons';\nimport { useEffect, useState } from 'react';\nimport '../FtrAnimals.less';\nimport Cookies from 'universal-cookie';\nimport moment, { Moment } from 'moment';\nimport { isEqual } from 'lodash';\nimport { apiCall } from '../../../shared/api/apiWrapper';\nimport { BirthMilestoneForm } from '../components/forms/AnimalBirthMilestone';\nimport { AnimalIntakeMilestone } from '../components/forms/AnimalIntakeMilestone';\n\nconst { confirm } = Modal;\n\nexport interface AnimalsAddModalProps {\n  editRecord: any;\n  visible: boolean;\n  setVisible: any;\n  animalDetail: any;\n  animalMilestoneList: any;\n  updateAnimalMilestoneListCall: any;\n  getAnimalMilestoneListCall: any;\n  setSelectedPco: any;\n  animalMilestoneFilter: any;\n  selectedPcoId: any;\n  selectedAnimalId: any;\n  updateAnimalMilestoneLoading: boolean;\n}\n\ninterface AnimalType {\n  id: string;\n  typeName: string;\n}\n\ninterface AcquisitionWay {\n  id: string;\n  acquisitionWayName: string;\n}\n\nconst cssPrefix = 'animals-add-modal';\nconst { Option } = Select;\n\nconst layout = {\n  labelCol: { span: 8 },\n  wrapperCol: { span: 16 },\n};\n\ntype SizeType = Parameters<typeof Form>[0]['size'];\n\nconst cookies = new Cookies();\n\n/* eslint-disable no-template-curly-in-string */\nconst validateMessages = {\n  required: '${label} is required',\n  types: {\n    email: '${label} is not a valid email',\n    number: '${label} is not a valid number',\n  },\n  number: {\n    range: '${label} must be between ${min} and ${max}',\n  },\n};\n\nexport const MilestoneAddEditForm = (props: AnimalsAddModalProps) => {\n  const {\n    editRecord, visible, setVisible, animalDetail, animalMilestoneList, updateAnimalMilestoneListCall,\n    getAnimalMilestoneListCall, updateAnimalMilestoneLoading, setSelectedPco, selectedPcoId, selectedAnimalId,\n  } = props;\n  const [, forceUpdate] = useState({});\n  const [loading, setLoading] = useState(false);\n  const newAnimalType: AnimalType[] = [];\n  const newAcquisitionWay: AcquisitionWay[] = [];\n  const [animalType, setAnimalType] = useState(newAnimalType);\n  const [howAcquired, setHowAcquired] = useState(newAcquisitionWay);\n  const [otherRescueShelter, setOtherRescueShelter] = useState<any>([]);\n  const [aqusitionNameToId, setAqusitionNameToId] = useState<any>({});\n  const [aqusitionIdToName, setAqusitionIdToName] = useState<any>({});\n  const [firstError, setFirstError] = useState<any>('');\n  const [form] = Form.useForm();\n\n  // const ifEditMode: boolean = Boolean(props.editRecord && props.editRecord.key) || false;\n  const modalTitle: string = (editRecord?.milestoneType.toLowerCase() === 'intake') ? 'Edit Intake Milestone'\n    : 'Edit Birth Milestone';\n\n  useEffect(() => {\n    const data = {};\n    apiCall('animaltype/get-animal-types', 'GET', data)\n      .then((resp: any) => {\n        if (resp?.status === 200) {\n          setAnimalType(resp?.data?.data?.animalTypes);\n        }\n      });\n  }, []);\n\n  useEffect(() => {\n    const data = {};\n    apiCall('acquisition-way/get-acquisition-way', 'GET', data)\n      .then((resp: any) => {\n        if (resp?.data?.success) {\n          setHowAcquired(resp?.data?.data?.acquisitionWays);\n          const tempAcquistionWay = resp?.data?.data?.acquisitionWays;\n          const newObj: any = {};\n          const newAcquistionWayIdToName: any = {};\n          tempAcquistionWay.map((currentAcqWay: any, i: any) => {\n            newObj[currentAcqWay.acquisitionWayName] = currentAcqWay.id;\n            newAcquistionWayIdToName[currentAcqWay.id] = currentAcqWay.acquisitionWayName;\n            return newObj;\n          });\n          setAqusitionNameToId(newObj);\n          setAqusitionIdToName(newAcquistionWayIdToName);\n        }\n      });\n    apiCall('other-rescue-shelter/get-other-rescue-shelter', 'GET', {})\n      .then((resp: any) => {\n        setOtherRescueShelter(resp?.data?.data?.otherRescueShelters);\n      });\n  }, []);\n\n  // useEffect(() => {\n  //   setFirstError('');\n  //   setCurrentAcquistionWayId('');\n  //   setFlagReasonKey(Date.now());\n  //   form.setFieldsValue({ ...editRecord });\n  //   if (!visible) {\n  //     setNoOfAnimal(1);\n  //     form.resetFields();\n  //     setEditRecord(null);\n  //   }\n  // }, [visible]);\n\n  // if (ifEditMode) {\n  //   form.setFieldsValue({\n  //     ...props.editRecord,\n  //   });\n  // }\n\n  // Can not select days after today\n  const disabledDate = (current: Moment) => current && current > moment().endOf('day');\n\n  // eslint-disable-next-line no-unused-vars\n  const sexValidator: any = ({ getFieldValue }: FormInstance) => ({\n    required: true,\n    validator() {\n      const totalAnimals = Number(getFieldValue('numberOfAnimals') || 0);\n      const maleCnt = Number(getFieldValue('males') || 0);\n      const femaleCnt = Number(getFieldValue('females') || 0);\n      const uknCnt = Number(getFieldValue('unknown') || 0);\n\n      if ((maleCnt + femaleCnt + uknCnt) === totalAnimals) {\n        return Promise.resolve();\n      }\n      return Promise.reject(new Error('Total Count Must Equal the Number of Animals'));\n    },\n  });\n\n  const handleUpdate = () => {\n    const data = form.getFieldsValue();\n    let newData: any = {};\n    if (editRecord?.milestoneType?.toLowerCase() === 'intake') {\n      const {\n        acquisitionWayId, amountPaid, amountRecieved, intakeDate, intakeNote, otherRescueID,\n      } = data;\n      newData = {\n        acquisitionWayId,\n        amountPaidFee: parseInt(amountPaid, 10),\n        amountReceivedFee: parseInt(amountRecieved, 10),\n        milestoneDate: moment(intakeDate),\n        notes: intakeNote,\n        otherRescueIDNo: otherRescueID,\n        otherRescueShelterId: data?.otherRescueShelterId,\n        pcoId: [aqusitionNameToId['Owner Surrender'], aqusitionNameToId?.Person, aqusitionNameToId?.Public].includes(acquisitionWayId) ? selectedPcoId : null,\n        acquisitionWayName: aqusitionIdToName[data?.acquisitionWayId],\n      };\n    } else {\n      const {\n        birthDate, birthNote, isApproxDOB,\n      } = data;\n      newData = {\n        isApproxDOB: JSON.parse(isApproxDOB) || false,\n        milestoneDate: moment(birthDate),\n        notes: birthNote,\n      };\n    }\n\n    updateAnimalMilestoneListCall({\n      ...newData,\n      milestoneId: editRecord?.id,\n    }, () => {\n      getAnimalMilestoneListCall({ page: 1, length: 15, animalId: selectedAnimalId?.[0] || localStorage.getItem('selectedAnimalId') }, () => {\n        setVisible(false);\n      });\n    });\n  };\n\n  const getActualBirthdate = (yrs: number, mos: number, days: number) => {\n    const birthDate = moment().subtract(yrs, 'years').subtract(mos, 'months').subtract(days, 'days');\n    return birthDate;\n  };\n\n  // const onCancel = () => {\n  //   const data = form.getFieldsValue();\n  //   let isFormChanged = false;\n  //   if (!editRecord) {\n  //     isFormChanged = (data?.animalName || data?.breed || data?.color || data.spayedOrNeutered || data?.description\n  //       || data?.otherRescueID || data?.flag || data?.flagReason || data?.location || data?.personOrRescue\n  //       || data?.otherRescueID || data?.otherRescueID || data?.amountPaid || data?.amountRecieved\n  //       || data?.intakeNote || data?.personOrRescue || data?.actualAge || data?.birthNote);\n  //   } else {\n  //     const {\n  //       animalName, animalTypeId, breed, sex, color, spayedOrNeutered, location, flag, flagReason, description, upload,\n  //     } = editRecord;\n  //     const intialRecord = {\n  //       animalName, animalTypeId, breed, sex, color, spayedOrNeutered, location, flag, flagReason, description, upload,\n  //     };\n  //     isFormChanged = !(isEqual(intialRecord, form.getFieldsValue()));\n  //   }\n  //   if (!isFormChanged) {\n  //     form.resetFields();\n  //     props.handleCancel();\n  //     return;\n  //   }\n\n  //   confirm({\n  //     title: 'Do you want to save your changes?',\n  //     icon: <ExclamationCircleOutlined />,\n  //     okText: 'Yes',\n  //     okType: 'danger',\n  //     cancelText: 'No',\n  //     onOk() {\n  //       editRecord ? handleUpdate() : form.submit();\n  //     },\n  //     onCancel() {\n  //       form.resetFields();\n  //       props.handleCancel();\n  //     },\n  //   });\n  // };\n\n  const validationCheck = () => {\n    let errorField = '';\n    setFirstError('');\n    setTimeout(() => {\n      form.getFieldsError()?.map((data: any) => {\n        if (errorField) {\n          return '';\n        }\n        if (data?.errors[0]) {\n          errorField = data?.name[0];\n          setFirstError(data?.name[0]);\n        }\n        return '';\n      });\n      if (errorField) {\n        message.error({\n          content: 'Correct Highlighted Fields',\n          style: {\n            marginTop: '2vh',\n          },\n          key: 'deletedable',\n        });\n      }\n    }, 500);\n  };\n\n  useEffect(() => {\n    if (editRecord?.milestoneType?.toLowerCase() === 'intake') {\n      const intakeMilestone: any = animalMilestoneList[1];\n\n      form.setFieldsValue({\n        acquisitionWayId: intakeMilestone?.acquisitionWayId,\n        amountPaid: (intakeMilestone?.amountPaidFee) ? (intakeMilestone?.amountPaidFee) : '',\n        amountRecieved: (intakeMilestone?.amountReceivedFee) ? (intakeMilestone?.amountReceivedFee) : '',\n        intakeDate: moment(intakeMilestone?.milestoneDate),\n        intakeNote: intakeMilestone?.notes,\n        otherRescueID: intakeMilestone?.otherRescueIDNo,\n      });\n\n      if (intakeMilestone?.pcoId) {\n        setSelectedPco(intakeMilestone?.pcoId);\n      }\n    } else {\n      const birthMilestone: any = animalMilestoneList[0];\n\n      form.setFieldsValue({\n        actualAge: '',\n        birthDate: moment(birthMilestone?.milestoneDate),\n        birthDateFlag: false,\n        birthNote: birthMilestone?.notes,\n        isApproxDOB: birthMilestone?.isApproxDOB ? 'true' : 'false',\n      });\n    }\n  }, [visible]);\n\n  useEffect(() => {\n    console.log(form.getFieldsValue(), '()()()()()()()');\n  }, [form.getFieldsValue()]);\n\n  const footerContent = [\n    <Button key=\"back\" onClick={() => setVisible(false)}>\n      Cancel\n    </Button>,\n    <Button\n      form=\"animal-form\"\n      key=\"submit\"\n      type=\"primary\"\n      htmlType=\"submit\"\n      loading={loading}\n      onClick={() => {\n        validationCheck();\n      }}\n    >\n      Save\n      {updateAnimalMilestoneLoading && <LoadingOutlined spin />}\n    </Button>,\n  ];\n\n  useEffect(() => {\n    forceUpdate({});\n  }, []);\n\n  return (\n    <div className={`${cssPrefix}`}>\n      <Modal\n        className={`${cssPrefix}__modal`}\n        centered\n        title={<span className={`${cssPrefix}__modal__title`}>{modalTitle}</span>}\n        visible={visible}\n        onOk={() => alert('fhghj')}\n        onCancel={() => setVisible(false)}\n        footer={footerContent}\n      >\n        <Form\n          id=\"animal-form\"\n          className={`${cssPrefix}__form`}\n          form={form}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...layout}\n          onFinish={() => handleUpdate()}\n          name=\"nest-messages\"\n          scrollToFirstError\n          validateMessages={validateMessages}\n          size={'small' as SizeType}\n        >\n          {(editRecord?.milestoneType?.toLowerCase() === 'intake') ? (\n            <AnimalIntakeMilestone\n              animalMilestoneList={animalMilestoneList}\n              setFirstError={setFirstError}\n              form={form}\n              firstError={firstError}\n            />\n          ) : (\n            <BirthMilestoneForm\n              animalMilestoneList={animalMilestoneList}\n              form={form}\n              firstError={firstError}\n            />\n          )}\n        </Form>\n      </Modal>\n    </div>\n  );\n};\n","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/assets/images/index.ts",[],"/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/animals/components/forms/AnimalIntakeMilestone.tsx",["552","553","554"],"/* eslint-disable no-use-before-define */\n/* eslint-disable no-unused-vars */\nimport {\n  Col, DatePicker, Form, Input, Row, Select,\n} from 'antd';\nimport { useEffect, useState } from 'react';\nimport '../AnimalsAddModal.less';\nimport moment, { Moment } from 'moment';\nimport { isEqual } from 'lodash';\nimport { apiCall } from '../../../../shared/api/apiWrapper';\nimport PCOMinifiedScreen from '../minifiedPcoScreen';\n\ninterface AnimalBirthMilestoneProps {\n  form: any;\n  firstError: any;\n  setFirstError: any;\n  animalMilestoneList: any;\n}\n\ninterface AcquisitionWay {\n  id: string;\n  acquisitionWayName: string;\n}\n\nconst { Option } = Select;\nconst cssPrefix = 'animals-add-modal';\n\nexport const AnimalIntakeMilestone = (props: AnimalBirthMilestoneProps) => {\n  // eslint-disable-next-line no-empty-pattern\n  const {\n    form, firstError, setFirstError, animalMilestoneList,\n  } = props;\n  const newAcquisitionWay: AcquisitionWay[] = [];\n  const [, forceUpdate] = useState({});\n  const [howAcquired, setHowAcquired] = useState(newAcquisitionWay);\n  const [otherRescueShelter, setOtherRescueShelter] = useState<any>([]);\n  const [aqusitionNameToId, setAqusitionNameToId] = useState<any>({});\n  const [aqusitionIdToName, setAqusitionIdToName] = useState<any>({});\n  const [currentAcquistionWayId, setCurrentAcquistionWayId] = useState('');\n\n  // Can not select days after today\n  const disabledDate = (current: Moment) => current && current > moment().endOf('day');\n\n  useEffect(() => {\n    forceUpdate({});\n  }, []);\n\n  useEffect(() => {\n    const data = {};\n    apiCall('acquisition-way/get-acquisition-way', 'GET', data)\n      .then((resp: any) => {\n        if (resp?.data?.success) {\n          setHowAcquired(resp?.data?.data?.acquisitionWays);\n          const tempAcquistionWay = resp?.data?.data?.acquisitionWays;\n          const newObj: any = {};\n          const newAcquistionWayIdToName: any = {};\n          tempAcquistionWay.map((currentAcqWay: any, i: any) => {\n            newObj[currentAcqWay.acquisitionWayName] = currentAcqWay.id;\n            newAcquistionWayIdToName[currentAcqWay.id] = currentAcqWay.acquisitionWayName;\n            return newObj;\n          });\n          setAqusitionNameToId(newObj);\n          setAqusitionIdToName(newAcquistionWayIdToName);\n        }\n      });\n    apiCall('other-rescue-shelter/get-other-rescue-shelter', 'GET', {})\n      .then((resp: any) => {\n        setOtherRescueShelter(resp?.data?.data?.otherRescueShelters);\n      });\n  }, []);\n\n  useEffect(() => {\n    setCurrentAcquistionWayId(animalMilestoneList[1]?.acquisitionWayId || '');\n  }, [animalMilestoneList]);\n\n  return (\n    <div className=\"\">\n      <Row>\n        <Col className={`${cssPrefix}__two-col-lyt`}>\n          <Form.Item\n            name=\"intakeDate\"\n            label=\"Date of Intake\"\n            initialValue={moment()}\n            rules={[\n              ({ getFieldValue }) => ({\n                required: true,\n                type: 'date',\n                validator(_, value) {\n                  if (!value) {\n                    return Promise.reject(new Error('Enter Date in Intake'));\n                  }\n                  const birthDate = moment(animalMilestoneList?.[0]?.milestoneDate).format('MM-DD-yyyy');\n                  const newIntakeDate = moment(value).format('MM-DD-yyyy');\n                  console.log(birthDate, '------=====-----', newIntakeDate);\n                  if (moment(newIntakeDate).isBefore(birthDate)) {\n                    return Promise.reject(new Error('Intake date must be greater than or same as Birth Date'));\n                  }\n                  return Promise.resolve();\n                },\n              }),\n            ]}\n          >\n            <DatePicker format=\"MM-DD-yyyy\" disabledDate={disabledDate} />\n          </Form.Item>\n          <Form.Item\n            initialValue={howAcquired[0]?.id}\n            name=\"acquisitionWayId\"\n            label=\"How Acquired\"\n            rules={[{ required: true }]}\n          >\n            <Select\n              ref={(ref) => (firstError === 'acquisitionWayId') && ref && ref.focus()}\n              placeholder=\"Select a Acquistion Type\"\n              onChange={(data: any) => setCurrentAcquistionWayId(data)}\n            >\n              {howAcquired.map((data) => (\n                <Option key={data.id} value={data.id}>{data.acquisitionWayName}</Option>\n              ))}\n            </Select>\n          </Form.Item>\n          <Row>\n            <Col lg={24}>\n              {[aqusitionNameToId['Owner Surrender'], aqusitionNameToId?.Person, aqusitionNameToId?.Public].includes(currentAcquistionWayId) && (\n                <>\n                  <PCOMinifiedScreen setFirstError={setFirstError} />\n                </>\n              )}\n            </Col>\n            {/* <PlusOutlined style={{ marginLeft: '10px', marginTop: '5px', cursor: 'pointer' }} />\n              <EditOutlined style={{ marginLeft: '10px', marginTop: '5px', cursor: 'pointer' }} /> */}\n          </Row>\n          {(currentAcquistionWayId === aqusitionNameToId['Other Rescue/Shelter/Sanctuary']) && (\n            <Form.Item\n              initialValue={otherRescueShelter[0]?.id}\n              name=\"otherRescueShelterId\"\n              label=\"Other Rescue Shelters\"\n              rules={[\n                { required: true },\n              ]}\n            >\n              <Select\n                ref={(ref) => (firstError === 'otherRescueShelterId') && ref && ref.focus()}\n                placeholder=\"Select a Other Rescue Shelters\"\n              >\n                {otherRescueShelter?.map((data: any) => (\n                  <Option\n                    key={data?.id}\n                    value={data?.id}\n                    onChange={() => forceUpdate({})}\n                  >\n                    {data?.otherRescueShelterName}\n                  </Option>\n                ))}\n              </Select>\n            </Form.Item>\n          )}\n          <Form.Item name=\"otherRescueID\" label=\"ID No. at Other Rescue\">\n            <Input\n              disabled={(currentAcquistionWayId !== aqusitionNameToId['Other Rescue/Shelter/Sanctuary'])}\n              placeholder=\"Enter ID No. used at other rescue\"\n            />\n          </Form.Item>\n        </Col>\n        <Col className={`${cssPrefix}__two-col-lyt`}>\n          <Form.Item\n            name=\"amountPaid\"\n            label=\"Amount Paid By You\"\n            rules={[\n              ({ getFieldValue }) => ({\n                type: 'number',\n                validator(_, value) {\n                  // Either amountPaid should be there or amountRecieved\n                  const amountPaid = getFieldValue('amountPaid');\n                  const amountRecieved = getFieldValue('amountRecieved');\n                  if (amountRecieved) {\n                    return Promise.resolve();\n                  }\n                  if (!amountPaid && !amountRecieved) {\n                    return Promise.resolve();\n                  }\n                  if (Number(amountPaid) && Number(amountRecieved)) {\n                    return Promise.reject(new Error('Either Amount Paid or Received should be specified. Not Both.'));\n                  }\n                  if (!Number(amountPaid) && !Number(amountRecieved)) {\n                    return Promise.reject(new Error('Amount Received By You must be numeric'));\n                  }\n                  return Promise.resolve();\n                },\n              }),\n            ]}\n          >\n            <Input\n              name=\"amountPaid\"\n              onClick={() => setFirstError('')}\n              onChange={() => forceUpdate({})}\n              disabled={form.getFieldValue('amountRecieved')}\n              ref={(ref) => (firstError === 'amountPaid') && ref && ref.focus()}\n            />\n          </Form.Item>\n          <Form.Item\n            name=\"amountRecieved\"\n            label=\"Or Amount Received By You\"\n            rules={[\n              ({ getFieldValue }) => ({\n                type: 'number',\n                validator(_, value) {\n                  // Either amountPaid should be there or amountRecieved\n                  const amountPaid = getFieldValue('amountPaid');\n                  const amountRecieved = getFieldValue('amountRecieved');\n                  if (amountPaid) {\n                    return Promise.resolve();\n                  }\n                  if (!amountPaid && !amountRecieved) {\n                    return Promise.resolve();\n                  }\n                  if (Number(amountPaid) && Number(amountRecieved)) {\n                    return Promise.reject(new Error('Either Amount Paid or Received should be specified. Not Both.'));\n                  }\n                  if (!Number(amountPaid) && !Number(amountRecieved)) {\n                    return Promise.reject(new Error('Amount Received By You must be numeric'));\n                  }\n                  return Promise.resolve();\n                },\n              }),\n            ]}\n          >\n            <Input\n              name=\"amountRecieved\"\n              onClick={() => setFirstError('')}\n              onChange={() => forceUpdate({})}\n              disabled={form.getFieldValue('amountPaid')}\n              ref={(ref) => (firstError === 'amountReceived') && ref && ref.focus()}\n            />\n          </Form.Item>\n          <Form.Item name=\"intakeNote\" label=\"Intake Notes\">\n            <Input.TextArea placeholder=\"Enter any Intake Notes\" />\n          </Form.Item>\n        </Col>\n      </Row>\n    </div>\n  );\n};\n","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/animals/components/forms/AnimalBirthMilestone.tsx",["555","556","557","558","559","560"],"/* eslint-disable no-use-before-define */\n/* eslint-disable no-unused-vars */\nimport {\n  Col, DatePicker, Form, Input, InputNumber, Row, Switch, Radio,\n} from 'antd';\nimport { useEffect, useState } from 'react';\nimport '../AnimalsAddModal.less';\nimport moment, { Moment } from 'moment';\nimport { isEqual } from 'lodash';\n\ninterface AnimalBirthMilestoneProps {\n  form: any;\n  firstError: any;\n  animalMilestoneList: any;\n}\n\nconst cssPrefix = 'animals-add-modal';\n\nexport const BirthMilestoneForm = (props: AnimalBirthMilestoneProps) => {\n  // eslint-disable-next-line no-empty-pattern\n  const { form, firstError, animalMilestoneList } = props;\n  const [, forceUpdate] = useState({});\n\n  // Can not select days after today\n  const disabledDate = (current: Moment) => current && current > moment().endOf('day');\n\n  useEffect(() => {\n    console.log(form, '---------');\n  }, [form]);\n\n  useEffect(() => {\n    forceUpdate({});\n  }, []);\n\n  return (\n    <div className=\"\">\n      <Row>\n        <Col className={`${cssPrefix}__two-col-lyt`}>\n          <Form.Item\n            name=\"actualAge\"\n            label={`${JSON.parse(form.getFieldValue('isApproxDOB')) ? 'Approximate' : 'Actual'} Birth Date`}\n            style={{ marginBottom: 0 }}\n            key={`${form.getFieldValue('birthDateFlag')}-key`}\n            rules={[\n              ({ getFieldValue }) => ({\n                required: getFieldValue('birthDateFlag'),\n                validator() {\n                  // const [yrs, mos, days] = [getFieldValue('yrs') || 0, getFieldValue('mos') || 0, getFieldValue('days') || 0];\n                  const [flag, date] = [getFieldValue('birthDateFlag'), getFieldValue('birthDate')];\n                  if ((flag && date) || !flag) {\n                    return Promise.resolve();\n                  }\n                  return Promise.reject(new Error('Either Approximate Age or Birth Date must be specified'));\n                },\n              }),\n            ]}\n          >\n            <Row gutter={8}>\n              <Col span={10} style={{ marginBottom: '5px' }}>\n                <Form.Item\n                  name=\"birthDate\"\n                  label=\"\"\n                  style={{ marginTop: 2, marginBottom: 0 }}\n                  rules={[\n                    ({ getFieldValue }) => ({\n                      required: true,\n                      type: 'date',\n                      validator(_, value) {\n                        if (!value) {\n                          return Promise.reject(new Error('Enter Birth Date'));\n                        }\n                        const newIntakeDate = moment(animalMilestoneList?.[1]?.milestoneDate);\n                        const birthDate = moment(value);\n                        console.log(newIntakeDate, '--------', birthDate, '--------', newIntakeDate.isBefore(birthDate));\n\n                        if (moment(newIntakeDate).isBefore(birthDate)) {\n                          return Promise.reject(new Error('Birth Date must be less than or same as Intake Date'));\n                        }\n                        return Promise.resolve();\n                      },\n                    }),\n                  ]}\n                >\n                  <DatePicker format=\"MM-DD-yyyy\" disabledDate={disabledDate} />\n                </Form.Item>\n              </Col>\n              <Col span={12} style={{ marginBottom: '5px' }}>\n                <Form.Item name=\"isApproxDOB\">\n                  <Radio.Group defaultValue=\"false\">\n                    <Row>\n                      <Col>\n                        <Radio onChange={() => forceUpdate({})} value=\"true\">Approximate Birth Date</Radio>\n                      </Col>\n                      <Col>\n                        <Radio onChange={() => forceUpdate({})} value=\"false\">Actual Birth Date</Radio>\n                      </Col>\n                    </Row>\n                  </Radio.Group>\n                </Form.Item>\n              </Col>\n            </Row>\n          </Form.Item>\n        </Col>\n        <Col />\n        <Col className={`${cssPrefix}__two-col-lyt`}>\n          <Form.Item name=\"birthNote\" label=\"Birth Notes\">\n            <Input.TextArea placeholder=\"Input any birth notes\" />\n          </Form.Item>\n        </Col>\n      </Row>\n    </div>\n  );\n};\n","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/animals/components/minifiedPcoScreen/index.ts",["561","562"],"/* eslint-disable no-shadow */\n/* eslint-disable no-use-before-define */\n/* eslint-disable no-unused-vars */\nimport { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport Cookies from 'universal-cookie';\nimport {\n  addPCOCall, updatePCOCall, deletePCOCall, getPcoListCall, setSelectedPco, getPcoListSuggestionCall,\n} from '../../../../redux/pco/action';\nimport { PCOMinifiedScreen } from '../minifiedPcoScreen/PCOMinifiedScreen';\n\nconst cookies = new Cookies();\n\nconst mapStateToProps = (state: any) => ({\n  getPcoListLoading: state.pco.getPcoListLoading,\n  getPcoListSuccess: state.pco.getPcoListSuccess,\n  pcoList: state.pco.pcoList,\n  selectedId: state.pco.selectedId,\n  addPcoLoading: state.pco.addPcoLoading,\n  addPcoSuccess: state.pco.addPcoSuccess,\n  updatePcoLoading: state.pco.updatePcoLoading,\n  updatePcoSuccess: state.pco.updatePcoSuccess,\n  totalNumber: state.pco.allPcoCount,\n  currentPage: state.pco.currentPage,\n  userCountryCode: state.auth.countryCode || cookies.get('loginDetails').userCountryCode,\n});\n\nconst mapDispatchToProps = (dispatch: any) => ({\n  addPCOCall: (data: {}, callbackFunction: () => void) => dispatch(addPCOCall(data, callbackFunction)),\n  updatePCOCall: (data: {}, callbackFunction: () => void) => dispatch(updatePCOCall(data, callbackFunction)),\n  deletePCOCall: (data: {}, callbackFunction: () => void) => dispatch(deletePCOCall(data, callbackFunction)),\n  getPcoListCall: (data: {}, callbackFunction: () => void) => dispatch(getPcoListCall(data, callbackFunction)),\n  getPcoListSuggestionCall: (data: {}, callbackFunction: () => void) => dispatch(getPcoListSuggestionCall(data, callbackFunction)),\n  setSelectedPco: (data: any) => dispatch(setSelectedPco(data)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PCOMinifiedScreen);\n","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/animals/components/minifiedPcoScreen/PCOMinifiedScreen.tsx",["563","564","565","566","567","568","569","570","571","572","573"],"/* eslint-disable no-shadow */\n/* eslint-disable no-use-before-define */\n/* eslint-disable no-unused-vars */\nimport { useEffect, useState, FC } from 'react';\nimport { connect } from 'react-redux';\nimport Cookies from 'universal-cookie';\nimport {\n  Row, Button, Space,\n} from 'antd';\nimport {\n  PlusOutlined, FlagFilled,\n} from '@ant-design/icons';\nimport { apiCall } from '../../../../shared/api/apiWrapper';\nimport { PcoAddModal } from '../../../pco/components/PcoAddModal';\nimport CustomTablePagination from '../../../../shared/components/CustomTablePagination';\nimport SearchInput from '../../../../shared/components/Inputs/SearchInput.component';\nimport { pageLengthMinifiedPco } from '../../../../shared/constants/pagination.json';\n\nexport interface PCOAddModalProps {\n  visible?: boolean;\n  addPcoLoading?: boolean;\n  updatePcoLoading?: boolean;\n  setAddModalVisibility?: any;\n  addPCOCall?: any;\n  updatePCOCall?: any;\n  getPcoListCall?: any;\n  userCountryCode?: string;\n  getPcoFilter?: any;\n  pcoList: [],\n  totalNumber: number,\n  getPcoListLoading: boolean,\n  setSelectedPco: any,\n  selectedId: string,\n  setFirstError: any,\n}\n\nconst cookies = new Cookies();\nconst cssPrefix = 'ftr-pco';\n\nexport const PCOMinifiedScreen: FC<PCOAddModalProps> = (props) => {\n  const {\n    addPCOCall,\n    updatePCOCall,\n    getPcoListCall,\n    userCountryCode,\n    pcoList,\n    totalNumber,\n    getPcoListLoading,\n    setSelectedPco,\n    selectedId,\n    getPcoFilter,\n    setFirstError,\n  } = props;\n  const [addModalVisible, setAddModalVisible] = useState(false);\n  const [editRecord, setEditRecord] = useState<any>({});\n  const [currentPageLocal, setCurrentPageLocal] = useState(1);\n  const [searchKey, setSearchKey] = useState('');\n  const [searchKeyFinal, setSearchKeyFinal] = useState('');\n  const [tempForm, setTempForm] = useState({});\n  const [pcoSuggestion, setPcoSuggestion] = useState([]);\n  const [tableFilter, setTableFilter] = useState({\n    pageLength: pageLengthMinifiedPco,\n    page: 1,\n    isDeleted: false,\n    entityType: 'person',\n    searchText: '',\n  });\n\n  const setEditModalOpen = (value: boolean, data: any) => {\n    setEditRecord(data);\n    setAddModalVisible(value);\n    setTempForm(data);\n  };\n\n  const nameColumnRenderer = (text: string, record: any) => (\n    <Space align=\"baseline\" size=\"middle\">\n      <span>\n        {text}\n      </span>\n      {record.flag ? (\n        <FlagFilled\n          className={`${cssPrefix}__table-cell-flag${record.flag ? '--flagged' : ''}`}\n        />\n      ) : <span />}\n    </Space>\n  );\n\n  useEffect(() => {\n    setFirstError('');\n    // if (!searchKey) {\n    //   setSearchKeyFinal('');\n    // }\n    getPcoListCall({\n      length: pageLengthMinifiedPco,\n      page: currentPageLocal,\n      isDeleted: false,\n      entityType: tableFilter?.entityType,\n      searchText: searchKeyFinal,\n    }, () => console.log('get list of pco'));\n  }, [currentPageLocal, tableFilter, searchKeyFinal]);\n\n  useEffect(() => {\n    if (!searchKey) {\n      setSearchKeyFinal('');\n      getPcoListCall({\n        length: pageLengthMinifiedPco,\n        page: currentPageLocal,\n        isDeleted: false,\n        entityType: tableFilter?.entityType,\n        searchText: searchKeyFinal,\n      }, () => console.log('get list of pco'));\n    }\n  }, [searchKey]);\n\n  useEffect(() => {\n    const data = {};\n    apiCall(`PCO/search-autocomplete?searchText=${searchKey}&limit=20`, 'GET', data)\n      .then((resp: any) => {\n        if (resp.status === 200) {\n          setPcoSuggestion(resp?.data?.data);\n        }\n      });\n  }, [searchKey]);\n\n  const pcoColumns = [{\n    title: 'Last Name',\n    dataIndex: 'lastName',\n    render: nameColumnRenderer,\n  },\n  {\n    title: 'First Name',\n    dataIndex: 'firstName',\n  },\n  {\n    title: 'Street',\n    dataIndex: 'street',\n  },\n  // {\n  //   title: 'Street 2',\n  //   dataIndex: 'street2',\n  // },\n  {\n    title: 'City',\n    dataIndex: 'city',\n    width: 100,\n  },\n  {\n    title: 'State',\n    dataIndex: 'state',\n  },\n    // {\n    //   title: 'Zip',\n    //   dataIndex: 'zip',\n    // },\n    // {\n    //   title: 'Phone',\n    //   dataIndex: 'phone',\n    // },\n    // {\n    //   title: 'Email',\n    //   dataIndex: 'email',\n    //   width: 220,\n    // },\n  ];\n\n  return (\n    <div>\n      <PcoAddModal\n        minifiedVersion\n        visible={addModalVisible}\n        setAddModalVisibility={setAddModalVisible}\n        editRecord={editRecord}\n        setEditRecord={setEditRecord}\n        addPCOCall={addPCOCall}\n        updatePCOCall={updatePCOCall}\n        addPcoLoading={false}\n        updatePcoLoading={false}\n        getPcoListCall={getPcoListCall}\n        userCountryCode=\"userCountryCode\"\n        setSearchKey={setSearchKey}\n        setSearchKeyFinal={setSearchKeyFinal}\n        setSelectedPco={setSelectedPco}\n        getPcoFilter={{\n          length: pageLengthMinifiedPco,\n          page: currentPageLocal,\n          isDeleted: false,\n          entityType: tableFilter?.entityType,\n          searchText: searchKey,\n        }}\n        handleCancel={() => {\n          setAddModalVisible(false);\n          setEditRecord(null);\n        }}\n      />\n      <Row justify=\"space-between\" style={{ marginBottom: '4px' }}>\n        <SearchInput\n          searchKey={searchKey}\n          setSearchKey={setSearchKey}\n          setSearchKeyFinal={setSearchKeyFinal}\n          options={pcoSuggestion}\n          placeholder=\"Search Last Name\"\n        />\n        <Button\n          className={`${cssPrefix}__button`}\n          type=\"dashed\"\n          onClick={() => setAddModalVisible(true)}\n          icon={<PlusOutlined />}\n        >\n          Add\n        </Button>\n      </Row>\n      <CustomTablePagination\n        config={{\n          rowSelection: 'radio',\n          selectedRow: selectedId,\n          setSelectedRow: setSelectedPco,\n          isNotDeletable: true,\n          isNotEditable: false,\n          showHeader: true,\n          selectable: true,\n          tableType: 'Users',\n        }}\n        totalNumber={totalNumber}\n        currentPage={currentPageLocal}\n        setPaginationData={setCurrentPageLocal}\n        tableData={pcoList}\n        columnData={pcoColumns}\n        isLoading={getPcoListLoading}\n        delete={(id: string) => alert(id)}\n        setEditModalOpen={(isOpen: boolean, data: any) => setEditModalOpen(isOpen, data)}\n      />\n    </div>\n  );\n};\n","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/shared/components/Inputs/SearchInput.component.tsx",["574"],"/* eslint-disable no-unused-vars */\n/* eslint-disable quotes */\n/* eslint-disable quote-props */\nimport { useState, FC, useEffect } from 'react';\nimport { AutoComplete } from 'antd';\n\nconst { Option } = AutoComplete;\n\ninterface Props {\n  label?: string;\n  options?: any;\n  value?: any;\n  searchKey?: string;\n  setSearchKey?: any;\n  placeholder?: string;\n  setSearchKeyFinal?: (value: any) => void;\n  onChange?: (value: any) => void;\n}\n\n// eslint-disable-next-line no-unused-vars\nconst Complete: FC<Props> = (newProps) => {\n  const {\n    options, setSearchKey, setSearchKeyFinal, placeholder, searchKey,\n  } = newProps;\n  const [key, setKey] = useState(Date.now());\n\n  useEffect(() => {\n    setKey(Date.now());\n  }, []);\n\n  return (\n    <AutoComplete style={{ width: 200 }} value={searchKey} onChange={(data) => setSearchKey(data)} onSelect={setSearchKeyFinal} placeholder={placeholder}>\n      {options?.map((data: any) => (\n        <Option key={data} value={data}>\n          {data}\n        </Option>\n      ))}\n    </AutoComplete>\n  );\n};\n\nexport default Complete;\n","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/pco/components/PcoAddModal.tsx",["575","576","577","578","579","580","581","582","583","584","585","586","587","588","589"],"/* eslint-disable no-console */\n/* eslint-disable no-use-before-define */\n/* eslint-disable no-unused-vars */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { FieldData } from 'rc-field-form/es/interface';\nimport {\n  Button, Col, Form, Input, Select, Modal, Radio, Row, Switch, Tooltip, Typography, Upload, message,\n} from 'antd';\nimport { isEqual, kebabCase } from 'lodash';\nimport {\n  InfoCircleOutlined, UploadOutlined, LoadingOutlined, ExclamationCircleOutlined,\n} from '@ant-design/icons';\nimport { useEffect, useState } from 'react';\nimport { WebsiteValidationTooltip, PhoneValidationTooltip } from 'src/shared/constants/tooltips.data';\nimport alertConstant from '../../../shared/constants/alert.json';\nimport { AddFormData, TableData } from '../PCO.types';\nimport './PcoAddModal.less';\nimport CustomPhoneInput from '../../../shared/components/Inputs/CustomPhoneInput';\nimport { PERSON, ORG } from '../Pco.data';\nimport SingleAvatarUpload from '../../../shared/components/Inputs/SingleAvatarUpload';\nimport { apiCall } from '../../../shared/api/apiWrapper';\n\nconst { confirm } = Modal;\n\nconst { Option } = Select;\n\nexport interface PcoAddModalProps {\n  minifiedVersion: boolean;\n  editRecord?: TableData | null;\n  visible: boolean;\n  addPcoLoading: boolean;\n  updatePcoLoading: boolean;\n  getPcoFilter: any;\n  userCountryCode: String;\n  setSearchKey: (searchKey: string) => void;\n  setSearchKeyFinal: (searchKey: string) => void;\n  setAddModalVisibility: (isVisible: boolean) => void;\n  setEditRecord: (data: any) => void;\n  addPCOCall: (data: object, callbackFunction: any) => void;\n  updatePCOCall: (data: object, callbackFunction: any) => void;\n  getPcoListCall: (data: object, callbackFunction: any) => void;\n  uploadImageCall?: any;\n  deleteImageCall?: any,\n  selectedPcoId?: any,\n  setSelectedPco: (data: any) => void;\n  handleCancel: () => void;\n}\n\nconst cssPrefix = 'pco-add-modal';\n\n/* eslint-disable no-template-curly-in-string */\nconst validateMessages = {\n  required: '${label} is required',\n  types: {\n    email: '${label} is not a valid email',\n    number: '${label} is not a valid number',\n  },\n  number: {\n    range: '${label} must be between ${min} and ${max}',\n  },\n};\n/* eslint-enable no-template-curly-in-string */\n\nconst normFile = (e: any) => {\n  /* eslint no-console: [\"error\", { allow: [\"warn\", \"error\"] }] */\n  // console.log('Upload event:', e);\n  if (Array.isArray(e)) {\n    return e;\n  }\n  return e && e.fileList;\n};\n\ninterface CountryNameInterface {\n  id: string;\n  countryName: string;\n}\n\nexport const PcoAddModal = (props: PcoAddModalProps) => {\n  const newCountryNameInterface: CountryNameInterface[] = [];\n  const [imageState, setImageState] = useState<any>();\n  const [existedImageUrl, setExistedImageUrl] = useState<any>();\n  const [existedImageId, setExistedImageId] = useState<any>();\n  const [entityType, setEntityType] = useState(PERSON);\n  const [phoneNumber, setPhoneNumber] = useState('');\n  const [countryList, setCountryList] = useState(newCountryNameInterface);\n  const [selectCountry, setSelectCountry] = useState('');\n  const [saveAnother, setSaveAnother] = useState(false);\n  const [otherPhoneNumber, setOtherPhoneNumber] = useState('');\n  const [flagReasonKey, setFlagReasonKey] = useState(Date.now());\n  const [highlightKey, setHighlightKey] = useState<any>('');\n  const [hightlightField, setHighlightField] = useState<any>();\n  const [, forceUpdate] = useState({});\n  const [tempForm, setTempForm] = useState<any>({});\n\n  const {\n    addPCOCall, updatePCOCall, getPcoListCall, setAddModalVisibility,\n    addPcoLoading, updatePcoLoading, visible, editRecord, getPcoFilter,\n    setEditRecord, userCountryCode, minifiedVersion, setSearchKeyFinal,\n    setSearchKey, setSelectedPco, uploadImageCall, selectedPcoId, deleteImageCall,\n  } = props;\n\n  const layout = {\n    labelCol: { span: 12 },\n    wrapperCol: { span: 12 },\n  };\n\n  useEffect(() => {\n    let errorField = '';\n    setTimeout(() => {\n      form.getFieldsError()?.map((data: any) => {\n        if (errorField) {\n          return '';\n        }\n        if (data?.errors[0]) {\n          errorField = data?.name[0];\n          setHighlightField(data?.name[0]);\n        }\n        return '';\n      });\n    }, 500);\n  }, [highlightKey]);\n\n  useEffect(() => {\n    if (!editRecord?.id) {\n      return;\n    }\n    apiCall(`artifact-attachment/get-artifactattachment-bypco/${editRecord?.id}`, 'GET', {})\n      .then((resp: any) => {\n        setExistedImageUrl(resp?.data?.data?.artifactAttachment?.blobUrl);\n        setExistedImageId(resp?.data?.data?.artifactAttachment?.id);\n      });\n  }, [editRecord]);\n\n  const countryId = localStorage.getItem('countryId');\n\n  const ifEditMode: boolean = Boolean(props.editRecord && props.editRecord.key) || false;\n  const modalTitle: string = editRecord ? `Edit ${props.editRecord!.firstName} ${props.editRecord!.lastName}`\n    : `Add Person${!minifiedVersion ? ', Company or Organization' : ''}`;\n\n  const [form] = Form.useForm();\n\n  useEffect(() => {\n    onEntityChange(editRecord?.entityType || 'Person');\n    setHighlightField('firstName');\n    forceUpdate({});\n    form.setFieldsValue({ countryCode: userCountryCode });\n    form.setFieldsValue({ ...editRecord });\n    if (!visible) {\n      setImageState('');\n      setExistedImageUrl('');\n      setExistedImageId('');\n      form.resetFields();\n      setEditRecord(null);\n    } else {\n      setSelectedPco('');\n    }\n  }, [visible]);\n\n  useEffect(() => {\n    const data = {};\n    apiCall('country/get-country', 'GET', data)\n      .then((resp: any) => {\n        if (resp?.data?.success) {\n          setCountryList(resp?.data?.data?.countries);\n        }\n      });\n  }, []);\n\n  useEffect(() => {\n    // eslint-disable-next-line\n    const selectedCountryName = countryList.find(o => o.id == countryId);\n    setSelectCountry(selectedCountryName?.countryName || '');\n  }, [countryList]);\n\n  const onSearch = (val: string) => {\n    // const searchedCountries = countryList.filter((o) => {\n    //   const regex = new RegExp(val, 'g');\n    //   return (o.countryName.match(regex));\n    // });\n    // setCountryList([...searchedCountries]);\n  };\n\n  const onChangeDropDown = (e: any) => {\n    setSelectCountry(e);\n  };\n\n  const onEntityChange = (currentEntityType: string) => {\n    setEntityType(currentEntityType);\n    if (currentEntityType === ORG) {\n      form.setFieldsValue({\n        firstName: '',\n        rescueContact: '',\n        contact: '',\n        hospital: false,\n        rescue: false,\n      });\n    }\n    const updatedFields = form.getFieldsError()\n      .filter((field) => field.errors.length > 0)\n      .map((field) => ({ name: field.name, errors: [] }));\n    form.setFields(updatedFields as unknown as FieldData[]);\n  };\n\n  const onFlagChange = (flag: boolean) => {\n    setFlagReasonKey(Date.now());\n    if (!flag) {\n      form.setFieldsValue({\n        flagReason: '',\n      });\n    }\n    forceUpdate({});\n  };\n\n  const addConfirmPco = (addPcoMessage: string) => (\n    <div className=\"\">\n      <p>\n        {addPcoMessage}\n      </p>\n      <Button type=\"primary\" onClick={() => onSave({ addAnother: false, forceAdd: true })}>\n        Add Anyway\n        {addPcoLoading && <LoadingOutlined spin />}\n      </Button>\n    </div>\n  );\n\n  const onSave = ({ addAnother, forceAdd }: { addAnother?: boolean, forceAdd?: boolean } = { addAnother: false, forceAdd: false }) => {\n    const data = form.getFieldsValue();\n    const formData = {\n      firstName: data?.firstName,\n      lastName: data?.lastName,\n      street: data?.street,\n      street2: data?.street2,\n      city: data?.city,\n      state: data?.state,\n      zip: data?.zip,\n      countryId: localStorage.getItem('countryId'),\n      phone: phoneNumber,\n      otherPhone: otherPhoneNumber,\n      email: data?.email,\n      // eslint-disable-next-line no-unneeded-ternary\n      mailList: data?.mailList ? true : false,\n      website: data?.website,\n      contact: data?.contact || '',\n      rescueContact: data?.rescueContact || '',\n      notes: data?.notes,\n      entityType: entityType ?? data?.entityType,\n      hospital: true,\n      rescue: true,\n      flag: data?.flag,\n      flagReason: data?.flagReason || '',\n      isDeleted: false,\n    };\n\n    addPCOCall({ formData, forceAdd, addConfirmPco }, (pcoId: any) => {\n      uploadImageCall({\n        imageState,\n        pcoId,\n        Entity: 'PCO',\n        PublicityRank: 0,\n        AttachmentDate: new Date(),\n        AttachmentType: 'Photo',\n      }, () => {\n\n      });\n      getPcoListCall({ ...getPcoFilter }, () => console.log('get list of pco'));\n      if (addAnother) {\n        form.resetFields();\n        setImageState('');\n      } else {\n        setAddModalVisibility(false);\n      }\n    });\n  };\n\n  const onFinishFailed = () => {\n    message.error({\n      content: alertConstant.validation_error_massage,\n      style: {\n        marginTop: '2vh',\n      },\n      key: 'updatable',\n    });\n  };\n\n  const onUpdate = () => {\n    const data = form.getFieldsValue();\n    const newEditRecord = {\n      id: editRecord?.id,\n      firstName: data?.firstName,\n      lastName: data?.lastName,\n      street: data?.street,\n      street2: data?.street2,\n      city: data?.city,\n      state: data?.state,\n      zip: data?.zip,\n      countryId: data?.countryId,\n      phone: phoneNumber,\n      otherPhone: otherPhoneNumber,\n      email: data?.email,\n      // eslint-disable-next-line no-unneeded-ternary\n      mailList: data?.mailList ? true : false,\n      website: data?.website,\n      contact: data?.contact || '',\n      rescueContact: data?.rescueContact || '',\n      notes: data?.notes,\n      entityType: data?.entityType,\n      hospital: true,\n      rescue: true,\n      flag: data?.flag,\n      flagReason: data?.flagReason || '',\n      isDeleted: false,\n    };\n\n    updatePCOCall(newEditRecord, () => {\n      console.log(imageState, '---------', existedImageId);\n      if (imageState) {\n        uploadImageCall({\n          imageState,\n          pcoId: editRecord?.id,\n          Entity: 'PCO',\n          PublicityRank: 0,\n          AttachmentDate: new Date(),\n          AttachmentType: 'Photo',\n        }, () => {\n          setAddModalVisibility(false);\n        });\n      } else if (!imageState && existedImageId) {\n        deleteImageCall({ id: existedImageId }, () => {\n          setAddModalVisibility(false);\n        });\n      } else {\n        setAddModalVisibility(false);\n      }\n    });\n  };\n\n  const onCancel = () => {\n    const currentFormData = form.getFieldsValue();\n    let isFormChanged = false;\n    if (!editRecord) {\n      isFormChanged = (\n        currentFormData?.city || currentFormData?.email || currentFormData?.entityType || currentFormData?.firstName\n        || currentFormData?.lastName || currentFormData?.notes || currentFormData?.otherPhone\n        || currentFormData?.phone || currentFormData?.state || currentFormData?.street || currentFormData?.street2\n        || currentFormData?.zip || imageState\n      );\n    } else {\n      const {\n        city, email, firstName, id, lastName, mailList, notes, otherPhone, phone,\n        state, street, street2, zip, flag, flagReason, contact, rescueContact, website,\n      } = currentFormData;\n      const intialRecord = {\n        city,\n        email,\n        entityType: editRecord?.entityType,\n        firstName,\n        lastName,\n        mailList,\n        notes,\n        otherPhone,\n        phone,\n        state,\n        street,\n        street2,\n        zip,\n        flag,\n        flagReason,\n        contact,\n        rescueContact,\n        countryId: currentFormData?.countryId,\n        website,\n      };\n      console.log(imageState, '-------------', existedImageId);\n      isFormChanged = !(isEqual(editRecord, { ...intialRecord, id: editRecord?.id })) || imageState || (!existedImageUrl && existedImageId);\n    }\n    if (!isFormChanged) {\n      form.resetFields();\n      setImageState('');\n      props.handleCancel();\n      return;\n    }\n    confirm({\n      title: 'Do you want to save your changes?',\n      icon: <ExclamationCircleOutlined />,\n      okText: 'Yes',\n      okType: 'danger',\n      cancelText: 'No',\n      onOk() {\n        (editRecord?.id) ? onUpdate() : onSave();\n      },\n      onCancel() {\n        form.resetFields();\n        setImageState('');\n        props.handleCancel();\n      },\n    });\n  };\n\n  const footerContent = [\n    <Button key=\"back\" onClick={onCancel}>\n      Cancel\n    </Button>,\n    <Button\n      style={{ display: (editRecord || minifiedVersion) ? 'none' : 'inline' }}\n      htmlType=\"submit\"\n      key=\"saveAnother\"\n      type=\"primary\"\n      // loading={loading}\n      onClick={() => {\n        setSaveAnother(true);\n        form.submit();\n      }}\n    >\n      Save and Add Another\n      {saveAnother && addPcoLoading && <LoadingOutlined spin />}\n    </Button>,\n    <Button\n      form=\"pco-form\"\n      htmlType=\"submit\"\n      key=\"submit\"\n      type=\"primary\"\n      onClick={() => {\n        setSaveAnother(false);\n        setHighlightKey(Date.now());\n      }}\n    >\n      Save\n      {!saveAnother && (addPcoLoading || updatePcoLoading) && <LoadingOutlined spin />}\n    </Button>,\n  ];\n\n  const modalContent = (\n    <Form\n      id=\"pco-form\"\n      className={`${cssPrefix}__form`}\n      form={form}\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...layout}\n      onFinish={() => { editRecord ? onUpdate() : onSave({ addAnother: saveAnother, forceAdd: false }); }}\n      name=\"nest-messages\"\n      validateMessages={validateMessages}\n      onFinishFailed={onFinishFailed}\n      scrollToFirstError\n      size=\"small\"\n    >\n      <Row justify=\"start\" style={{ paddingRight: '20px' }}>\n        <Col lg={12}>\n          {!minifiedVersion && (\n            <Form.Item name=\"entityType\" label=\"Entity Type\">\n              <Radio.Group onChange={(e) => onEntityChange(e.target.value)} defaultValue={entityType}>\n                <Row>\n                  <Col>\n                    <Radio value={PERSON}>Person</Radio>\n                  </Col>\n                  <Col>\n                    <Radio value={ORG}>Company or Organization</Radio>\n                  </Col>\n                </Row>\n              </Radio.Group>\n            </Form.Item>\n          )}\n          <Form.Item name=\"firstName\" label=\"First Name\">\n            <Input\n              disabled={entityType === ORG}\n              placeholder=\"Enter First Name\"\n              ref={(ref) => (hightlightField === 'firstName') && ref && ref.focus()}\n            />\n          </Form.Item>\n          <Form.Item name=\"lastName\" label={entityType === ORG ? 'Name' : 'Last Name'} rules={[{ required: true }]}>\n            <Input\n              placeholder={entityType === ORG ? 'Enter Company/Organization Name' : 'Enter Last Name'}\n              ref={(ref) => (hightlightField === 'lastName') && ref && ref.focus()}\n            />\n          </Form.Item>\n          <Form.Item name=\"street\" label=\"Street\">\n            <Input placeholder=\"Enter Street Info\" />\n          </Form.Item>\n          {!minifiedVersion && (\n            <Form.Item name=\"street2\" label=\"Street 2\">\n              <Input placeholder=\"Enter Additional Street Info\" />\n            </Form.Item>\n          )}\n          <Form.Item name=\"city\" label=\"City\">\n            <Input placeholder=\"Enter City Name\" />\n          </Form.Item>\n          <Form.Item\n            name=\"countryId\"\n            key=\"countryId\"\n            label=\"Country\"\n          >\n            <Select\n              onSearch={onSearch}\n              showSearch\n              onChange={onChangeDropDown}\n              defaultValue={selectCountry}\n              filterOption={(input, option) => option?.children.toLowerCase().startsWith(input.toLowerCase())}\n            >\n              {countryList?.map((data) => (\n                <Option key={kebabCase(data.id)} value={data?.id}>{data?.countryName}</Option>\n              ))}\n            </Select>\n          </Form.Item>\n          {/* <Input.Group>\n            <Row gutter={8}>\n              <Col span={12}>\n                <Form.Item\n                  name={['countryCode']}\n                  label=\"Country Code\"\n                  required\n                  rules={[\n                    {\n                      required: true,\n                    },\n                    {\n                      pattern: /^[A-Za-z]{2,3}$/,\n                      message: 'Country code should be text with two or three character',\n                    },\n                  ]}\n                >\n                  <Input\n                    disabled\n                    name=\"countryCode\"\n                    key=\"countryCode\"\n                    placeholder=\"Enter Country Code\"\n                  />\n                </Form.Item>\n              </Col>\n              <Col span={12}>\n                <Form.Item\n                  name={['country']}\n                  label=\"Country Name\"\n                >\n                  <Input\n                    name=\"country\"\n                    key=\"country\"\n                    placeholder=\"Enter Country Name\"\n                  />\n                </Form.Item>\n              </Col>\n            </Row>\n          </Input.Group> */}\n          {/* <Form.Item name=\"country\" label=\"Country\">\n            <Input placeholder=\"Country\" />\n          </Form.Item> */}\n          <Form.Item\n            name=\"state\"\n            label=\"State, Province, or Locality Code\"\n            rules={[\n              {\n                required: true,\n              },\n              {\n                pattern: /^.{1,2}$/,\n                message: 'State must not be more than two characters',\n              },\n            ]}\n          >\n            <Input placeholder=\"Enter State\" ref={(ref) => (hightlightField === 'state') && ref && ref.focus()} />\n          </Form.Item>\n          <Form.Item\n            name=\"zip\"\n            label=\"Zip/Postal Code\"\n          >\n            <Input placeholder=\"Enter ZIP Code\" />\n          </Form.Item>\n          <CustomPhoneInput required={false} name=\"phone\" label=\"Phone\" phoneNumber={phoneNumber} setPhoneNumber={(e) => setPhoneNumber(e)} />\n          {!minifiedVersion && <CustomPhoneInput required={false} name=\"otherPhone\" label=\"Other Phone\" phoneNumber={otherPhoneNumber} setPhoneNumber={(e) => setOtherPhoneNumber(e)} />}\n          <Form.Item name=\"email\" label=\"Email\" rules={[{ type: 'email' }]}>\n            <Input placeholder=\"Enter Email\" />\n          </Form.Item>\n        </Col>\n        <Col lg={12}>\n          {!minifiedVersion && (\n            <SingleAvatarUpload\n              setExistedImageUrl={setExistedImageUrl}\n              existedImageUrl={existedImageUrl}\n              visible={visible}\n              imageState={imageState}\n              setImageState={setImageState}\n            />\n          )}\n          <Form.Item name=\"mailList\" initialValue label=\"Mail List?\" valuePropName=\"checked\" rules={[{ type: 'boolean' }]}>\n            <Switch defaultChecked />\n          </Form.Item>\n          {!minifiedVersion && (\n            <>\n              <Form.Item name=\"website\" label=\"Website, Facebook, or other URL\">\n                <Input\n                  suffix={(\n                    <Tooltip overlayClassName={`${cssPrefix}__form__tooltip`} placement=\"bottom\" title={WebsiteValidationTooltip}>\n                      <Typography.Link><InfoCircleOutlined /></Typography.Link>\n                    </Tooltip>\n                  )}\n                  className={`${cssPrefix}__form__input`}\n                  placeholder=\"Enter Website, Facebook, or any other URL\"\n                />\n              </Form.Item>\n              <Form.Item name=\"rescueContact\" label=\" Rescue Contact\">\n                <Input disabled={entityType === PERSON} placeholder=\"Enter Rescue Contact Information\" />\n              </Form.Item>\n              <Form.Item name=\"contact\" label=\" Contact Person at Company or Organization\">\n                <Input disabled={entityType === PERSON} placeholder=\"Contact Person at Company or Organization\" />\n              </Form.Item>\n              <Form.Item name=\"flag\" label=\" Flag\" valuePropName=\"checked\">\n                <Switch onChange={onFlagChange} />\n              </Form.Item>\n              <Form.Item key={flagReasonKey} name=\"flagReason\" label=\"Flag Reason\" rules={[{ required: form.getFieldValue('flag'), type: 'string' }]}>\n                <Input.TextArea disabled={!form.getFieldValue('flag')} ref={(ref) => (hightlightField === 'flagReason') && ref && ref.focus()} placeholder=\"Reason to Flag Person/Organization\" />\n              </Form.Item>\n              <Form.Item name=\"notes\" label=\" Notes\">\n                <Input.TextArea placeholder=\"Additional Notes or Any Other Texts\" />\n              </Form.Item>\n            </>\n          )}\n        </Col>\n      </Row>\n    </Form>\n  );\n\n  useEffect(() => {\n    forceUpdate({});\n  }, []);\n\n  return (\n    <div className={`${cssPrefix}`}>\n      <Modal\n        className={`${cssPrefix}${minifiedVersion ? '__modal_minified' : '__modal'}`}\n        centered\n        title={<span className={`${cssPrefix} __modal__title`}>{modalTitle}</span>}\n        visible={props.visible}\n        okText=\"Save\"\n        onOk={form.submit}\n        onCancel={onCancel}\n        footer={footerContent}\n      >\n        {modalContent}\n      </Modal>\n    </div>\n  );\n};\n","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/pco/Pco.data.ts",[],"/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/shared/components/Inputs/SingleAvatarUpload.tsx",["590","591","592","593","594"],"/* eslint-disable no-nested-ternary */\n/* eslint-disable no-unused-vars */\nimport { useEffect, useState } from 'react';\nimport {\n  Upload, Form, Button, Image, Modal, Row, Spin,\n} from 'antd';\nimport {\n  UploadOutlined, DeleteOutlined, EyeOutlined, Loading3QuartersOutlined,\n} from '@ant-design/icons';\nimport { apiCall } from '../../../shared/api/apiWrapper';\nimport './SingleAvatarUpload.less';\n\nconst cssPrefix = 'single-avatar';\n\nexport interface SingleAvatarUploadProps {\n  imageState: any,\n  setImageState: any,\n  visible?: boolean,\n  setExistedImageUrl?: any,\n  existedImageUrl?: any,\n}\n\nconst SingleAvatarUpload = (props: SingleAvatarUploadProps) => {\n  const {\n    imageState, setImageState, visible, existedImageUrl, setExistedImageUrl,\n  } = props;\n  const [currentImageState, setCurrentImageState] = useState<any>();\n  const [imageDimension, setImageDimension] = useState({\n    height: 0,\n    width: 0,\n  });\n  const [preview, setPreview] = useState(false);\n\n  const LoaderIcon = <Loading3QuartersOutlined style={{ fontSize: 24 }} spin />;\n\n  function getBase64(file: any) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsDataURL(file);\n      reader.onload = ({ target: img }: { target: any }) => {\n        resolve(reader.result);\n      };\n      reader.onerror = (error: any) => reject(error);\n    });\n  }\n\n  // useEffect(() => {\n  //   setCurrentImageState('');\n  //   setImageState('');\n  // }, [visible]);\n\n  useEffect(() => {\n    setCurrentImageState(existedImageUrl);\n  }, [existedImageUrl]);\n\n  useEffect(() => {\n    setCurrentImageState('');\n  }, [imageState]);\n\n  const handleCancel = () => setCurrentImageState({ previewVisible: false });\n\n  const handleDelete = () => {\n    setCurrentImageState('');\n    setExistedImageUrl('');\n  };\n\n  const handlePreview = () => {\n    setPreview(true);\n  };\n\n  const handleChange = async ({ file }: { file: any }) => {\n    const image = await getBase64(file.originFileObj);\n    setCurrentImageState(image);\n    setImageState(file.originFileObj);\n  };\n\n  const normFile = (e: any) => {\n    if (Array.isArray(e)) {\n      return e;\n    }\n    return e && e.fileList;\n  };\n\n  return (\n    <>\n      <Form.Item\n        name=\"upload\"\n        label={(\n          <Upload\n            onChange={handleChange}\n            showUploadList={false}\n            name=\"logo\"\n          >\n            <Button icon={<UploadOutlined />}>Browse for Picture</Button>\n          </Upload>\n        )}\n        className=\"form-div-avatar\"\n        valuePropName=\"fileList\"\n        getValueFromEvent={normFile}\n      >\n        <div\n          className=\"container-div\"\n          style={{\n            display: 'flex',\n            justifyContent: 'end',\n            height: imageDimension?.height ? (imageDimension?.height + 18) : 180,\n            marginBottom: '5px',\n          }}\n        >\n          <span className=\"image-wrapper\" style={{ position: 'absolute', width: 175 }}>\n            {\n              currentImageState ? (\n                <>\n                  <Image\n                    onLoad={\n                      ({ target: img }: { target: any }) => {\n                        setImageDimension({ height: img?.height, width: img?.width });\n                      }\n                    }\n                    preview={false}\n                    src={currentImageState}\n                    className=\"image-container\"\n                    style={{\n                      objectFit: 'contain',\n                      border: '0px dashed #8F8F8F',\n                      maxWidth: 175,\n                    }}\n                  />\n                  <div className=\"action-item\" style={{ position: 'absolute', left: ((imageDimension?.width - 60) / 2), bottom: ((imageDimension?.height / 2) + 40) }}>\n                    <Button onClick={() => handleDelete()} style={{ marginRight: '10px' }}>\n                      <DeleteOutlined />\n                    </Button>\n                    <Button onClick={() => handlePreview()}>\n                      <EyeOutlined />\n                    </Button>\n                  </div>\n                  <div style={{ textAlign: 'center' }}>\n                    Hover on image to perform action\n                  </div>\n                </>\n              ) : (\n                false ? (\n                  <div\n                    className=\"image-container\"\n                    style={{\n                      border: '0px dashed #8F8F8F',\n                      height: 175,\n                      width: 175,\n                      display: 'flex',\n                      justifyContent: 'space-around',\n                      alignItems: 'center',\n                      color: 'white',\n                      fontSize: '15px',\n                    }}\n                  >\n                    <div className=\"text-center\">\n                      <Spin indicator={LoaderIcon} />\n                    </div>\n                  </div>\n                ) : (\n                  <div\n                    className=\"image-container\"\n                    style={{\n                      border: '0px dashed #8F8F8F',\n                      height: 175,\n                      width: 175,\n                      display: 'flex',\n                      justifyContent: 'space-around',\n                      alignItems: 'center',\n                      color: 'white',\n                      fontSize: '15px',\n                    }}\n                  >\n                    <div className=\"text-center\">\n                      <div className=\"text-center\">\n                        To Upload Image\n                      </div>\n                      <div className=\"text-center\">\n                        Click On Button\n                      </div>\n                    </div>\n                  </div>\n                )\n              )\n            }\n          </span>\n        </div>\n      </Form.Item>\n      <Modal title=\"Image Preview\" footer={false} visible={preview} onCancel={() => setPreview(false)}>\n        <Row justify=\"center\">\n          <Image\n            preview={false}\n            src={currentImageState}\n            className=\"\"\n            style={{\n              objectFit: 'contain',\n              border: '0px dashed #8F8F8F',\n            }}\n          />\n        </Row>\n      </Modal>\n    </>\n  );\n};\n\nexport default SingleAvatarUpload;\n","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/shared/components/Inputs/CustomPhoneInput.tsx",[],"/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/shared/constants/tooltips.data.tsx",[],"/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/pco/pco-mock.js",[],"/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/animals/FtrAnimals.data.ts",[],"/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/animals/animals-mock.ts",[],"/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/utils/pluralToSingular.ts",[],"/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/pco/components/ContentToolbar.tsx",["595","596","597","598"],"/* eslint-disable no-unused-vars */\n/* eslint-disable no-use-before-define */\nimport {\n  Row,\n  Col,\n  Button,\n  Dropdown,\n  AutoComplete,\n  Menu,\n  Tooltip,\n  Modal,\n} from 'antd';\nimport Search from 'antd/lib/input/Search';\nimport {\n  DeleteOutlined,\n  PlusOutlined,\n  QuestionCircleOutlined,\n  DownOutlined,\n} from '@ant-design/icons';\nimport React, {\n  ReactElement, ReactHTMLElement, useEffect, useState,\n} from 'react';\nimport styled from 'styled-components';\nimport './ContentToolbar.less';\nimport { kebabCase, values } from 'lodash';\nimport { mockMenu1 } from '../Pco.data';\nimport { apiCall } from '../../../shared/api/apiWrapper';\nimport SearchInput from '../../../shared/components/Inputs/SearchInput.component';\n\nconst cssPrefix = 'content-toolbar';\n\nconst { confirm } = Modal;\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n  padding: 10px 0px;\n`;\n\nexport interface ContentToolbarProps {\n  filterSlot?: ReactElement | ReactHTMLElement<HTMLElement>,\n  disableDeleteIcon: boolean;\n  tableFilter: any;\n  currentPage: any,\n  pageLength: any,\n  searchKey: string;\n  setSearchKey: (str: string) => void;\n  setSearchKeyFinal: (str: string) => void;\n  onAddIconClicked: (flag: boolean) => void,\n  onDeleteIconClicked: () => void,\n  onActionItemClick: (item: React.Key, value: string) => void,\n}\n\nexport const ContentToolbar = (props: ContentToolbarProps) => {\n  const { searchKey, setSearchKey, setSearchKeyFinal } = props;\n  const [pcoSuggestion, setPcoSuggestion] = useState([]);\n  const addBtnClicked = () => { props.onAddIconClicked(true); };\n  const deleteBtnClicked = () => { props.onDeleteIconClicked(); };\n  const showActions = () => { };\n\n  useEffect(() => {\n    const data = {};\n    apiCall(`PCO/search-autocomplete?searchText=${searchKey}&limit=${props?.pageLength}&entityType=${(props?.tableFilter === 'all') ? '' : props?.tableFilter}`, 'GET', data)\n      .then((resp: any) => {\n        if (resp?.data?.success) {\n          setPcoSuggestion(resp?.data?.data);\n        }\n      });\n  }, [searchKey]);\n\n  const handleActionsMenuClick = ({ key, value }: { key: React.Key, value: string }) => {\n    props.onActionItemClick(key, value);\n  };\n\n  const deleteIconTooltip: string = props.disableDeleteIcon ? 'Please select entries from Table to delete'\n    : 'Delete selected entries';\n\n  // eslint-disable-next-line\n  const confirmDelete = (\n    <Tooltip title={deleteIconTooltip}>\n      <Button\n        className={`${cssPrefix}__button`}\n        type=\"dashed\"\n        disabled={props.disableDeleteIcon}\n        onClick={showPropsConfirm}\n        icon={<DeleteOutlined />}\n      />\n    </Tooltip>\n  );\n\n  function showPropsConfirm() {\n    confirm({\n      title: 'Delete',\n      icon: <QuestionCircleOutlined style={{ color: 'red' }} />,\n      content: 'Are you sure you want to delete？',\n      okText: 'Delete',\n      okType: 'danger',\n      cancelText: 'Cancel',\n      onOk() {\n        deleteBtnClicked();\n      },\n    });\n  }\n\n  const actionsMenu = (\n    <Menu>\n      {mockMenu1.map(({ key, value }) => (\n        <Menu.Item onClick={() => handleActionsMenuClick({ key, value })} key={kebabCase(key)}>{value}</Menu.Item>\n      ))}\n    </Menu>\n  );\n\n  return (\n    <Wrapper className={`${cssPrefix}`}>\n      <Row className={`${cssPrefix}__row`}>\n        <Col className=\"\">\n          {/* <AutoComplete\n            key=\"value\"\n            options={options}\n            style={{ width: 200 }}\n            onSelect={onSelect}\n            onSearch={onSearch}\n            placeholder=\"Search Last Name\"\n          /> */}\n          <SearchInput\n            placeholder=\"Search Last Name\"\n            searchKey={searchKey}\n            setSearchKey={setSearchKey}\n            setSearchKeyFinal={setSearchKeyFinal}\n            options={pcoSuggestion}\n          />\n        </Col>\n        <Col className={`${cssPrefix}__col--pull-right ${cssPrefix}__filters`}>\n          {props.filterSlot}\n        </Col>\n        <Col>\n          <Button\n            className={`${cssPrefix}__button`}\n            type=\"dashed\"\n            onClick={addBtnClicked}\n            icon={<PlusOutlined />}\n          >\n            Add\n          </Button>\n        </Col>\n        {/* <Col>\n          {confirmDelete}\n        </Col> */}\n        <Col>\n          <Dropdown overlay={actionsMenu}>\n            <Button\n              className={`${cssPrefix}__button ${cssPrefix}__button--primary`}\n              type=\"primary\"\n              onClick={showActions}\n            >\n              Actions\n              {' '}\n              <DownOutlined />\n            </Button>\n          </Dropdown>\n        </Col>\n      </Row>\n    </Wrapper>\n  );\n};\n","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/animals/components/ContentToolbar.tsx",["599"],"/* eslint-disable no-unused-vars */\nimport {\n  Row, Col, Button, Dropdown, Menu, Tooltip, Modal,\n} from 'antd';\nimport Search from 'antd/lib/input/Search';\nimport {\n  DeleteOutlined, PlusOutlined, QuestionCircleOutlined, DownOutlined,\n} from '@ant-design/icons';\nimport { useNavigate } from 'react-router-dom';\n// eslint-disable-next-line no-use-before-define\nimport React, {\n  ReactElement, ReactHTMLElement, useEffect, useState,\n} from 'react';\nimport styled from 'styled-components';\nimport './ContentToolbar.less';\nimport { kebabCase } from 'lodash';\nimport {\n  actionsMenu1, actionsMenu2, actionsMenu3, actionsMenu4,\n} from '../FtrAnimals.data';\nimport SearchInput from '../../../shared/components/Inputs/SearchInput.component';\nimport { apiCall } from '../../../shared/api/apiWrapper';\n\nconst cssPrefix = 'content-toolbar';\n\nconst { confirm } = Modal;\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n  padding: 10px 0px;\n`;\n\nexport interface ContentToolbarProps {\n  filterSlot?: ReactElement | ReactHTMLElement<HTMLElement>,\n  disableDeleteIcon: boolean;\n  searchKey: string;\n  setSearchKey: (str: string) => void;\n  setSearchKeyFinal: (str: string) => void;\n  onAddIconClicked: (flag: boolean) => void, // eslint-disable-line\n  onDeleteIconClicked: () => void,\n  onActionItemClick: (key: React.Key, value: string) => void, // eslint-disable-line\n  onRefresh: () => void,\n  selectedAnimalId: any,\n}\n\nexport const ContentToolbar = (props: ContentToolbarProps) => {\n  const { selectedAnimalId } = props;\n  const navigate = useNavigate();\n  const { searchKey, setSearchKey, setSearchKeyFinal } = props;\n  const [animalSuggestion, setAnimalSuggestion] = useState([]);\n\n  const addBtnClicked = () => { props.onAddIconClicked(true); };\n\n  const deleteBtnClicked = () => { props.onDeleteIconClicked(); };\n\n  const showActions = () => { };\n\n  const handleActionsMenuClick = ({ key, value }: { key: React.Key, value: string }) => {\n    props.onActionItemClick(key, value);\n  };\n\n  const deleteIconTooltip: string = props.disableDeleteIcon ? 'Please select entries from Table to delete'\n    : 'Delete selected entries';\n\n  const confirmDelete = ( // eslint-disable-line\n    <Tooltip title={deleteIconTooltip}>\n      <Button\n        className={`${cssPrefix}__button`}\n        type=\"dashed\"\n        disabled={props.disableDeleteIcon}\n        // eslint-disable-next-line\n        onClick={showPropsConfirm}\n        icon={<DeleteOutlined />}\n      >\n        Delete\n      </Button>\n    </Tooltip>\n  );\n\n  function showPropsConfirm() {\n    confirm({\n      title: 'Delete',\n      icon: <QuestionCircleOutlined style={{ color: 'red' }} />,\n      content: 'Are you sure you want to delete？',\n      okText: 'Delete',\n      okType: 'danger',\n      cancelText: 'Cancel',\n      onOk() {\n        deleteBtnClicked();\n      },\n    });\n  }\n\n  const actionsMenu = (\n    <Menu>\n      {actionsMenu1(navigate, selectedAnimalId).map(({ key, value, actionFunction }) => (\n        <Menu.Item onClick={() => actionFunction && actionFunction()} key={kebabCase(key)}>{value}</Menu.Item>\n      ))}\n      <Menu.Divider />\n      {actionsMenu2.map(({ key, value }) => (\n        <Menu.Item onClick={() => handleActionsMenuClick({ key, value })} key={kebabCase(key)}>{value}</Menu.Item>\n      ))}\n      <Menu.Divider />\n      {actionsMenu3.map(({ key, value }) => (\n        <Menu.Item onClick={() => handleActionsMenuClick({ key, value })} key={kebabCase(key)}>{value}</Menu.Item>\n      ))}\n      <Menu.Divider />\n      {actionsMenu4.map(({ key, value }) => (\n        <Menu.Item onClick={() => handleActionsMenuClick({ key, value })} key={kebabCase(key)}>{value}</Menu.Item>\n      ))}\n    </Menu>\n  );\n\n  useEffect(() => {\n    const data = {};\n    apiCall(`animal/auto-complete-animal-list?searchText=${searchKey}&limit=20`, 'GET', data)\n      .then((resp: any) => {\n        if (resp.status === 200) {\n          setAnimalSuggestion(resp?.data?.data);\n        }\n      });\n  }, [searchKey]);\n\n  return (\n    <Wrapper className={`${cssPrefix}`}>\n      <Row className={`${cssPrefix}__row`}>\n        <Col className=\"\">\n          <SearchInput\n            placeholder=\"Search Name\"\n            searchKey={searchKey}\n            setSearchKey={setSearchKey}\n            setSearchKeyFinal={setSearchKeyFinal}\n            options={animalSuggestion}\n            value=\"any\"\n          />\n          {/* <Search\n            placeholder=\"Search Name\"\n            className={`${cssPrefix}__search`}\n            autoFocus\n            onSearch={onSearchvalue}\n            enterButton\n          /> */}\n        </Col>\n        <Col className={`${cssPrefix}__col--pull-right ${cssPrefix}__filters`}>\n          {props.filterSlot}\n        </Col>\n        <Col>\n          <Button\n            className={`${cssPrefix}__button`}\n            type=\"dashed\"\n            onClick={addBtnClicked}\n            icon={<PlusOutlined />}\n          >\n            Add\n          </Button>\n        </Col>\n        <Col>\n          <Dropdown overlay={actionsMenu}>\n            <Button\n              className={`${cssPrefix}__button ${cssPrefix}__button--primary`}\n              type=\"primary\"\n              onClick={showActions}\n            >\n              Actions\n              {' '}\n              <DownOutlined />\n            </Button>\n          </Dropdown>\n        </Col>\n      </Row>\n    </Wrapper>\n  );\n};\n","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/dashboard/components/Card.tsx",[],"/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/animals/components/AnimalsAddModal.tsx",["600","601","602","603","604","605","606","607","608","609","610","611","612"],"/* eslint-disable no-use-before-define */\n/* eslint-disable no-unused-vars */\nimport {\n  Button, Col, DatePicker, Divider, Form, FormInstance, Input, InputNumber, message, Modal, Row, Select, Switch, Tooltip, Typography, Upload,\n} from 'antd';\nimport {\n  InfoCircleOutlined, UploadOutlined, LoadingOutlined, ExclamationCircleOutlined, PlusOutlined, EditOutlined,\n} from '@ant-design/icons';\nimport { useEffect, useState } from 'react';\nimport './AnimalsAddModal.less';\nimport Cookies from 'universal-cookie';\nimport { AnimalLocationTooltip, AssignedIDValidationTooltip } from 'src/shared/constants/tooltips.data';\nimport moment, { Moment } from 'moment';\nimport { isEqual } from 'lodash';\nimport { apiCall } from '../../../shared/api/apiWrapper';\nimport { pluralToSingular } from '../../../utils/pluralToSingular';\nimport SingleAvatarUpload from '../../../shared/components/Inputs/SingleAvatarUpload';\nimport PCOMinifiedScreen from './minifiedPcoScreen';\n\nconst { confirm } = Modal;\n\nexport interface AnimalsAddModalProps {\n  pcoList?: any;\n  editRecord?: any | null;\n  visible: boolean;\n  addAnimalLoading: boolean,\n  updateAnimalLoading: boolean;\n  getAnimalFilter: any,\n  selectedPcoId: string,\n  setSelectedPcoId: any;\n  setSearchKey: any;\n  setSearchKeyFinal: any;\n  setSelectedAnimal: any;\n  selectedAnimalId: any;\n  updateAnimalCall: (data: object, callbackFunction: any) => void;\n  setEditRecord: (data: any) => void,\n  setAddModalVisibility: (isModalVisible: boolean) => void;\n  getAnimalListCall: (data: object, callbackFunction: any) => void;\n  addAnimalCall: any;\n  uploadImageCall?: any,\n  deleteImageCall?: any,\n  handleCancel: () => void;\n}\n\ninterface AnimalType {\n  id: string;\n  typeName: string;\n}\n\ninterface AcquisitionWay {\n  id: string;\n  acquisitionWayName: string;\n}\n\nconst cssPrefix = 'animals-add-modal';\nconst { Option } = Select;\n\nconst layout = {\n  labelCol: { span: 8 },\n  wrapperCol: { span: 16 },\n};\n\ntype SizeType = Parameters<typeof Form>[0]['size'];\n\nconst cookies = new Cookies();\n\n/* eslint-disable no-template-curly-in-string */\nconst validateMessages = {\n  required: '${label} is required',\n  types: {\n    email: '${label} is not a valid email',\n    number: '${label} is not a valid number',\n  },\n  number: {\n    range: '${label} must be between ${min} and ${max}',\n  },\n};\n/* eslint-enable no-template-curly-in-string */\n\nconst DEFAULT_LABEL_GENERATE_BTN = 'Let Computer Suggest';\nconst MODIFIED_LABEL_GENERATE_BTN = 'Select another';\n\nexport const AnimalsAddModal = (props: AnimalsAddModalProps) => {\n  const {\n    addAnimalCall, getAnimalListCall, setAddModalVisibility, getAnimalFilter, addAnimalLoading, editRecord,\n    updateAnimalCall, updateAnimalLoading, selectedPcoId, visible, setEditRecord, pcoList, setSelectedPcoId,\n    setSearchKey, setSearchKeyFinal, setSelectedAnimal, selectedAnimalId, uploadImageCall, deleteImageCall,\n  } = props;\n  const [imageState, setImageState] = useState<any>();\n  const [existedImageUrl, setExistedImageUrl] = useState<any>();\n  const [existedImageId, setExistedImageId] = useState<any>();\n  const [, forceUpdate] = useState({});\n  const [saveAnother, setSaveAnother] = useState(false);\n  const [saveAndClone, setSaveAndClone] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const newAnimalType: AnimalType[] = [];\n  const newAcquisitionWay: AcquisitionWay[] = [];\n  const [animalType, setAnimalType] = useState(newAnimalType);\n  const [howAcquired, setHowAcquired] = useState(newAcquisitionWay);\n  const [otherRescueShelter, setOtherRescueShelter] = useState<any>([]);\n  const [aqusitionNameToId, setAqusitionNameToId] = useState<any>({});\n  const [aqusitionIdToName, setAqusitionIdToName] = useState<any>({});\n  const [currentAcquistionWayId, setCurrentAcquistionWayId] = useState('');\n  const [generateNameBtn, setGenerateNameBtn] = useState(DEFAULT_LABEL_GENERATE_BTN);\n  const [noOfAnimal, setNoOfAnimal] = useState(1);\n  const [firstError, setFirstError] = useState<any>('');\n  const [highlightKey, setHighlightKey] = useState<any>('');\n  const [flagReasonKey, setFlagReasonKey] = useState<any>('');\n  const [nameSuggestionLoading, setNameSuggestionLoading] = useState(false);\n  const [form] = Form.useForm();\n\n  const ifEditMode: boolean = Boolean(props.editRecord && props.editRecord.key) || false;\n  const modalTitle: string = editRecord ? 'Edit Animal'\n    : 'Add Animal';\n\n  useEffect(() => {\n    const data = {};\n    apiCall('animaltype/get-animal-types', 'GET', data)\n      .then((resp: any) => {\n        if (resp?.status === 200) {\n          setAnimalType(resp?.data?.data?.animalTypes);\n        }\n      });\n  }, []);\n\n  useEffect(() => {\n    const data = {};\n    apiCall('acquisition-way/get-acquisition-way', 'GET', data)\n      .then((resp: any) => {\n        if (resp?.data?.success) {\n          setHowAcquired(resp?.data?.data?.acquisitionWays);\n          const tempAcquistionWay = resp?.data?.data?.acquisitionWays;\n          const newObj: any = {};\n          const newAcquistionWayIdToName: any = {};\n          tempAcquistionWay.map((currentAcqWay: any, i: any) => {\n            newObj[currentAcqWay.acquisitionWayName] = currentAcqWay.id;\n            newAcquistionWayIdToName[currentAcqWay.id] = currentAcqWay.acquisitionWayName;\n            return newObj;\n          });\n          setAqusitionNameToId(newObj);\n          setAqusitionIdToName(newAcquistionWayIdToName);\n        }\n      });\n    apiCall('other-rescue-shelter/get-other-rescue-shelter', 'GET', {})\n      .then((resp: any) => {\n        setOtherRescueShelter(resp?.data?.data?.otherRescueShelters);\n      });\n  }, []);\n\n  useEffect(() => {\n    setSelectedPcoId('');\n    setFirstError('');\n    setCurrentAcquistionWayId('');\n    setFlagReasonKey(Date.now());\n    form.setFieldsValue({ ...editRecord });\n    if (!visible) {\n      setNoOfAnimal(1);\n      setImageState('');\n      setExistedImageUrl('');\n      setExistedImageId('');\n      form.resetFields();\n      setEditRecord(null);\n    }\n  }, [visible]);\n\n  useEffect(() => {\n    if (!editRecord?.id) {\n      return;\n    }\n    apiCall(`artifact-attachment/get-artifactattachment-byanimal/${editRecord?.id}`, 'GET', {})\n      .then((resp: any) => {\n        setExistedImageUrl(resp?.data?.data?.artifactAttachment?.blobUrl);\n        setExistedImageId(resp?.data?.data?.artifactAttachment?.id);\n      });\n  }, [editRecord]);\n\n  if (ifEditMode) {\n    form.setFieldsValue({\n      ...props.editRecord,\n    });\n  }\n\n  // Can not select days after today\n  const disabledDate = (current: Moment) => current && current > moment().endOf('day');\n\n  // eslint-disable-next-line no-unused-vars\n  const sexValidator: any = ({ getFieldValue }: FormInstance) => ({\n    required: true,\n    validator() {\n      const totalAnimals = Number(getFieldValue('numberOfAnimals') || 0);\n      const maleCnt = Number(getFieldValue('males') || 0);\n      const femaleCnt = Number(getFieldValue('females') || 0);\n      const uknCnt = Number(getFieldValue('unknown') || 0);\n\n      if ((maleCnt + femaleCnt + uknCnt) === totalAnimals) {\n        return Promise.resolve();\n      }\n      return Promise.reject(new Error('Total Count Must Equal the Number of Animals'));\n    },\n  });\n\n  const generateName = () => {\n    const { males, females } = form.getFieldsValue();\n    setNameSuggestionLoading(true);\n    // eslint-disable-next-line no-nested-ternary\n    apiCall(`animal/get-animalname-suggestions?gender=${males ? 'male' : (females ? 'female' : 'unknown')}`, 'GET', {})\n      .then((resp: any) => {\n        setNameSuggestionLoading(false);\n        if (resp.status === 200) {\n          form.setFieldsValue({\n            animalName: resp?.data?.data,\n          });\n          setGenerateNameBtn(MODIFIED_LABEL_GENERATE_BTN);\n        }\n      });\n  };\n\n  const handleUpdate = () => {\n    const data = form.getFieldsValue();\n\n    updateAnimalCall({\n      ...data,\n      id: editRecord?.id,\n      spayedOrNeutered: data.spayedOrNeutered ? data.spayedOrNeutered : false,\n      flag: data?.flag,\n    }, () => {\n      if (imageState) {\n        uploadImageCall({\n          imageState,\n          animalId: [editRecord?.id],\n          Entity: 'Animal',\n          PublicityRank: 0,\n          AttachmentDate: new Date(),\n          AttachmentType: 'Photo',\n        }, () => {\n          setAddModalVisibility(false);\n        });\n      } else if (!imageState && existedImageId) {\n        deleteImageCall({ id: existedImageId }, () => {\n          setAddModalVisibility(false);\n        });\n      } else {\n        setAddModalVisibility(false);\n      }\n    });\n  };\n\n  const onSave = () => {\n    const data = form.getFieldsValue();\n    const { yrs, mos, days } = data;\n\n    const newNewData = {\n      animal: {\n        // assignedAnimalId: data?.assignedAnimalId || 0,\n        animalName: data?.animalName,\n        available: true,\n        breed: data?.breed,\n        color: data?.color,\n        sex: 'male',\n        spayedOrNeutered: data.spayedOrNeutered ? data.spayedOrNeutered : false,\n        lastMilestone: 'string',\n        lastMilestoneDate: data?.intakeDate,\n        description: data?.description,\n        otherIDNo: data?.otherRescueID,\n        flag: data?.flag,\n        flagReason: data?.flagReason,\n        location: data?.location,\n        isDeleted: false,\n        pcoId: data?.personOrRescueId ? data?.personOrRescueId : null,\n        animalTypeId: data?.animalTypeId,\n        tenantId: cookies.get('loginDetails').tenantId,\n      },\n      intakeMileStone: {\n        milestoneType: 'intake',\n        milestoneDate: data?.intakeDate,\n        otherRescueShelterId: data?.otherRescueShelterId,\n        otherRescueIDNo: data?.otherRescueID,\n        amountPaidFee: data?.amountPaid || 0,\n        amountReceivedFee: data?.amountRecieved || 0,\n        notes: data?.intakeNote,\n        acquisitionWayId: data?.acquisitionWayId,\n        acquisitionWayName: aqusitionIdToName[data?.acquisitionWayId],\n        isDeleted: false,\n        pcoId: data?.personOrRescueId ? data?.personOrRescueId : null,\n      },\n      birthMilestone: {\n        isApproxDOB: !data?.birthDateFlag,\n        milestoneType: 'birth',\n        milestoneDate: getActualBirthdate(yrs, mos, days) || data?.birthDate,\n        notes: data?.birthNote,\n      },\n    };\n    const {\n      numberOfAnimals, males, females, unknown,\n    } = data;\n\n    setSearchKey('');\n    setSearchKeyFinal('');\n\n    addAnimalCall({\n      formData: newNewData, noOfAnimal: numberOfAnimals, noOfMale: males || 0, noOfFemale: females || 0, noOfUnknown: unknown || 0,\n    }, (animalIds: any) => {\n      uploadImageCall({\n        imageState,\n        animalId: animalIds,\n        Entity: 'Animal',\n        PublicityRank: 0,\n        AttachmentDate: '2022-02-21 20:14:37.2420000',\n        AttachmentType: 'Photo',\n      }, () => {\n\n      });\n      setSelectedAnimal(animalIds);\n      getAnimalListCall({ ...getAnimalFilter, searchText: '' }, () => console.log('get list of pco'));\n      if (saveAnother) {\n        form.resetFields();\n        setImageState('');\n        setCurrentAcquistionWayId('');\n      } else if (saveAndClone) {\n        console.log('Nothing Happen');\n      } else {\n        setAddModalVisibility(false);\n        setImageState('');\n        form.resetFields();\n        setCurrentAcquistionWayId('');\n      }\n      setSaveAnother(false);\n      setSaveAndClone(false);\n    });\n  };\n\n  const getActualBirthdate = (yrs: number, mos: number, days: number) => {\n    const birthDate = moment().subtract(yrs, 'years').subtract(mos, 'months').subtract(days, 'days');\n    return birthDate;\n  };\n\n  const onCancel = () => {\n    const data = form.getFieldsValue();\n    let isFormChanged = false;\n    if (!editRecord) {\n      isFormChanged = (data?.animalName || data?.breed || data?.color || data.spayedOrNeutered || data?.description\n        || data?.otherRescueID || data?.flag || data?.flagReason || data?.location || data?.personOrRescue\n        || data?.otherRescueID || data?.otherRescueID || data?.amountPaid || data?.amountRecieved\n        || data?.intakeNote || data?.personOrRescue || data?.actualAge || data?.birthNote);\n    } else {\n      const {\n        animalName, animalTypeId, breed, sex, color, spayedOrNeutered, location, flag, flagReason, description, upload,\n      } = editRecord;\n      const intialRecord = {\n        animalName, animalTypeId, breed, sex, color, spayedOrNeutered, location, flag, flagReason, description, upload,\n      };\n      isFormChanged = !(isEqual(intialRecord, form.getFieldsValue())) || imageState || (!existedImageUrl && existedImageId);\n    }\n    if (!isFormChanged) {\n      setImageState('');\n      form.resetFields();\n      props.handleCancel();\n      return;\n    }\n\n    confirm({\n      title: 'Do you want to save your changes?',\n      icon: <ExclamationCircleOutlined />,\n      okText: 'Yes',\n      okType: 'danger',\n      cancelText: 'No',\n      onOk() {\n        editRecord ? handleUpdate() : form.submit();\n      },\n      onCancel() {\n        setImageState('');\n        form.resetFields();\n        props.handleCancel();\n      },\n    });\n  };\n\n  const validationCheck = () => {\n    let errorField = '';\n    setFirstError('');\n    setTimeout(() => {\n      form.getFieldsError()?.map((data: any) => {\n        if (errorField) {\n          return '';\n        }\n        if (data?.errors[0]) {\n          errorField = data?.name[0];\n          setFirstError(data?.name[0]);\n        }\n        return '';\n      });\n      if (errorField) {\n        message.error({\n          content: 'Correct Highlighted Fields',\n          style: {\n            marginTop: '2vh',\n          },\n          key: 'deletedable',\n        });\n      }\n    }, 500);\n  };\n\n  useEffect(() => {\n    const formField = form.getFieldsValue();\n    form.setFieldsValue({ ...formField, personOrRescueId: selectedPcoId });\n  }, [selectedPcoId]);\n\n  const modalContent = (\n    <Form\n      id=\"animal-form\"\n      className={`${cssPrefix}__form`}\n      form={form}\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...layout}\n      onFinish={() => { editRecord ? handleUpdate() : onSave(); }}\n      name=\"nest-messages\"\n      scrollToFirstError\n      validateMessages={validateMessages}\n      size={'small' as SizeType}\n    >\n      <Row>\n        <Col className={`${cssPrefix}__two-col-lyt`}>\n          {!editRecord && (\n            <Form.Item\n              name=\"numberOfAnimals\"\n              label=\"Number of Animals\"\n              initialValue={1}\n              rules={[{ required: true, type: 'number', min: 1 }]}\n            >\n              <InputNumber\n                ref={(ref) => (firstError === 'numberOfAnimals') && ref && ref.focus()}\n                onChange={(data) => setNoOfAnimal(data)}\n                defaultValue={1}\n                min={1}\n              />\n            </Form.Item>\n          )}\n          <Form.Item name=\"animalName\" label=\"Name or Group Name\" rules={[{ required: true }]}>\n            <Row gutter={8}>\n              <Col span={12}>\n                <Form.Item name=\"animalName\" style={{ marginBottom: '0px' }}>\n                  <Input\n                    ref={(ref) => (firstError === 'animalName') && ref && ref.focus({ cursor: 'end' })}\n                    placeholder=\"Enter Animal/Group Name\"\n                  />\n                </Form.Item>\n              </Col>\n              <Col span={12}>\n                <Button disabled={(noOfAnimal > 1)} key=\"generateName\" type=\"default\" loading={loading} onClick={() => generateName()}>\n                  {generateNameBtn}\n                  {nameSuggestionLoading && <LoadingOutlined spin />}\n                </Button>\n              </Col>\n            </Row>\n          </Form.Item>\n          <Form.Item initialValue={animalType[0]?.id} name=\"animalTypeId\" label=\"Animal Type\" rules={[{ required: true }]}>\n            <Select\n              ref={(ref) => (firstError === 'animalTypeId') && ref && ref.focus()}\n              placeholder=\"Select a Animal Type\"\n            >\n              {animalType.map((data) => (\n                <Option key={data.id} value={data.id} onChange={() => forceUpdate({})}>{(noOfAnimal > 1) ? data.typeName : pluralToSingular(data.typeName)}</Option>\n              ))}\n            </Select>\n          </Form.Item>\n          <Form.Item name=\"breed\" label=\"Breed or Species\" rules={[{ required: true }]}>\n            <Input\n              ref={(ref) => (firstError === 'breed') && ref && ref.focus()}\n              placeholder=\"Enter Breed or Species\"\n            />\n            {/* <Select>\n              {animalBreed.dog.map(({ key, value }: any) => (\n                <Option key={kebabCase(key)} value={key}>{value}</Option>\n              ))}\n            </Select> */}\n          </Form.Item>\n          {!editRecord && (\n            <Form.Item\n              name=\"gender\"\n              label=\"Sex\"\n              style={{ marginBottom: 10 }}\n              dependencies={['numberOfAnimals']}\n              rules={[\n                sexValidator,\n              ]}\n            >\n              <Row>\n                <Col style={{ marginRight: '5px', marginBottom: '5px' }}>\n                  <div>Males</div>\n                  <Form.Item name=\"males\" style={{ marginBottom: '0px' }}>\n                    <InputNumber\n                      defaultValue={0}\n                      min={0}\n                    />\n                  </Form.Item>\n                </Col>\n                <Col style={{ marginRight: '5px', marginBottom: '5px' }}>\n                  <div>Females</div>\n                  <Form.Item name=\"females\" style={{ marginBottom: '0px' }}>\n                    <InputNumber\n                      defaultValue={0}\n                      min={0}\n                    />\n                  </Form.Item>\n                </Col>\n                <Col style={{ marginBottom: '5px' }}>\n                  <div>Unknown</div>\n                  <Form.Item name=\"unknown\" style={{ marginBottom: '0px' }}>\n                    <InputNumber\n                      defaultValue={0}\n                      min={0}\n                    />\n                  </Form.Item>\n                </Col>\n              </Row>\n            </Form.Item>\n          )}\n          {editRecord && (\n            <Form.Item name=\"sex\" label=\"Sex\" rules={[{ required: true }]}>\n              <Select>\n                {[{ id: 'Male', label: 'Male' }, { id: 'Female', label: 'Female' }, { id: 'Unknown', label: 'Unknown' }].map((data) => (\n                  <Option key={data.id} value={data.id} onChange={() => forceUpdate({})}>{data.label}</Option>\n                ))}\n              </Select>\n            </Form.Item>\n          )}\n          {/* <Form.Item\n            name=\"assignedAnimalId\"\n            label=\"Your Assigned ID\"\n            rules={[\n              {\n                pattern: /^[0-9]{1,40}$/,\n                message: 'Assigned ID should be number',\n              },\n            ]}\n          >\n            <Input\n              placeholder=\"Enter ID\"\n              suffix={(\n                <Tooltip overlayClassName={`${cssPrefix}__form__tooltip`} placement=\"bottom\" title={AssignedIDValidationTooltip}>\n                  <Typography.Link><InfoCircleOutlined /></Typography.Link>\n                </Tooltip>\n              )}\n            />\n          </Form.Item> */}\n          <Form.Item name=\"color\" label=\"Color\" rules={[{ type: 'string', max: 30 }]}>\n            <Input placeholder=\"Enter Color\" />\n          </Form.Item>\n          <Form.Item name=\"description\" label=\"My Story\">\n            <Input.TextArea placeholder=\"Input a story\" />\n          </Form.Item>\n        </Col>\n        <Col className={`${cssPrefix}__two-col-lyt`}>\n          {/* <Form.Item\n            name=\"upload\"\n            label=\"Upload\"\n            valuePropName=\"fileList\"\n            getValueFromEvent={normFile}\n          >\n            <Upload name=\"logo\" action=\"/upload.do\" listType=\"picture\">\n              <Button icon={<UploadOutlined />}>Browse for Picture</Button>\n            </Upload>\n          </Form.Item> */}\n          <SingleAvatarUpload\n            setExistedImageUrl={setExistedImageUrl}\n            existedImageUrl={existedImageUrl}\n            visible={props.visible}\n            setImageState={setImageState}\n            imageState={imageState}\n          />\n          <Form.Item name=\"spayedOrNeutered\" label=\"Spayed or Neutered\" valuePropName=\"checked\">\n            <Switch onChange={() => forceUpdate({})} />\n          </Form.Item>\n          <Form.Item name=\"location\" label=\"Location\" rules={[{ type: 'string', max: 30 }]}>\n            <Input\n              placeholder=\"Enter Location\"\n              suffix={(\n                <Tooltip overlayClassName={`${cssPrefix}__form__tooltip`} placement=\"bottom\" title={AnimalLocationTooltip} overlayInnerStyle={{ minWidth: '250px', maxWidth: '250px' }}>\n                  <Typography.Link><InfoCircleOutlined /></Typography.Link>\n                </Tooltip>\n              )}\n            />\n          </Form.Item>\n          <Form.Item label=\"Flag\" style={{ marginBottom: 0 }}>\n            <Row gutter={8}>\n              <Col span={4}>\n                <Form.Item name=\"flag\" label=\"\" valuePropName=\"checked\">\n                  <Switch\n                    onChange={(data: any) => {\n                      forceUpdate({});\n                      setFlagReasonKey(Date.now());\n                      if (!data) {\n                        const formField = form.getFieldsValue();\n                        form.setFieldsValue({ ...formField, flagReason: '' });\n                      }\n                    }}\n                  />\n                </Form.Item>\n              </Col>\n              <Col span={20}>\n                <Form.Item key={flagReasonKey} name=\"flagReason\" label=\"Reason\" rules={[{ required: form.getFieldValue('flag'), type: 'string' }]}>\n                  <Input\n                    key={flagReasonKey}\n                    disabled={!(form.getFieldValue('flag'))}\n                    placeholder=\"Reason For Flag\"\n                  />\n                </Form.Item>\n              </Col>\n            </Row>\n          </Form.Item>\n        </Col>\n      </Row>\n\n      {!editRecord && (<Divider className={`${cssPrefix}__form__divider`} orientation=\"left\">Birth Milestone</Divider>)}\n      {!editRecord && (\n        <Row>\n          <Col className={`${cssPrefix}__two-col-lyt`}>\n            <Form.Item\n              name=\"approxAge\"\n              label=\"Approximate Age\"\n              style={{ marginBottom: 10 }}\n              key={form.getFieldValue('birthDateFlag')}\n              rules={[\n                ({ getFieldValue }) => ({\n                  required: !getFieldValue('birthDateFlag'),\n                  validator() {\n                    const actualDataflag = getFieldValue('birthDateFlag');\n                    if (actualDataflag) {\n                      return Promise.resolve();\n                    }\n                    const [yrs, mos, days] = [getFieldValue('yrs') || 0, getFieldValue('mos') || 0, getFieldValue('days') || 0];\n                    const birthDate = moment().subtract(yrs, 'years').subtract(mos, 'months').subtract(days, 'days');\n                    if (!birthDate) {\n                      return Promise.reject(new Error('At least fill any one input'));\n                    }\n                    // if (!Number(yrs) || !Number(mos) || !Number(days)) {\n                    //   return Promise.reject(new Error('All inputs should be number'));\n                    // }\n                    const [flag] = [getFieldValue('birthDateFlag')];\n                    if (flag || (!flag && (yrs > 0 || mos > 0 || days > 0))) {\n                      return Promise.resolve();\n                    }\n                    return Promise.reject(new Error('Either Approximate Age or Birth Date must be specified'));\n                  },\n                }),\n              ]}\n            >\n              <Row>\n                <Col style={{ marginRight: '5px', marginBottom: '5px' }}>\n                  <div>yrs</div>\n                  <Form.Item\n                    name=\"yrs\"\n                    style={{ marginBottom: '0px' }}\n                  >\n                    <InputNumber ref={(ref) => (firstError === 'yrs') && ref && ref.focus()} defaultValue={0} min={0} max={100} disabled={form.getFieldValue('birthDateFlag')} />\n                  </Form.Item>\n                </Col>\n                <Col style={{ marginRight: '5px', marginBottom: '5px' }}>\n                  <div>mos</div>\n                  <Form.Item\n                    name=\"mos\"\n                    style={{ marginBottom: '0px' }}\n                  >\n                    <InputNumber defaultValue={0} min={0} max={12} disabled={form.getFieldValue('birthDateFlag')} />\n                  </Form.Item>\n                </Col>\n                <Col style={{ marginBottom: '5px' }}>\n                  <div>days</div>\n                  <Form.Item\n                    name=\"days\"\n                    style={{ marginBottom: '0px' }}\n                  >\n                    <InputNumber defaultValue={0} min={0} max={31} disabled={form.getFieldValue('birthDateFlag')} />\n                  </Form.Item>\n                </Col>\n              </Row>\n            </Form.Item>\n            <Form.Item\n              name=\"actualAge\"\n              label=\"or Actual Birth Date\"\n              style={{ marginBottom: 0 }}\n              key={`${form.getFieldValue('birthDateFlag')}-key`}\n              rules={[\n                ({ getFieldValue }) => ({\n                  required: getFieldValue('birthDateFlag'),\n                  validator() {\n                    // const [yrs, mos, days] = [getFieldValue('yrs') || 0, getFieldValue('mos') || 0, getFieldValue('days') || 0];\n                    const [flag, date] = [getFieldValue('birthDateFlag'), getFieldValue('birthDate')];\n                    if ((flag && date) || !flag) {\n                      return Promise.resolve();\n                    }\n                    return Promise.reject(new Error('Either Approximate Age or Birth Date must be specified'));\n                  },\n                }),\n              ]}\n            >\n              <Row gutter={8}>\n                <Col span={4} style={{ marginBottom: '5px' }}>\n                  <Form.Item name=\"birthDateFlag\" label=\"\" valuePropName=\"checked\" style={{ marginBottom: '0px' }}>\n                    <Switch defaultChecked={false} onChange={() => forceUpdate({})} />\n                  </Form.Item>\n                </Col>\n                <Col span={20} style={{ marginBottom: '5px' }}>\n                  <Form.Item name=\"birthDate\" label=\"\" rules={[{ type: 'date' }]} style={{ marginTop: 2, marginBottom: 0 }}>\n                    <DatePicker format=\"MM-DD-yyyy\" disabledDate={disabledDate} disabled={!form.getFieldValue('birthDateFlag')} />\n                  </Form.Item>\n                </Col>\n              </Row>\n            </Form.Item>\n          </Col>\n          <Col className={`${cssPrefix}__two-col-lyt`}>\n            <Form.Item name=\"birthNote\" label=\"Birth Notes\">\n              <Input.TextArea placeholder=\"Input any birth notes\" />\n            </Form.Item>\n          </Col>\n        </Row>\n      )}\n\n      {!editRecord && (<Divider className={`${cssPrefix}__form__divider`} orientation=\"left\">Intake Milestone</Divider>)}\n      {!editRecord && (\n        <Row>\n          <Col className={`${cssPrefix}__two-col-lyt`}>\n            <Form.Item\n              name=\"intakeDate\"\n              label=\"Date of Intake\"\n              initialValue={moment()}\n              rules={[\n                ({ getFieldValue }) => ({\n                  required: true,\n                  type: 'date',\n                  validator(_, value) {\n                    if (!value) {\n                      return Promise.reject(new Error('Enter date of intake'));\n                    }\n                    const [yrs, mos, days] = [getFieldValue('yrs') || 0, getFieldValue('mos') || 0, getFieldValue('days') || 0];\n                    const actualBirthDate = getActualBirthdate(yrs, mos, days);\n                    const isBirthDate = getFieldValue('birthDateFlag');\n                    if (isBirthDate && (getFieldValue('birthDate') >= value)) {\n                      return Promise.reject(new Error('Intake date must be greater or same as Birth Date'));\n                    }\n                    if (!isBirthDate && (actualBirthDate >= value)) {\n                      return Promise.reject(new Error('Intake date must be greater or same as Birth Date'));\n                    }\n                    return Promise.resolve();\n                  },\n                }),\n              ]}\n            >\n              <DatePicker format=\"MM-DD-yyyy\" disabledDate={disabledDate} />\n            </Form.Item>\n            <Form.Item\n              initialValue={howAcquired[0]?.id}\n              name=\"acquisitionWayId\"\n              label=\"How Acquired\"\n              rules={[{ required: true }]}\n            >\n              <Select\n                ref={(ref) => (firstError === 'acquisitionWayId') && ref && ref.focus()}\n                placeholder=\"Select a Acquistion Type\"\n                onChange={(data: any) => setCurrentAcquistionWayId(data)}\n              >\n                {howAcquired.map((data) => (\n                  <Option key={data.id} value={data.id}>{data.acquisitionWayName}</Option>\n                ))}\n              </Select>\n            </Form.Item>\n            <Row>\n              <Col lg={24}>\n                {[aqusitionNameToId['Owner Surrender'], aqusitionNameToId?.Person, aqusitionNameToId?.Public].includes(currentAcquistionWayId) && (\n                  <>\n                    <PCOMinifiedScreen setFirstError={setFirstError} />\n                    <Form.Item\n                      name=\"personOrRescueId\"\n                      key={currentAcquistionWayId}\n                      style={{ minHeight: '0px !important', marginBottom: '20px' }}\n                      rules={[\n                        {\n                          required: [aqusitionNameToId['Owner Surrender'], aqusitionNameToId?.Person].includes(currentAcquistionWayId),\n                          message: 'Person Or Rescue is required',\n                        },\n                      ]}\n                    >\n                      <Select\n                        style={{ display: 'none' }}\n                        disabled\n                        ref={(ref) => (firstError === 'personOrRescue') && ref && ref.focus()}\n                        placeholder=\"Select a Person or Rescue\"\n                        value={selectedPcoId}\n                      >\n                        {pcoList.map((data: any) => (\n                          <Option\n                            key={data?.id}\n                            value={data?.id}\n                            onChange={() => forceUpdate({})}\n                          >\n                            {`${data?.lastName} ${data?.firstName} / ${data?.street} / ${data?.city} / ${data?.state}`}\n                          </Option>\n                        ))}\n                      </Select>\n                    </Form.Item>\n                  </>\n                )}\n              </Col>\n              {/* <PlusOutlined style={{ marginLeft: '10px', marginTop: '5px', cursor: 'pointer' }} />\n              <EditOutlined style={{ marginLeft: '10px', marginTop: '5px', cursor: 'pointer' }} /> */}\n            </Row>\n            {(currentAcquistionWayId === aqusitionNameToId['Other Rescue/Shelter/Sanctuary']) && (\n              <Form.Item\n                initialValue={otherRescueShelter[0]?.id}\n                name=\"otherRescueShelterId\"\n                label=\"Other Rescue Shelters\"\n                rules={[\n                  { required: true },\n                ]}\n              >\n                <Select\n                  ref={(ref) => (firstError === 'otherRescueShelterId') && ref && ref.focus()}\n                  placeholder=\"Select a Other Rescue Shelters\"\n                >\n                  {otherRescueShelter?.map((data: any) => (\n                    <Option\n                      key={data?.id}\n                      value={data?.id}\n                      onChange={() => forceUpdate({})}\n                    >\n                      {data?.otherRescueShelterName}\n                    </Option>\n                  ))}\n                </Select>\n              </Form.Item>\n            )}\n            <Form.Item name=\"otherRescueID\" label=\"ID No. at Other Rescue\">\n              <Input\n                disabled={(currentAcquistionWayId !== aqusitionNameToId['Other Rescue/Shelter/Sanctuary'])}\n                placeholder=\"Enter ID No. used at other rescue\"\n              />\n            </Form.Item>\n          </Col>\n          <Col className={`${cssPrefix}__two-col-lyt`}>\n            <Form.Item\n              name=\"amountPaid\"\n              label=\"Amount Paid By You\"\n              rules={[\n                ({ getFieldValue }) => ({\n                  type: 'number',\n                  validator(_, value) {\n                    // Either amountPaid should be there or amountRecieved\n                    const amountPaid = getFieldValue('amountPaid');\n                    const amountRecieved = getFieldValue('amountRecieved');\n                    if (amountRecieved) {\n                      return Promise.resolve();\n                    }\n                    if (!amountPaid && !amountRecieved) {\n                      return Promise.resolve();\n                    }\n                    if (Number(amountPaid) && Number(amountRecieved)) {\n                      return Promise.reject(new Error('Either Amount Paid or Received should be specified. Not Both.'));\n                    }\n                    if (!Number(amountPaid) && !Number(amountRecieved)) {\n                      return Promise.reject(new Error('Amount Received By You must be numeric'));\n                    }\n                    return Promise.resolve();\n                  },\n                }),\n              ]}\n            >\n              <Input\n                name=\"amountPaid\"\n                onClick={() => setFirstError('')}\n                onChange={() => forceUpdate({})}\n                disabled={form.getFieldValue('amountRecieved')}\n                ref={(ref) => (firstError === 'amountPaid') && ref && ref.focus()}\n              />\n            </Form.Item>\n            <Form.Item\n              name=\"amountRecieved\"\n              label=\"Or Amount Received By You\"\n              rules={[\n                ({ getFieldValue }) => ({\n                  type: 'number',\n                  validator(_, value) {\n                    // Either amountPaid should be there or amountRecieved\n                    const amountPaid = getFieldValue('amountPaid');\n                    const amountRecieved = getFieldValue('amountRecieved');\n                    if (amountPaid) {\n                      return Promise.resolve();\n                    }\n                    if (!amountPaid && !amountRecieved) {\n                      return Promise.resolve();\n                    }\n                    if (Number(amountPaid) && Number(amountRecieved)) {\n                      return Promise.reject(new Error('Either Amount Paid or Received should be specified. Not Both.'));\n                    }\n                    if (!Number(amountPaid) && !Number(amountRecieved)) {\n                      return Promise.reject(new Error('Amount Received By You must be numeric'));\n                    }\n                    return Promise.resolve();\n                  },\n                }),\n              ]}\n            >\n              <Input\n                name=\"amountRecieved\"\n                onClick={() => setFirstError('')}\n                onChange={() => forceUpdate({})}\n                disabled={form.getFieldValue('amountPaid')}\n                ref={(ref) => (firstError === 'amountReceived') && ref && ref.focus()}\n              />\n            </Form.Item>\n            <Form.Item name=\"intakeNote\" label=\"Intake Notes\">\n              <Input.TextArea placeholder=\"Enter any Intake Notes\" />\n            </Form.Item>\n          </Col>\n        </Row>\n      )}\n    </Form>\n  );\n\n  const footerContent = [\n    <Button key=\"back\" onClick={onCancel}>\n      Cancel\n    </Button>,\n    <Button\n      style={{ display: editRecord ? 'none' : 'inline' }}\n      key=\"saveAndClone\"\n      type=\"primary\"\n      loading={loading}\n      onClick={() => {\n        setSaveAndClone(true);\n        form.submit();\n      }}\n    >\n      Save and Clone\n      {saveAndClone && addAnimalLoading && <LoadingOutlined spin />}\n    </Button>,\n    <Button\n      style={{ display: editRecord ? 'none' : 'inline' }}\n      key=\"saveAnother\"\n      type=\"primary\"\n      loading={loading}\n      onClick={() => {\n        setSaveAnother(true);\n        form.submit();\n      }}\n    >\n      Save and Add Another\n      {saveAnother && addAnimalLoading && <LoadingOutlined spin />}\n    </Button>,\n    <Button\n      form=\"animal-form\"\n      key=\"submit\"\n      type=\"primary\"\n      htmlType=\"submit\"\n      loading={loading}\n      onClick={() => {\n        validationCheck();\n      }}\n    >\n      Save\n      {(!saveAndClone && !saveAnother) && (updateAnimalLoading || addAnimalLoading) && <LoadingOutlined spin />}\n    </Button>,\n  ];\n\n  useEffect(() => {\n    forceUpdate({});\n  }, []);\n\n  return (\n    <div className={`${cssPrefix}`}>\n      <Modal\n        className={`${cssPrefix}__modal`}\n        centered\n        title={<span className={`${cssPrefix}__modal__title`}>{modalTitle}</span>}\n        visible={props.visible}\n        onOk={() => onSave()}\n        onCancel={onCancel}\n        footer={footerContent}\n      >\n        {modalContent}\n      </Modal>\n    </div>\n  );\n};\n","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/users/components/UsersList.tsx",["613"],"import { useState, FC, useEffect } from 'react';\nimport {\n  Row, Col, Button, message,\n} from 'antd';\nimport moment from 'moment';\nimport Cookies from 'universal-cookie';\nimport { PlusOutlined } from '@ant-design/icons';\nimport CustomTable from '../../../shared/components/CustomTable';\nimport AddUserForm from '../components/AddUserForm';\nimport { apiCall } from '../../../shared/api/apiWrapper';\nimport alertConstant from '../../../shared/constants/alert.json';\n\ninterface UserListProps {\n  loading: boolean,\n  inviteUserLoading: boolean,\n  userList: any,\n  inviteUserCall: any,\n  updateUser: any,\n  getUserListCall: any,\n  deleteUser: any,\n  viewInactive: any,\n  setViewInactive: any\n}\n\nconst cookies = new Cookies();\nconst cssPrefix = 'ftr-users';\n\nconst UserList: FC<UserListProps> = (newUserListProps) => {\n  const {\n    loading, userList, updateUser, inviteUserCall, getUserListCall, deleteUser, viewInactive, setViewInactive, inviteUserLoading,\n  } = newUserListProps;\n  const [editModal, setEditModal] = useState(false);\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  // eslint-disable-next-line\n  const [editData, setEditData] = useState(Object);\n  const [userForm, setUserForm] = useState<any>({});\n  const [tempForm, setTempForm] = useState('');\n  const [userType, setUserType] = useState('');\n  const [sendLoading, setSendLoading] = useState(false);\n\n  useEffect(() => {\n    setUserType(cookies.get('loginDetails')?.userType);\n  }, []);\n\n  const showModal = () => {\n    setTempForm('');\n    setIsModalVisible(true);\n  };\n\n  const handleUserDelete = (userId: string) => {\n    deleteUser({ userId }, () => {\n      message.success({\n        content: alertConstant.user_delete_success,\n        style: {\n          marginTop: '2vh',\n        },\n        key: 'updatable',\n      });\n      getUserListCall(viewInactive, () => console.log('Getting user list'));\n    });\n  };\n\n  // eslint-disable-next-line\n  const setEditModalOpen = (value: boolean, data: any) => {\n    setEditModal(true);\n    setTempForm(data);\n    setEditData(data);\n    setUserForm({ ...data });\n    setIsModalVisible(value);\n  };\n\n  const sendInvitation = (record: any) => {\n    setSendLoading(record?.id);\n    apiCall(`user/resend-invitation?email=${record?.email}`, 'POST', {})\n      .then((resp: any) => {\n        setSendLoading(false);\n        if (resp.status === 200) {\n          const messageText = resp?.data?.errors?.[0] || resp?.data?.message;\n          message.success({\n            content: (messageText),\n            style: {\n              marginTop: '2vh',\n            },\n            key: 'updatable',\n          });\n        }\n      });\n  };\n\n  return (\n    <>\n      <div style={{ marginTop: '0px' }}>\n        <AddUserForm\n          inviteUserLoading={inviteUserLoading}\n          viewInactive={viewInactive}\n          userForm={userForm}\n          setUserForm={setUserForm}\n          editModal={editModal}\n          setEditModal={setEditModal}\n          tempForm={tempForm}\n          isModalVisible={isModalVisible}\n          setIsModalVisible={(data) => setIsModalVisible(data)}\n          getUserListCall={getUserListCall}\n          onSubmit={editModal ? updateUser : inviteUserCall}\n        />\n        <Row style={{ marginBottom: '10px', alignItems: 'center' }}>\n          <Col flex={3}>\n            <Row justify=\"start\" style={{ width: '200px' }}>\n              {/* <Input\n                 onChange={(e)=>onSearch(e.target.value)}\n                 placeholder=\"Search Animal Type\"/> */}\n            </Row>\n          </Col>\n          <Col flex={3}>\n            <Row justify=\"end\">\n              {/* <Typography.Link><PlusOutlined style={{ fontSize: '150%'}} onClick={showModal}/></Typography.Link> */}\n              <Button\n                className={`${cssPrefix}__button`}\n                type=\"dashed\"\n                onClick={() => setViewInactive(!viewInactive)}\n              >\n                View\n                {(viewInactive ? ' Active ' : ' Inactive ')}\n                Users\n              </Button>\n              <Button\n                className={`${cssPrefix}__button`}\n                type=\"dashed\"\n                onClick={showModal}\n                icon={<PlusOutlined />}\n              >\n                Invite New\n              </Button>\n            </Row>\n          </Col>\n        </Row>\n        <CustomTable\n          config={{\n            rowSelection: 'none',\n            sendLoading,\n            sendInvitation,\n          }}\n          isNotEditable={viewInactive || userType?.toLocaleLowerCase() !== 'administrator'}\n          showHeader\n          selectable={false}\n          tableData={userList}\n          tableType=\"Users\"\n          isLoading={loading}\n          columnData={[{\n            title: 'Name',\n            width: '20%',\n            render: (_: any, record: any) => `${record.firstName} ${record.lastName}`,\n          },\n          {\n            title: 'Username',\n            width: '12%',\n            render: (_: any, record: any) => (record?.status ? `${record.userName}` : 'Invited'),\n          },\n          {\n            title: 'Email',\n            width: '15%',\n            render: (_: any, record: any) => (record.email),\n          },\n          {\n            title: 'Role',\n            width: '15%',\n            render: (_: any, record: any) => (\n              record.role\n            ),\n          },\n          {\n            title: 'Date Active',\n            width: '10%',\n            render: (_: any, record: any) => (record.dateActive ? moment(record.dateActive).format('MMM DD YYYY') : ''),\n          },\n          {\n            title: 'Date Inactive',\n            width: '10%',\n            render: (_: any, record: any) => (record.dateInactive ? moment(record.dateInactive).format('MMM DD YYYY') : ''),\n          },\n          ]}\n          delete={handleUserDelete}\n          setEditModalOpen={setEditModalOpen}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default UserList;\n","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/customization/components/OrganizationInfo.tsx",["614","615","616","617","618","619","620"],"/* eslint-disable no-template-curly-in-string */\nimport { useEffect, useState } from 'react';\nimport {\n  Input, Row, Col, Form, Button, message, Select, Modal,\n} from 'antd';\nimport { kebabCase } from 'lodash';\nimport { ExclamationCircleOutlined } from '@ant-design/icons';\nimport NumberFormat from 'react-number-format';\nimport alertConstant from '../../../shared/constants/alert.json';\n\nimport { apiCall } from '../../../shared/api/apiWrapper';\n\nconst { confirm } = Modal;\n\nconst { Option } = Select;\n\ntype ValidateStatus = Parameters<typeof Form.Item>[0]['validateStatus'];\n\ninterface Item {\n  id: string;\n  volunteerActivity: string;\n}\n\ninterface CountryNameInterface {\n  id: string;\n  countryName: string;\n}\n\nconst OrganizationInfo = () => {\n  const newItem: Item[] = [];\n  const newCountryNameInterface: CountryNameInterface[] = [];\n  const [organizationInfo, setOrganizationInfo] = useState(Object);\n  const [tenentId, setTenentId] = useState(0);\n  const [countryCode, setCountryCode] = useState('1');\n  const [countryName, setCountryName] = useState(newCountryNameInterface);\n  // eslint-disable-next-line\n  const [selectCountry, setSelectCountry] = useState('');\n  // eslint-disable-next-line\n  const [selectCountryId, setSelectCountryId] = useState('');\n  const [editForm, setEditForm] = useState(false);\n  // eslint-disable-next-line no-unused-vars\n  const [validationStatus, setValidationStatus] = useState<{ validateStatus?: ValidateStatus; }>({});\n  // eslint-disable-next-line\n  const [volunteerActivitiesList, setOrganizationInfoList] = useState(newItem);\n  // eslint-disable-next-line\n  const [searchAnimalTypeList, setSearchAnimalTypeList] = useState(newItem);\n  const [editData, setEditData] = useState(false);\n  const [highlightKey, setHighlightKey] = useState<any>('');\n  const [firstError, setFirstError] = useState<any>();\n  const [tempForm, setTempForm] = useState({});\n  // eslint-disable-next-line no-unused-vars\n  const [newKey, setNewKey] = useState(Date.now());\n  const [form] = Form.useForm();\n\n  useEffect(() => {\n    const data = {};\n    apiCall('country/get-country', 'GET', data)\n      .then((resp: any) => {\n        if (resp?.data?.success) {\n          setCountryName(resp?.data?.data?.countries);\n        }\n      });\n  }, []);\n\n  useEffect(() => {\n    let errorField = '';\n    setTimeout(() => {\n      form.getFieldsError()?.map((data: any) => {\n        if (errorField) {\n          return '';\n        }\n        if (data?.errors[0]) {\n          errorField = data?.name[0];\n          setFirstError(data?.name[0]);\n        }\n        return '';\n      });\n    }, 500);\n  }, [highlightKey]);\n\n  const validationCheck = () => {\n    let errorField = '';\n    setFirstError('');\n    setTimeout(() => {\n      form.getFieldsError()?.map((data: any) => {\n        if (errorField) {\n          return '';\n        }\n        if (data?.errors[0]) {\n          errorField = data?.name[0];\n          setFirstError(data?.name[0]);\n        }\n        return '';\n      });\n    }, 500);\n  };\n\n  // useEffect(() => {\n  //   // eslint-disable-next-line\n  //   console.log(countryName, organizationInfo?.countryId, 'ddddddd');\n  //   // eslint-disable-next-line\n  //   const selectedCountryName = countryName.find(o => o.id == organizationInfo.countryId);\n  //   setOrganizationInfo({ ...organizationInfo, countryId: selectedCountryName?.countryName });\n  //   console.log(selectedCountryName, 'selectedCountryName');\n  // }, [organizationInfo.countryId]);\n\n  useEffect(() => {\n    const data = {};\n    setSelectCountry('');\n    apiCall('tenant/get-tenant-info', 'GET', data)\n      .then((resp: any) => {\n        if (resp?.data?.success) {\n          form.setFieldsValue(resp?.data?.data?.tenant);\n          // setOrganizationInfo(resp?.data?.data?.tenant);\n          setTenentId(resp?.data?.data?.id);\n          // eslint-disable-next-line\n          const selectedCountryName = countryName.find(o => o.id == resp?.data?.data?.tenant.countryId);\n          setOrganizationInfo({ ...resp?.data?.data?.tenant, countryId: selectedCountryName?.countryName });\n          console.log(selectedCountryName, 'selectedCountryName');\n        }\n      });\n    if (!editData) {\n      setEditData(false);\n    }\n  }, [editData]);\n\n  const onChangeCountry = (value: any) => {\n    setCountryCode(value);\n  };\n\n  const onFinishFailed = () => {\n    message.error({\n      content: alertConstant.validation_error_massage,\n      style: {\n        marginTop: '2vh',\n      },\n      key: 'updatable',\n    });\n  };\n\n  const submitForm = async () => {\n    console.log(organizationInfo, 'dfsssssssss');\n    const updatedData = {\n      name: organizationInfo?.name,\n      city: organizationInfo?.city,\n      countryId: selectCountry !== '' ? selectCountry : localStorage.getItem('countryId'),\n      emailAddress: organizationInfo?.emailAddress,\n      phone: organizationInfo?.phone,\n      tenantAcronym: organizationInfo?.tenantAcronym,\n      state: organizationInfo?.state,\n      street: organizationInfo?.street,\n      website: organizationInfo?.website,\n      zip: organizationInfo?.zip,\n    };\n    if (editForm) {\n      apiCall(`tenant/update-tenant/${tenentId}`, 'post', updatedData)\n        .then((resp: any) => {\n          if (resp?.data?.success) {\n            setEditData(false);\n            localStorage.setItem('countryId', (updatedData?.countryId || ''));\n            message.success({\n              content: resp?.data?.message || alertConstant.organization_info_update_success,\n              style: {\n                marginTop: '2vh',\n              },\n              key: 'updatable',\n            });\n          }\n        });\n    }\n    setEditForm(!editForm);\n    setNewKey(Date.now());\n  };\n\n  const validateMessages = {\n    required: '${label} is required',\n    types: {\n      email: '${label} is not a valid email',\n      number: '${label} is not a valid number',\n    },\n    number: {\n      range: '${label} must be between ${min} and ${max}',\n    },\n  };\n\n  const onChangeInput = (e: any) => {\n    setOrganizationInfo({ ...organizationInfo, [e.target.name]: e.target.value });\n  };\n\n  const onChangeDropDown = (e: any) => {\n    setSelectCountry(e);\n  };\n\n  // eslint-disable-next-line no-unused-vars\n  const prefixSelector = (\n    <Select\n      value={countryCode}\n      style={{ width: 70 }}\n      showSearch\n      placeholder=\"Select a country\"\n      optionFilterProp=\"children\"\n      onChange={onChangeCountry}\n      filterOption={(input, option) => option?.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n    >\n      <Option value=\"1\">US</Option>\n      <Option value=\"91\">IN</Option>\n      <Option value=\"44\">UK</Option>\n    </Select>\n  );\n\n  const onClickEdit = () => {\n    setEditForm(true);\n    setEditData(true);\n    setTempForm({ ...organizationInfo });\n  };\n\n  const handleCancel = () => {\n    if (JSON.stringify(tempForm) === JSON.stringify(organizationInfo)) {\n      setEditForm(false);\n      setNewKey(Date.now());\n      return;\n    }\n    confirm({\n      title: 'Do you want to save your changes?',\n      icon: <ExclamationCircleOutlined />,\n      okText: 'Yes',\n      okType: 'danger',\n      cancelText: 'No',\n      onOk() {\n        form.submit();\n      },\n      onCancel() {\n        setNewKey(Date.now());\n        setEditForm(false);\n      },\n    });\n  };\n\n  return (\n    <div style={{ marginTop: '30px' }}>\n      <Form\n        id=\"organization-form\"\n        onFinish={submitForm}\n        form={form}\n        labelCol={{ span: 10 }}\n        wrapperCol={{ span: 19 }}\n        onFinishFailed={onFinishFailed}\n        scrollToFirstError\n        validateMessages={validateMessages}\n      >\n        <Row>\n          <Col lg={12}>\n            <Form.Item\n              name={['name']}\n              label=\"Organization Name\"\n              required\n              rules={[{ required: true }]}\n            >\n              <Input\n                onClick={() => setFirstError('')}\n                name=\"name\"\n                ref={(ref) => (firstError === 'name') && ref && ref.focus()}\n                disabled={!editForm}\n                key=\"name\"\n                onChange={onChangeInput}\n                placeholder=\"Enter Organization Name\"\n              />\n            </Form.Item>\n            <Form.Item\n              name={['tenantAcronym']}\n              label=\"Rescue Acronym\"\n              required\n              rules={[{ required: true }]}\n            >\n              <Input\n                onClick={() => setFirstError('')}\n                name=\"tenantAcronym\"\n                ref={(ref) => (firstError === 'tenantAcronym') && ref && ref.focus()}\n                disabled={!editForm}\n                key=\"tenantAcronym\"\n                onChange={onChangeInput}\n                placeholder=\"Enter Rescue Acronym\"\n              />\n            </Form.Item>\n            <Form.Item\n              name={['street']}\n              label=\"Street\"\n              required\n              rules={[{ required: true }]}\n            >\n              <Input\n                onClick={() => setFirstError('')}\n                name=\"street\"\n                disabled={!editForm}\n                ref={(ref) => (firstError === 'street') && ref && ref.focus()}\n                key=\"street\"\n                onChange={onChangeInput}\n                placeholder=\"Enter Street\"\n              />\n            </Form.Item>\n            <Form.Item\n              name={['city']}\n              label=\"City\"\n              required\n              rules={[{ required: true }]}\n            >\n              <Input\n                onClick={() => setFirstError('')}\n                name=\"city\"\n                disabled={!editForm}\n                ref={(ref) => (firstError === 'city') && ref && ref.focus()}\n                key=\"city\"\n                onChange={onChangeInput}\n                placeholder=\"Enter City\"\n              />\n            </Form.Item>\n            <Form.Item\n              name={['state']}\n              label=\"State, Province, or Locality\"\n              required\n              rules={[\n                { required: true },\n                {\n                  pattern: /^.{1,2}$/,\n                  message: 'State must not be more than two characters',\n                },\n              ]}\n            >\n              <Input\n                onClick={() => setFirstError('')}\n                name=\"state\"\n                disabled={!editForm}\n                ref={(ref) => (firstError === 'state') && ref && ref.focus()}\n                key=\"state\"\n                onChange={onChangeInput}\n                placeholder=\"Enter State, Province, or Locality\"\n              />\n            </Form.Item>\n            <Form.Item\n              name={['zip']}\n              label=\"Zip/Postal Code\"\n              required\n              rules={[{ required: true }, { pattern: /^\\d{5}[-\\s]?(?:\\d{4})?$/, message: 'Please enter valid zip' }]}\n            >\n              <Input\n                onClick={() => setFirstError('')}\n                name=\"zip\"\n                disabled={!editForm}\n                ref={(ref) => (firstError === 'zip') && ref && ref.focus()}\n                key=\"zip\"\n                onChange={onChangeInput}\n                placeholder=\"Enter Zip\"\n              />\n            </Form.Item>\n            {/* <Input.Group>\n              <Row gutter={8}>\n                <Col span={12}>\n                  <Form.Item\n                    name={['countryCode']}\n                    label=\"Country Code\"\n                    required\n                    rules={[{ required: true }, { pattern: /^[a-zA-Z]{1,3}$/, message: 'Max 3 letters are required' }]}\n                  >\n                    <Input\n                      name=\"countryCode\"\n                      disabled={!editForm}\n                      key=\"countryCode\"\n                      value={organizationInfo?.countryCode}\n                      onChange={onChangeInput}\n                      placeholder=\"Enter Country Code\"\n                    />\n                  </Form.Item>\n                </Col>\n                <Col span={12}>\n                  <Form.Item\n                    name={['country']}\n                    label=\"Country Name\"\n                    required\n                    rules={[\n                      {\n                        required: true,\n                      },\n                    ]}\n                  >\n                    <Input\n                      disabled={!editForm}\n                      name=\"country\"\n                      key=\"countryName\"\n                      onChange={onChangeInput}\n                      placeholder=\"Enter Country Name\"\n                    />\n                  </Form.Item>\n                </Col>\n              </Row>\n            </Input.Group> */}\n            <Form.Item\n              name=\"countryId\"\n              key=\"countryId\"\n              label=\"Country\"\n              required\n              rules={[\n                {\n                  required: true,\n                },\n              ]}\n            >\n              <Select\n                onChange={onChangeDropDown}\n                disabled={!editForm}\n                showSearch\n                filterOption={(input, option) => option?.children.toLowerCase().startsWith(input.toLowerCase())}\n              >\n                {countryName?.map((data) => (\n                  <Option key={kebabCase(data.id)} value={data?.id}>{data?.countryName}</Option>\n                ))}\n              </Select>\n              {/* <Input\n                disabled={!editForm}\n                name=\"country\"\n                key=\"countryName\"\n                onChange={onChangeInput}\n                placeholder=\"Enter Country\"\n              /> */}\n            </Form.Item>\n          </Col>\n          <Col lg={12}>\n            <Form.Item\n              name={['phone']}\n              label=\"Phone\"\n              required\n              rules={[\n                {\n                  required: true,\n                },\n                {\n                  pattern: /^(\\+\\d{1,2}\\s)?\\(?\\d{3}\\)?[\\s.-]\\d{3}[\\s.-]\\d{4}$/,\n                  message: 'Please enter valid 10 digit number',\n                },\n              ]}\n            >\n              <NumberFormat\n                onClick={() => setFirstError('')}\n                customInput={Input}\n                addonBefore={prefixSelector}\n                disabled={!editForm}\n                key=\"phone\"\n                name=\"phone\"\n                onChange={onChangeInput}\n                placeholder=\"Enter Phone\"\n                format={`+${countryCode} (###) ###-####`}\n              />\n            </Form.Item>\n            <Form.Item\n              name={['emailAddress']}\n              label=\"Email\"\n              required\n              rules={[{ type: 'email', required: true }]}\n            >\n              <Input\n                onClick={() => setFirstError('')}\n                name=\"emailAddress\"\n                ref={(ref) => (firstError === 'emailAddress') && ref && ref.focus()}\n                disabled={!editForm}\n                key=\"email\"\n                onChange={onChangeInput}\n                placeholder=\"Enter Email\"\n              />\n            </Form.Item>\n            <Form.Item\n              name={['website']}\n              label=\"Website URL\"\n              required\n              rules={[\n                {\n                  required: true,\n                },\n                {\n                  pattern: /(www\\.)?[-a-zA-Z0-9@:%._~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_.~#?&//=]*)/,\n                  message: 'Please enter valid website url',\n                },\n              ]}\n            >\n              <Input\n                onClick={() => setFirstError('')}\n                name=\"website\"\n                ref={(ref) => (firstError === 'website') && ref && ref.focus()}\n                key=\"website\"\n                disabled={!editForm}\n                onChange={onChangeInput}\n                placeholder=\"Enter Website URL\"\n              />\n            </Form.Item>\n          </Col>\n        </Row>\n      </Form>\n      <div style={{ marginTop: '0px' }}>\n        <Row style={{ marginBottom: '10px', alignItems: 'center' }}>\n          <Col flex={3}>\n            <Row justify=\"start\" style={{ width: '200px' }}>\n              {/* <Input */}\n              {/*    onChange={(e)=>onSearch(e.target.value)} */}\n              {/*    placeholder=\"Search Animal Type\"/> */}\n            </Row>\n          </Col>\n          <Col flex={3}>\n            <Row justify=\"end\">\n              {editForm\n                ? (\n                  <>\n                    <Col lg={4}>\n                      <Button type=\"primary\" onClick={() => handleCancel()}>\n                        Cancel\n                      </Button>\n                    </Col>\n                    <Col lg={4}>\n                      <Button\n                        form=\"organization-form\"\n                        type=\"primary\"\n                        htmlType=\"submit\"\n                        onClick={() => {\n                          validationCheck();\n                          setHighlightKey(Date.now());\n                          form.submit();\n                        }}\n                      >\n                        Save\n                      </Button>\n                    </Col>\n                  </>\n                )\n                : (\n                  <Col lg={4}>\n                    <Button type=\"primary\" onClick={onClickEdit}>\n                      Edit\n                    </Button>\n                  </Col>\n                )}\n            </Row>\n          </Col>\n        </Row>\n      </div>\n    </div>\n  );\n};\n\nexport default OrganizationInfo;\n","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/customization/components/AnimalRescues.tsx",[],"/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/customization/components/AnimalVeterinarian.tsx",[],"/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/customization/components/AnimalVaccinationType.tsx",[],"/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/customization/components/VolunteerActivities.tsx",[],"/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/customization/components/AnimalMedicine.tsx",[],"/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/customization/components/HealthProcedure.tsx",["621","622","623"],"import { useEffect, useState, FC } from 'react';\nimport {\n  Modal, Button, Input, Row, Col, Select, Form, message,\n} from 'antd';\nimport { PlusOutlined, ExclamationCircleOutlined } from '@ant-design/icons';\nimport CustomTable from '../../../shared/components/CustomTable';\nimport alertConstant from '../../../shared/constants/alert.json';\nimport { apiCall } from '../../../shared/api/apiWrapper';\nimport constants from '../constant.json';\n\nconst { confirm } = Modal;\n\nconst cssPrefix = 'ftr-customization';\n\ntype ValidateStatus = Parameters<typeof Form.Item>[0]['validateStatus'];\n\ninterface AnimalTypeInterface {\n  id: string;\n  typeName: string;\n}\n\ninterface HealthProcedureInterface {\n  id: string;\n  procedureName: string\n}\n\ninterface Props {\n  activeTab: string;\n}\n\nconst HealthProcedure: FC<Props> = (newProps) => {\n  const { activeTab } = newProps;\n  const newAnimalType: AnimalTypeInterface[] = [];\n  const newHealthProcedure: HealthProcedureInterface[] = [];\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const [animalTypeList, setAnimalTypeList] = useState(newAnimalType);\n  const [healthProcedureList, setHealthProcedureList] = useState(newHealthProcedure);\n  const [errorMsg, setErrorMsg] = useState('');\n  const [validationStatus, setValidationStatus] = useState<{ validateStatus?: ValidateStatus; }>({});\n  const [animalType, setAnimalType] = useState<any>({});\n  const [healthProcedure, setHealthProcedure] = useState('');\n  const [healthProcedureId, setHealthProcedureId] = useState(0);\n  const [editModal, setEditModal] = useState(false);\n  const [changeData, setChangeData] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [key, setKey] = useState<any>('');\n  const [tempForm, setTempForm] = useState('');\n  const { Option } = Select;\n  const [form] = Form.useForm();\n\n  const showModal = () => {\n    setEditModal(false);\n    setTempForm('');\n    setIsModalVisible(true);\n  };\n\n  useEffect(() => {\n    const data = {};\n    if (parseInt(activeTab, 10) === constants.customization_types.healthProcedure) {\n      apiCall('animaltype/get-animal-types', 'GET', data)\n        .then((resp: any) => {\n          if (resp?.status === 200) {\n            setAnimalTypeList(resp?.data?.data?.animalTypes);\n            setAnimalType({ id: resp?.data?.data?.animalTypes?.[0]?.id, typeName: resp?.data?.data?.animalTypes?.[0]?.typeName });\n          }\n        });\n    }\n  }, [activeTab]);\n\n  useEffect(() => {\n    const data = {};\n    if (animalType?.id > 0) {\n      apiCall(`health-procedure/get-health-procedure-by-animalId?animalTypeId=${animalType?.id}`, 'GET', data)\n        .then((resp: any) => {\n          if (resp?.data?.success) {\n            setHealthProcedureList(resp?.data?.data?.healthProcedures);\n          }\n        });\n    }\n    if (!isModalVisible) {\n      setErrorMsg('');\n      setLoading(false);\n      setHealthProcedure('');\n      setChangeData(false);\n      setHealthProcedureId(0);\n      setValidationStatus({});\n    }\n    setKey(Date.now());\n  }, [animalType, changeData, isModalVisible]);\n\n  const validate = (healthProcedureValidate: any): { validateStatus: ValidateStatus } => {\n    if (!healthProcedureValidate) {\n      setErrorMsg('Health Procedure is required');\n      return { validateStatus: 'error' };\n    }\n    if (healthProcedureValidate.length > 150) {\n      setErrorMsg('Should be less than 150 characters');\n      return { validateStatus: 'error' };\n    }\n    setErrorMsg('');\n    return { validateStatus: 'success' };\n  };\n\n  function onChange(value: string) {\n    const id: number = parseInt(value.split(',')[0], 10);\n    const typeName: string = value.split(' ')[1];\n    setAnimalType({ id, typeName });\n  }\n\n  function onBlur() {\n    console.log('blur');\n  }\n\n  function onFocus() {\n    console.log('focus');\n  }\n\n  function onSearch(value: string) {\n    console.log('search:', value);\n  }\n\n  const handleInput = (value: string) => {\n    setValidationStatus({ ...validate(value) });\n    setHealthProcedure(value);\n  };\n\n  const setEditModalOpen = (value: boolean, data: any) => {\n    setHealthProcedure(data.procedureName);\n    setTempForm(data.procedureName);\n    setHealthProcedureId(data.id);\n    setChangeData(data);\n    setEditModal(value);\n    setIsModalVisible(value);\n  };\n\n  const handleOk = async () => {\n    if (editModal && healthProcedure === tempForm && healthProcedure.length > 0) {\n      setIsModalVisible(false);\n      setEditModal(false);\n    } else {\n      setLoading(true);\n      const validateResponse = validate(healthProcedure);\n      if (validateResponse && validateResponse.validateStatus !== 'success') {\n        setValidationStatus({ ...validate(healthProcedure) });\n        setLoading(false);\n        // eslint-disable-next-line no-useless-return\n        return;\n      }\n      const data = {\n        procedureName: healthProcedure,\n        AnimalTypeId: animalType?.id,\n      };\n      apiCall(`health-procedure/available-health-procedure?healthProcedure=${healthProcedure}&animaltypeId=${animalType?.id}`, 'get', data)\n        .then((resp: any) => {\n          if (resp?.data?.data?.isAvailable) {\n            setIsModalVisible(false);\n            if (!editModal) {\n              apiCall('health-procedure/create-health-procedure', 'POST', data)\n                .then((respAdd: any) => {\n                  if (respAdd?.data?.success) {\n                    setChangeData(true);\n                    message.success({\n                      content: respAdd?.data?.message || alertConstant.health_procedure_add_success,\n                      style: {\n                        marginTop: '2vh',\n                      },\n                      key: 'updatable',\n                    });\n                  }\n                });\n            } else {\n              apiCall(`health-procedure/update-health-procedure/${healthProcedureId}`, 'POST', data)\n                .then((respUpdate: any) => {\n                  if (respUpdate?.data?.success) {\n                    setChangeData(true);\n                    message.success({\n                      content: respUpdate?.data?.message || alertConstant.health_procedure_update_success,\n                      style: {\n                        marginTop: '2vh',\n                      },\n                      key: 'updatable',\n                    });\n                  }\n                });\n            }\n          } else {\n            message.success({\n              content: resp?.data?.message || alertConstant.health_procedure_duplicate_entry,\n              style: {\n                marginTop: '2vh',\n              },\n              key: 'updatable',\n            });\n            setIsModalVisible(true);\n            setLoading(false);\n            if (!editModal) {\n              setEditModal(false);\n            } else {\n              setEditModal(true);\n            }\n          }\n        });\n    }\n  };\n\n  const handleHealthProcedureDelete = (id: string) => {\n    const data = '';\n    apiCall(`health-procedure/delete-health-procedure/${id}`, 'PATCH', data)\n      .then((resp: any) => {\n        if (resp?.data?.success) {\n          setChangeData(true);\n          message.success({\n            content: resp?.data?.message || alertConstant.health_procedure_delete_success,\n            style: {\n              marginTop: '2vh',\n            },\n            key: 'deletedable',\n          });\n        }\n      });\n  };\n\n  const handleCancel = () => {\n    if (tempForm === healthProcedure) {\n      setIsModalVisible(false);\n      setEditModal(false);\n      return;\n    }\n    confirm({\n      title: 'Do you want to save your changes?',\n      icon: <ExclamationCircleOutlined />,\n      okText: 'Yes',\n      okType: 'danger',\n      cancelText: 'No',\n      onOk() {\n        handleOk();\n      },\n      onCancel() {\n        setIsModalVisible(false);\n        setEditModal(false);\n      },\n    });\n  };\n\n  return (\n    <>\n      <Modal\n        title={`${editModal ? 'Edit' : 'Add'} Health Procedure`}\n        visible={isModalVisible}\n        okButtonProps={{ loading }}\n        okText={editModal ? 'Update' : 'Save'}\n        onOk={form.submit}\n        onCancel={handleCancel}\n      >\n        <div style={{ margin: '10px' }}>\n          <b>Animal Type</b>\n          :\n          {` ${animalType?.typeName}`}\n        </div>\n        <Form onFinish={handleOk} form={form}>\n          <Form.Item\n            label=\"Health Procedure\"\n            required\n            validateStatus={validationStatus.validateStatus}\n            help={errorMsg}\n          >\n            <Input\n              key={key}\n              ref={(ref) => ref && ref.focus({ cursor: 'end' })}\n              value={healthProcedure}\n              onChange={(e) => {\n                handleInput(e.target.value);\n              }}\n              placeholder=\"Enter Health Procedure\"\n            />\n          </Form.Item>\n        </Form>\n      </Modal>\n      <Row style={{ marginBottom: '10px', alignItems: 'center' }}>\n        <Col flex={3}>\n          <Row justify=\"start\" style={{ width: '200px' }}>\n            <Select\n              showSearch\n              style={{ width: 200 }}\n              placeholder=\"Select a animal type\"\n              optionFilterProp=\"children\"\n              // eslint-disable-next-line\n              onChange={onChange}\n              // eslint-disable-next-line\n              onFocus={onFocus}\n              // eslint-disable-next-line\n              onBlur={onBlur}\n              // eslint-disable-next-line\n              onSearch={onSearch}\n              value={animalType?.typeName}\n            >\n              {animalTypeList?.map((data) => <Option value={`${data.id} ${data?.typeName}`}>{data?.typeName}</Option>)}\n            </Select>\n          </Row>\n        </Col>\n        <Col flex={3}>\n          <Row justify=\"end\">\n            <Button\n              disabled={!animalType}\n              className={`${cssPrefix}__button`}\n              type=\"dashed\"\n              onClick={showModal}\n              icon={<PlusOutlined />}\n            >\n              Add\n            </Button>\n          </Row>\n        </Col>\n      </Row>\n      <div style={{ marginTop: '10px' }}>\n        <CustomTable\n          config={{ rowSelection: 'none' }}\n          isNotEditable={false}\n          showHeader={false}\n          selectable={false}\n          tableType=\"Health Procedure\"\n          isLoading={false}\n          tableData={healthProcedureList}\n          columnData={[{\n            title: 'Health Procedure',\n            dataIndex: 'procedureName',\n            width: '80%',\n          }]}\n          delete={handleHealthProcedureDelete}\n          setEditModalOpen={setEditModalOpen}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default HealthProcedure;\n","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/customization/components/HospitalClinics.tsx",["624"],"import { useEffect, useState } from 'react';\nimport {\n  Modal, Input, Row, Col, Form, Button, message,\n} from 'antd';\nimport { PlusOutlined, ExclamationCircleOutlined } from '@ant-design/icons';\nimport CustomTable from '../../../shared/components/CustomTable';\nimport alertConstant from '../../../shared/constants/alert.json';\nimport { apiCall } from '../../../shared/api/apiWrapper';\n\nconst { confirm } = Modal;\n\nconst cssPrefix = 'ftr-customization';\n\ntype ValidateStatus = Parameters<typeof Form.Item>[0]['validateStatus'];\n\ninterface HospitalClinicInterface {\n  id: string;\n  hospitalClinicName: string\n}\n\nexport default function HospitalClinics() {\n  const newItem: HospitalClinicInterface[] = [];\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const [errorMsg, setErrorMsg] = useState('');\n  const [hospitalClinic, setHospitalClinic] = useState('');\n  const [hospitalClinicId, setHospitalClinicId] = useState(0);\n  const [validationStatus, setValidationStatus] = useState<{ validateStatus?: ValidateStatus; }>({});\n  const [hospitalClinicList, setHospitalClinicList] = useState(newItem);\n  const [editModal, setEditModal] = useState(false);\n  const [changeData, setChangeData] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [key, setKey] = useState<any>('');\n  const [tempForm, setTempForm] = useState('');\n  const [form] = Form.useForm();\n\n  // eslint-disable-next-line\n  const onSearch = (searchTextString: string) => {\n    console.log('search:', searchTextString);\n  };\n\n  useEffect(() => {\n    const data = {};\n    apiCall('hospital-clinic/get-hospital-clinic', 'GET', data)\n      .then((resp: any) => {\n        if (resp?.data?.success) {\n          setHospitalClinicList(resp?.data?.data?.hospitalClinics);\n        }\n      });\n    if (!isModalVisible) {\n      setErrorMsg('');\n      setLoading(false);\n      setChangeData(false);\n      setHospitalClinic('');\n      setHospitalClinicId(0);\n      setValidationStatus({});\n    }\n    setKey(Date.now());\n  }, [changeData, isModalVisible]);\n\n  const showModal = () => {\n    setTempForm('');\n    setEditModal(false);\n    setIsModalVisible(true);\n  };\n\n  const validate = (hospitalClinicData: string): { validateStatus: ValidateStatus } => {\n    if (!hospitalClinicData) {\n      setErrorMsg('Animal Hospital/Clinic is required');\n      return { validateStatus: 'error' };\n    }\n    if (hospitalClinicData.split('').length > 50) {\n      setErrorMsg('Should be less than 50 characters');\n      return { validateStatus: 'error' };\n    }\n    setErrorMsg('');\n    return { validateStatus: 'success' };\n  };\n\n  const handleAnimalTypeDelete = (id: string) => {\n    const data = '';\n    apiCall(`hospital-clinic/delete-hospital-clinic/${id}`, 'PATCH', data)\n      .then((resp: any) => {\n        if (resp?.data?.success) {\n          setChangeData(true);\n          message.success({\n            content: resp?.data?.message || alertConstant.hospital_clinic_delete_success,\n            style: {\n              marginTop: '2vh',\n            },\n            key: 'deletedable',\n          });\n        }\n      });\n  };\n\n  // eslint-disable-next-line\n  const setEditModalOpen = (value: boolean, data: any) => {\n    setHospitalClinic(data.hospitalClinicName);\n    setHospitalClinicId(data.id);\n    setTempForm(data.hospitalClinicName);\n    setChangeData(data);\n    setEditModal(value);\n    setIsModalVisible(value);\n  };\n\n  const handleOk = async () => {\n    if (editModal && hospitalClinic === tempForm && hospitalClinic.length > 0) {\n      setIsModalVisible(false);\n      setEditModal(false);\n    } else {\n      setLoading(true);\n      const validateResponse = validate(hospitalClinic);\n      if (validateResponse && validateResponse.validateStatus !== 'success') {\n        setValidationStatus({ ...validate(hospitalClinic) });\n        setLoading(false);\n        // eslint-disable-next-line\n        return;\n      }\n      const data = {\n        hospitalClinicName: hospitalClinic,\n      };\n      apiCall(`hospital-clinic/available-hospital-clinic?hospitalClinic=${hospitalClinic}`, 'get', data)\n        .then((resp: any) => {\n          if (resp?.data?.data?.isAvailable) {\n            setIsModalVisible(false);\n            if (!editModal) {\n              apiCall('hospital-clinic/create-hospital-clinic', 'POST', data)\n                .then((respAdd: any) => {\n                  if (respAdd?.data?.success) {\n                    setChangeData(true);\n                    message.success({\n                      content: respAdd?.data?.message || alertConstant.hospital_clinic_add_success,\n                      style: {\n                        marginTop: '2vh',\n                      },\n                      key: 'updatable',\n                    });\n                  }\n                });\n            } else {\n              apiCall(`hospital-clinic/update-hospital-clinic/${hospitalClinicId}`, 'POST', data)\n                .then((respUpdate: any) => {\n                  if (respUpdate?.data?.success) {\n                    setChangeData(true);\n                    message.success({\n                      content: respUpdate?.data?.message || alertConstant.hospital_clinic_update_success,\n                      style: {\n                        marginTop: '2vh',\n                      },\n                      key: 'updatable',\n                    });\n                  }\n                });\n            }\n          } else {\n            message.success({\n              content: resp?.data?.message || alertConstant.hospital_clinic_duplicate_entry,\n              style: {\n                marginTop: '2vh',\n              },\n              key: 'updatable',\n            });\n            setIsModalVisible(true);\n            setLoading(false);\n            if (!editModal) {\n              setEditModal(false);\n            } else {\n              setEditModal(true);\n            }\n          }\n        });\n    }\n  };\n\n  const onChangeInput = (value: string) => {\n    setValidationStatus({ ...validate(value) });\n  };\n\n  const handleCancel = () => {\n    if (tempForm === hospitalClinic) {\n      setIsModalVisible(false);\n      setEditModal(false);\n      return;\n    }\n    confirm({\n      title: 'Do you want to save your changes?',\n      icon: <ExclamationCircleOutlined />,\n      okText: 'Yes',\n      okType: 'danger',\n      cancelText: 'No',\n      onOk() {\n        handleOk();\n      },\n      onCancel() {\n        setIsModalVisible(false);\n        setEditModal(false);\n      },\n    });\n  };\n\n  return (\n    <>\n      <Modal\n        title={editModal ? 'Edit Animal Hospital/Clinic' : 'Add Animal Hospital/Clinic'}\n        visible={isModalVisible}\n        okButtonProps={{ loading }}\n        okText={editModal ? 'Update' : 'Save'}\n        onOk={form.submit}\n        onCancel={handleCancel}\n      >\n        <Form onFinish={handleOk} form={form}>\n          <Form.Item\n            label=\"Animal Hospital/Clinic\"\n            required\n            validateStatus={validationStatus.validateStatus}\n            help={errorMsg}\n          >\n            <Input\n              key={key}\n              ref={(ref) => ref && ref.focus({ cursor: 'end' })}\n              value={hospitalClinic}\n              onChange={(e) => {\n                onChangeInput(e.target.value);\n                setHospitalClinic(e.target.value);\n              }}\n              placeholder=\"Enter Animal Hospital/Clinic\"\n            />\n          </Form.Item>\n        </Form>\n      </Modal>\n      <div style={{ marginTop: '0px' }}>\n        <Row style={{ marginBottom: '10px', alignItems: 'center' }}>\n          <Col flex={3}>\n            <Row justify=\"start\" style={{ width: '200px' }}>\n              {/* <Input\n                 onChange={(e)=>onSearch(e.target.value)}\n                 placeholder=\"Search Animal Type\"/> */}\n            </Row>\n          </Col>\n          <Col flex={3}>\n            <Row justify=\"end\">\n              {/* <Typography.Link><PlusOutlined style={{ fontSize: '150%'}} onClick={showModal}/></Typography.Link> */}\n              <Button\n                className={`${cssPrefix}__button`}\n                type=\"dashed\"\n                onClick={showModal}\n                icon={<PlusOutlined />}\n              >\n                Add\n              </Button>\n            </Row>\n          </Col>\n        </Row>\n        <CustomTable\n          config={{ rowSelection: 'none' }}\n          isNotEditable={false}\n          showHeader={false}\n          selectable={false}\n          tableData={hospitalClinicList}\n          tableType=\"Animal Hospital/Clinic\"\n          isLoading={false}\n          columnData={[{\n            title: 'Animal Hospital/Clinic',\n            dataIndex: 'hospitalClinicName',\n            width: '80%',\n          }]}\n          delete={handleAnimalTypeDelete}\n          setEditModalOpen={setEditModalOpen}\n        />\n      </div>\n    </>\n  );\n}\n","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/customization/components/Behaviors.tsx",["625","626","627"],"import { useEffect, useState, FC } from 'react';\nimport {\n  Modal, Button, Input, Row, Col, Select, Form, message,\n} from 'antd';\nimport { PlusOutlined, ExclamationCircleOutlined } from '@ant-design/icons';\nimport CustomTable from '../../../shared/components/CustomTable';\nimport alertConstant from '../../../shared/constants/alert.json';\nimport { apiCall } from '../../../shared/api/apiWrapper';\nimport constants from '../constant.json';\n\nconst { confirm } = Modal;\n\nconst cssPrefix = 'ftr-customization';\n\ntype ValidateStatus = Parameters<typeof Form.Item>[0]['validateStatus'];\n\ninterface AnimalType {\n  id: string;\n  typeName: string;\n}\n\ninterface Behaviour {\n  id: string;\n  behaviorName: string\n}\n\ninterface Props {\n  activeTab: string;\n}\n\nconst Behaviors: FC<Props> = (newProps) => {\n  const { activeTab } = newProps;\n  const newAnimalType: AnimalType[] = [];\n  const newBehaviour: Behaviour[] = [];\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const [animalTypeList, setAnimalTypeList] = useState(newAnimalType);\n  const [behaviourList, setBehaviourList] = useState(newBehaviour);\n  const [behaviorId, setBehaviorId] = useState(0);\n  const [errorMsg, setErrorMsg] = useState('');\n  const [validationStatus, setValidationStatus] = useState<{ validateStatus?: ValidateStatus; }>({});\n  const [animalType, setAnimalType] = useState<any>({});\n  const [behavior, setBehavior] = useState('');\n  const [editModal, setEditModal] = useState(false);\n  const [changeData, setChangeData] = useState(false);\n  const [tempForm, setTempForm] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [key, setKey] = useState<any>('');\n\n  const { Option } = Select;\n  const [form] = Form.useForm();\n\n  const showModal = () => {\n    setEditModal(false);\n    setTempForm('');\n    setIsModalVisible(true);\n  };\n\n  useEffect(() => {\n    const data = {};\n    if (parseInt(activeTab, 10) === constants.customization_types.animalBehavior) {\n      apiCall('animaltype/get-animal-types', 'GET', data)\n        .then((resp: any) => {\n          if (resp?.status === 200) {\n            setAnimalTypeList(resp?.data?.data?.animalTypes);\n            setAnimalType({ id: resp?.data?.data?.animalTypes?.[0]?.id, typeName: resp?.data?.data?.animalTypes?.[0]?.typeName });\n          }\n        });\n    }\n  }, [activeTab]);\n  useEffect(() => {\n    const data = {};\n    if (animalType?.id > 0) {\n      apiCall(`behavior/get-behaviors-by-animalId?animalTypeId=${animalType?.id}`, 'GET', data)\n        .then((resp: any) => {\n          if (resp?.data?.success) {\n            setBehaviourList(resp?.data?.data?.behaviors);\n          }\n        });\n    }\n    if (!isModalVisible) {\n      setErrorMsg('');\n      setLoading(false);\n      setBehavior('');\n      setChangeData(false);\n      setBehaviorId(0);\n      setValidationStatus({});\n    }\n    setKey(Date.now());\n  }, [animalType, changeData, isModalVisible]);\n\n  const validate = (behaviour: any): { validateStatus: ValidateStatus } => {\n    if (!behaviour) {\n      setErrorMsg('Behavior is required');\n      return { validateStatus: 'error' };\n    }\n    if (behaviour.length > 25) {\n      setErrorMsg('Should be less than 25 characters');\n      return { validateStatus: 'error' };\n    }\n    setErrorMsg('');\n    return { validateStatus: 'success' };\n  };\n\n  function onChange(value: string) {\n    const id: number = parseInt(value.split(',')[0], 10);\n    const typeName: string = value.split(' ')[1];\n    setAnimalType({ id, typeName });\n  }\n\n  function onBlur() {\n    console.log('blur');\n  }\n\n  function onFocus() {\n    console.log('focus');\n  }\n\n  function onSearch(value: string) {\n    console.log('search:', value);\n  }\n\n  const handleInput = (value: string) => {\n    setValidationStatus({ ...validate(value) });\n    setBehavior(value);\n  };\n\n  const setEditModalOpen = (value: boolean, data: any) => {\n    setBehavior(data.behaviorName);\n    setTempForm(data.behaviorName);\n    setBehaviorId(data.id);\n    setChangeData(data);\n    setEditModal(value);\n    setIsModalVisible(value);\n  };\n\n  const handleOk = async () => {\n    if (editModal && behavior === tempForm && behavior.length > 0) {\n      setIsModalVisible(false);\n      setEditModal(false);\n    } else {\n      setLoading(true);\n      const validateResponse = validate(behavior);\n      if (validateResponse && validateResponse.validateStatus !== 'success') {\n        setValidationStatus({ ...validate(behavior) });\n        setLoading(false);\n        // eslint-disable-next-line no-useless-return\n        return;\n      }\n      const data = {\n        behaviorName: behavior,\n        AnimalTypeId: animalType?.id,\n      };\n      apiCall(`behavior/available-behavior?behaviorName=${behavior}&animaltypeId=${animalType?.id}`, 'get', data)\n        .then((resp: any) => {\n          if (resp?.data?.data?.isAvailable) {\n            setIsModalVisible(false);\n            if (!editModal) {\n              apiCall('behavior/create-behavior', 'POST', data)\n                .then((respAdd: any) => {\n                  if (respAdd?.data?.success) {\n                    setChangeData(true);\n                    message.success({\n                      content: respAdd?.data?.message || alertConstant.behaviour_add_success,\n                      style: {\n                        marginTop: '2vh',\n                      },\n                      key: 'updatable',\n                    });\n                  }\n                });\n            } else {\n              apiCall(`behavior/update-behavior/${behaviorId}`, 'POST', data)\n                .then((respUpdate: any) => {\n                  if (respUpdate?.data?.success) {\n                    setChangeData(true);\n                    message.success({\n                      content: respUpdate?.data?.message || alertConstant.behaviour_update_success,\n                      style: {\n                        marginTop: '2vh',\n                      },\n                      key: 'updatable',\n                    });\n                  }\n                });\n            }\n          } else {\n            message.success({\n              content: resp?.data?.message || alertConstant.behaviour_duplicate_entry,\n              style: {\n                marginTop: '2vh',\n              },\n              key: 'updatable',\n            });\n            setIsModalVisible(true);\n            setLoading(false);\n            if (!editModal) {\n              setEditModal(false);\n            } else {\n              setEditModal(true);\n            }\n          }\n        });\n    }\n  };\n\n  const handleBehaviorDelete = (id: string) => {\n    const data = '';\n    apiCall(`behavior/delete-behavior/${id}`, 'PATCH', data)\n      .then((resp: any) => {\n        if (resp?.data?.success) {\n          setChangeData(true);\n          message.success({\n            content: resp?.data?.message || alertConstant.behaviour_delete_success,\n            style: {\n              marginTop: '2vh',\n            },\n            key: 'deletedable',\n          });\n        }\n      });\n  };\n\n  const handleCancel = () => {\n    if (tempForm === behavior) {\n      setIsModalVisible(false);\n      setEditModal(false);\n      return;\n    }\n    confirm({\n      title: 'Do you want to save your changes?',\n      icon: <ExclamationCircleOutlined />,\n      okText: 'Yes',\n      okType: 'danger',\n      cancelText: 'No',\n      onOk() {\n        handleOk();\n      },\n      onCancel() {\n        setIsModalVisible(false);\n        setEditModal(false);\n      },\n    });\n  };\n\n  return (\n    <>\n      <Modal\n        title={`${editModal ? 'Edit' : 'Add'} Behavior`}\n        visible={isModalVisible}\n        okButtonProps={{ loading }}\n        okText={editModal ? 'Update' : 'Save'}\n        onOk={form.submit}\n        onCancel={handleCancel}\n      >\n        <div style={{ margin: '10px' }}>\n          <b>Animal Type</b>\n          :\n          {` ${animalType?.typeName}`}\n        </div>\n        <Form form={form} onFinish={handleOk}>\n          <Form.Item\n            label=\"Behavior\"\n            required\n            validateStatus={validationStatus.validateStatus}\n            help={errorMsg}\n          >\n            <Input\n              key={key}\n              ref={(ref) => ref && ref.focus({ cursor: 'end' })}\n              value={behavior}\n              onChange={(e) => {\n                handleInput(e.target.value);\n              }}\n              placeholder=\"Enter Behavior\"\n            />\n          </Form.Item>\n        </Form>\n      </Modal>\n      <Row style={{ marginBottom: '10px', alignItems: 'center' }}>\n        <Col flex={3}>\n          <Row justify=\"start\" style={{ width: '200px' }}>\n            <Select\n              showSearch\n              style={{ width: 200 }}\n              placeholder=\"Select a animal type\"\n              optionFilterProp=\"children\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onChange={onChange}\n              // eslint-disable-next-line react/jsx-no-bind\n              onFocus={onFocus}\n              // eslint-disable-next-line react/jsx-no-bind\n              onBlur={onBlur}\n              // eslint-disable-next-line react/jsx-no-bind\n              onSearch={onSearch}\n              value={animalType?.typeName}\n            >\n              {animalTypeList?.map((data) => <Option value={`${data.id} ${data.typeName}`}>{data.typeName}</Option>)}\n            </Select>\n          </Row>\n        </Col>\n        <Col flex={3}>\n          <Row justify=\"end\">\n            <Button\n              disabled={!animalType}\n              className={`${cssPrefix}__button`}\n              type=\"dashed\"\n              onClick={showModal}\n              icon={<PlusOutlined />}\n            >\n              Add\n            </Button>\n          </Row>\n        </Col>\n      </Row>\n      <div style={{ marginTop: '10px' }}>\n        <CustomTable\n          config={{ rowSelection: 'none' }}\n          isNotEditable={false}\n          showHeader={false}\n          selectable={false}\n          tableType=\"Behavior\"\n          tableData={behaviourList}\n          isLoading={false}\n          columnData={[{\n            title: 'Behavior',\n            dataIndex: 'behaviorName',\n            width: '80%',\n          }]}\n          delete={handleBehaviorDelete}\n          setEditModalOpen={setEditModalOpen}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default Behaviors;\n","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/customization/components/AnimalAcquisitionWay.tsx",[],"/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/customization/components/AnimalTypes.tsx",[],"/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/shared/components/CustomTable.tsx",["628","629"],"/* eslint-disable no-unused-vars */\n/* eslint-disable no-console */\nimport { useState, FC, useEffect } from 'react';\nimport {\n  Table, Form, Typography, Modal, Row, Collapse, Pagination,\n} from 'antd';\nimport {\n  EditOutlined, DeleteOutlined, ExclamationCircleOutlined, LoadingOutlined,\n  SendOutlined,\n} from '@ant-design/icons';\n\nconst { confirm } = Modal;\n\ninterface Item {\n\n}\n\ninterface Props {\n  config: any,\n  tableData: Item[];\n  tableType: string,\n  columnData: any,\n  isLoading: boolean,\n  selectable: boolean,\n  showHeader: boolean,\n  isNotEditable: boolean,\n  // eslint-disable-next-line no-unused-vars\n  delete: (id: string) => void;\n  // eslint-disable-next-line no-unused-vars\n  setEditModalOpen: (value: boolean, data: any) => void\n}\n\n// eslint-disable-next-line no-shadow\nconst EditableTable: FC<Props> = (Props) => {\n  const {\n    // eslint-disable-next-line no-unused-vars\n    tableData, tableType, columnData, isLoading, selectable, showHeader, isNotEditable, config,\n  } = Props;\n  const [form] = Form.useForm();\n  const [data, setData] = useState(tableData);\n  // eslint-disable-next-line no-unused-vars\n  const [editingKey, setEditingKey] = useState('');\n  const { Panel } = Collapse;\n  const edit = (record: Item) => {\n    Props.setEditModalOpen(true, record);\n  };\n\n  useEffect(() => {\n    setData(tableData);\n  }, [tableData]);\n\n  const cancel = () => {\n    setEditingKey('');\n  };\n\n  const itemRender = (current: any, type: any, originalElement: any) => {\n    if (type === 'prev') {\n      return <a style={{ marginRight: '10px' }}>Previous</a>;\n    } if (type === 'next') {\n      return <a>Next</a>;\n    }\n    return originalElement;\n  };\n\n  const deleteItem = async (deleteRecord: any) => {\n    Props.delete(deleteRecord?.id);\n  };\n\n  const showConfirmModal = async (record: any) => {\n    confirm({\n      title: 'Are you sure?',\n      icon: <ExclamationCircleOutlined />,\n      content: <span>\n        Are you sure you want to delete\n        <b>{` ${record[columnData[0]?.dataIndex] ? record[columnData[0]?.dataIndex] : ''}`}</b>\n        ?\n      </span>,\n      okText: 'Yes',\n      okType: 'danger',\n      cancelText: 'No',\n      onOk() {\n        deleteItem(record);\n      },\n      onCancel() {\n        console.log('Cancel');\n      },\n    });\n  };\n\n  const columns = [\n    ...columnData,\n    {\n      title: 'Action',\n      dataIndex: 'operation',\n      width: '15%',\n      render: (_: any, record: any) => (\n        <Row justify=\"start\" style={{ display: 'inline-flex' }}>\n          <Typography.Link style={{ marginRight: '10px', marginLeft: '5px' }} disabled={record.isNotEditable || isNotEditable} onClick={() => edit(record)}>\n            <EditOutlined />\n          </Typography.Link>\n          <Typography.Link disabled={record.isNotEditable || isNotEditable} onClick={() => showConfirmModal(record)}>\n            <span style={{ marginLeft: '15px' }}><DeleteOutlined /></span>\n          </Typography.Link>\n          {config.sendInvitation && (\n            (config?.sendLoading === record?.id) ? (\n              <Typography.Link>\n                <span style={{ marginLeft: '15px' }}><LoadingOutlined spin /></span>\n              </Typography.Link>\n            ) : (\n              <Typography.Link disabled={record?.dateActive} onClick={() => config?.sendInvitation(record)}>\n                <span style={{ marginLeft: '15px' }}><SendOutlined /></span>\n              </Typography.Link>\n            )\n          )}\n        </Row>\n      ),\n    },\n  ];\n\n  const rowSelection = selectable ? {\n    rowSelection: {\n      selectedRowKeys: [config?.selectedRow],\n      hideSelectAll: (config?.rowSelection === 'radio'),\n      onChange: (selectedRowKeys: React.Key[], selectedRows: any[]) => {\n        if (config?.selectedRow === selectedRows?.[0]?.id) {\n          config.setSelectedRow(selectedRows?.[1]?.id);\n        } else {\n          config.setSelectedRow(selectedRows?.[0]?.id);\n        }\n      },\n      getCheckboxProps: (record: any) => ({\n        disabled: record.name === 'Disabled User', // Column configuration not to be checked\n        name: record.name,\n        className: 'checkbox-thik-change',\n      }),\n    },\n  } : {};\n\n  return (\n    <>\n      <div className=\"mobile-view\">\n        <Collapse accordion bordered>\n          {data?.map?.((currentData, i) => {\n            const keyTyped = columns[0]?.dataIndex as keyof typeof currentData;\n            return (\n              // eslint-disable-next-line react/no-array-index-key\n              <Panel style={{ backgroundColor: 'whitesmoke' }} header={columns[0]?.render?.(null, currentData) || currentData[keyTyped]} key={i}>\n                {columns.map((colData, j) => {\n                  const keyName = columns[j]?.dataIndex as keyof typeof currentData;\n                  return (\n                    <>\n                      {(j !== 0) && <hr className=\"hr-line\" />}\n                      <b>{colData.title}</b>\n                      {' : '}\n                      {colData?.render?.(null, currentData) || currentData[keyName]}\n                    </>\n                  );\n                })}\n              </Panel>\n            );\n          })}\n        </Collapse>\n        <Row justify=\"end\" style={{ marginTop: '10px' }}>\n          <Pagination itemRender={itemRender} showLessItems defaultCurrent={1} total={500} />\n        </Row>\n      </div>\n\n      <div className=\"desktop-view\">\n        <Form form={form} component={false}>\n          <Table\n            loading={{ indicator: <LoadingOutlined style={{ fontSize: 14 }} spin />, spinning: isLoading }}\n            style={{ borderTop: '#820014 1px solid' }}\n            dataSource={data}\n            columns={columns}\n            rowClassName=\"editable-row\"\n            rowKey=\"id\"\n            pagination={{\n              onChange: cancel,\n              pageSize: 15,\n              itemRender,\n            }}\n            showHeader={showHeader}\n            // eslint-disable-next-line react/jsx-props-no-spreading\n            {...rowSelection}\n          />\n        </Form>\n      </div>\n    </>\n  );\n};\n\nexport default EditableTable;\n","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/users/components/AddUserForm.tsx",["630","631","632","633","634","635"],"/* eslint-disable no-unused-vars */\n/* eslint-disable no-template-curly-in-string */\nimport {\n  useEffect, FC, useState, useRef,\n} from 'react';\nimport {\n  Modal, Input, Form, message,\n} from 'antd';\nimport { ExclamationCircleOutlined } from '@ant-design/icons';\nimport alertConstant from '../../../shared/constants/alert.json';\nimport MultiSelect from '../../../shared/components/Inputs/MultiSelect';\n// eslint-disable-next-line no-unused-vars\nimport CustomPhoneInput from '../../../shared/components/Inputs/CustomPhoneInput';\n\nconst { confirm } = Modal;\n\n// eslint-disable-next-line no-unused-vars\nconst cssPrefix = 'ftr-users';\n\ninterface Props {\n  tempForm: {},\n  isModalVisible: boolean,\n  editModal: boolean,\n  viewInactive: boolean,\n  inviteUserLoading: boolean,\n  userForm: any,\n  setUserForm: (formData: object) => void,\n  setEditModal: (isTrue: boolean) => void,\n  setIsModalVisible: (status: boolean) => void,\n  getUserListCall: (data: any, callbackFunction: any) => void,\n  onSubmit: (data: object, callbackFunction: any) => void,\n}\n\nconst AddUserForm: FC<Props> = (newProps) => {\n  const {\n    tempForm, isModalVisible, editModal, viewInactive, setEditModal,\n    setIsModalVisible, userForm, setUserForm, onSubmit, getUserListCall,\n    inviteUserLoading,\n  } = newProps;\n\n  const [key, setKey] = useState<any>('');\n  const [newKey, setNewKey] = useState(Date.now());\n  const [form] = Form.useForm();\n\n  const inputRef = useRef<any>(null);\n  const permissionConstant = [{ id: 'Administrator', label: 'Administrator' }, { id: 'Regular', label: 'Regular' }];\n\n  useEffect(() => {\n    inputRef?.current?.focus();\n  }, [key]);\n\n  useEffect(() => {\n    if (!isModalVisible && !editModal) {\n      setNewKey(Date.now());\n      form.resetFields();\n      form.setFieldsValue({ role: permissionConstant[0]?.label });\n      setUserForm({ role: permissionConstant[0]?.label });\n    } else {\n      setUserForm({ ...userForm, role: permissionConstant[0]?.label });\n    }\n    setKey(Date.now());\n  }, [isModalVisible]);\n\n  useEffect(() => {\n    form.setFieldsValue({ ...userForm, role: userForm.role });\n  }, [userForm]);\n\n  const validateMessages = {\n    required: '${label} is required',\n    types: {\n      email: '${label} is not a valid email',\n      number: '${label} is not a valid number',\n    },\n    number: {\n      range: '${label} must be between ${min} and ${max}',\n    },\n  };\n\n  const callbackFunction = () => {\n    message.success({\n      content: editModal ? alertConstant.user_update_success : alertConstant.user_invite_success,\n      style: {\n        marginTop: '2vh',\n      },\n      key: 'updatable',\n    });\n    form.resetFields();\n    setEditModal(false);\n    setIsModalVisible(false);\n    getUserListCall(viewInactive, () => console.log('------'));\n  };\n\n  const handleOk = async () => {\n    if (!editModal) {\n      const updateData = {\n        firstName: userForm?.firstName,\n        lastName: userForm?.lastName,\n        email: userForm?.email,\n        roleName: userForm?.role,\n      };\n      onSubmit(updateData, () => callbackFunction());\n    } else {\n      const updateData = {\n        id: userForm?.id,\n        firstName: userForm?.firstName,\n        lastName: userForm?.lastName,\n        role: userForm?.role,\n        email: userForm?.email,\n      };\n      onSubmit(updateData, () => callbackFunction());\n    }\n  };\n\n  const handleInput = (e: any) => {\n    form.setFieldsValue({ [e.target.name]: e.target.value });\n    setUserForm({ ...userForm, [e.target.name]: e.target.value });\n  };\n\n  // eslint-disable-next-line no-unused-vars\n  const setPhoneNumber = (value: any) => {\n    form.setFieldsValue({ phoneNumber: value });\n    setUserForm({ ...userForm, phoneNumber: value });\n  };\n\n  const handleCancel = () => {\n    setIsModalVisible(false);\n    setEditModal(false);\n    return;\n    // eslint-disable-next-line no-unreachable\n    if (tempForm === JSON.stringify(userForm) || !editModal) {\n      setIsModalVisible(false);\n      setEditModal(false);\n      return;\n    }\n    confirm({\n      title: 'Do you want to save your changes?',\n      icon: <ExclamationCircleOutlined />,\n      okText: 'Yes',\n      okType: 'danger',\n      cancelText: 'No',\n      onOk() {\n        handleOk();\n      },\n      onCancel() {\n        setIsModalVisible(false);\n        setEditModal(false);\n      },\n    });\n  };\n\n  return (\n    <>\n      <Modal\n        title={editModal ? 'Edit User Detail' : 'Invite User'}\n        visible={isModalVisible}\n        okButtonProps={{ loading: inviteUserLoading }}\n        onOk={form.submit}\n        okText={editModal ? 'Update' : 'Invite'}\n        onCancel={handleCancel}\n      >\n        <Form labelCol={{ span: 6 }} wrapperCol={{ span: 16 }} key={newKey} onFinish={handleOk} form={form} validateMessages={validateMessages}>\n          {/* <Form.Item\n            name={['username']}\n            label=\"User Name\"\n            required\n            rules={[{ required: true }]}\n          >\n            <Input\n              disabled={editModal}\n              key={key}\n              ref={inputRef}\n              name=\"username\"\n              onChange={(e) => handleInput(e)}\n              placeholder=\"Enter User Name\"\n            />\n          </Form.Item> */}\n          <Form.Item\n            name={['firstName']}\n            label=\"First Name\"\n            required\n            rules={[{ required: true }]}\n          >\n            <Input\n              name=\"firstName\"\n              onChange={(e) => handleInput(e)}\n              placeholder=\"Enter First Name\"\n            />\n          </Form.Item>\n          <Form.Item\n            name={['lastName']}\n            label=\"Last Name\"\n            required\n            rules={[{ required: true }]}\n          >\n            <Input\n              name=\"lastName\"\n              onChange={(e) => handleInput(e)}\n              placeholder=\"Enter Last Name\"\n            />\n          </Form.Item>\n          <Form.Item\n            name={['email']}\n            label=\"Email\"\n            required\n            rules={[{ type: 'email', required: true }]}\n          >\n            <Input\n              name=\"email\"\n              onChange={(e) => handleInput(e)}\n              placeholder=\"Enter Email\"\n            />\n          </Form.Item>\n          {/* <CustomPhoneInput phoneNumber={userForm?.phoneNumber} setPhoneNumber={(e) => setPhoneNumber(e)} /> */}\n          <Form.Item\n            name={['role']}\n            label=\"Role\"\n            required\n            rules={[{ required: true }]}\n          >\n            <MultiSelect\n              label=\"Select Permission Role\"\n              options={permissionConstant.map((data) => ({ label: data.label, value: data.id }))}\n              value={{ id: 'Regular', label: 'Regular' }}\n              onChange={(data) => setUserForm({\n                ...userForm,\n                role: data,\n              })}\n            />\n          </Form.Item>\n        </Form>\n      </Modal>\n    </>\n  );\n};\n\nexport default AddUserForm;\n","/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/customization/components/Tooltips/AcquisitionFormInfo.tsx",[],"/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/components/customization/components/Tooltips/VeterinarianFormInfo.tsx",[],"/Users/zhaoke/Desktop/TYR/TYR.WEB.CLIENT/src/shared/components/Inputs/MultiSelect.tsx",["636"],"import { FC } from 'react';\nimport { Select } from 'antd';\n\ninterface Props {\n  label: string;\n  options: any;\n  value: any;\n  // eslint-disable-next-line\n  onChange: (value: any) => void\n}\n\nconst MultiSelect: FC<Props> = (newProps) => {\n  const {\n    label, options, value, onChange,\n  } = newProps;\n  console.log(value);\n  return (\n    <Select\n      placeholder={label}\n      showArrow\n      value={value}\n      style={{ width: '100%' }}\n      options={options}\n      key=\"value\"\n      onChange={(data) => {\n        onChange(data);\n      }}\n    />\n  );\n};\n\nexport default MultiSelect;\n",{"ruleId":"637","severity":1,"message":"638","line":128,"column":9,"nodeType":"639","messageId":"640","endLine":128,"endColumn":20},{"ruleId":"637","severity":1,"message":"638","line":25,"column":3,"nodeType":"639","messageId":"640","endLine":25,"endColumn":14},{"ruleId":"641","severity":1,"message":"642","line":5,"column":3,"nodeType":"643","messageId":"644","endLine":5,"endColumn":10},{"ruleId":"641","severity":1,"message":"645","line":5,"column":12,"nodeType":"643","messageId":"644","endLine":5,"endColumn":17},{"ruleId":"641","severity":1,"message":"646","line":5,"column":19,"nodeType":"643","messageId":"644","endLine":5,"endColumn":25},{"ruleId":"641","severity":1,"message":"647","line":5,"column":27,"nodeType":"643","messageId":"644","endLine":5,"endColumn":32},{"ruleId":"641","severity":1,"message":"648","line":8,"column":3,"nodeType":"643","messageId":"644","endLine":8,"endColumn":13},{"ruleId":"641","severity":1,"message":"649","line":20,"column":7,"nodeType":"643","messageId":"644","endLine":20,"endColumn":16},{"ruleId":"641","severity":1,"message":"650","line":3,"column":10,"nodeType":"643","messageId":"644","endLine":3,"endColumn":21},{"ruleId":"641","severity":1,"message":"651","line":4,"column":8,"nodeType":"643","messageId":"644","endLine":4,"endColumn":15},{"ruleId":"637","severity":1,"message":"638","line":29,"column":3,"nodeType":"639","messageId":"640","endLine":29,"endColumn":14},{"ruleId":"637","severity":1,"message":"638","line":60,"column":3,"nodeType":"639","messageId":"640","endLine":60,"endColumn":14},{"ruleId":"637","severity":1,"message":"638","line":102,"column":3,"nodeType":"639","messageId":"640","endLine":102,"endColumn":14},{"ruleId":"637","severity":1,"message":"638","line":142,"column":3,"nodeType":"639","messageId":"640","endLine":142,"endColumn":14},{"ruleId":"641","severity":1,"message":"650","line":5,"column":10,"nodeType":"643","messageId":"644","endLine":5,"endColumn":21},{"ruleId":"641","severity":1,"message":"651","line":6,"column":8,"nodeType":"643","messageId":"644","endLine":6,"endColumn":15},{"ruleId":"641","severity":1,"message":"652","line":242,"column":15,"nodeType":"643","messageId":"644","endLine":242,"endColumn":32},{"ruleId":"637","severity":1,"message":"638","line":17,"column":3,"nodeType":"639","messageId":"640","endLine":17,"endColumn":14},{"ruleId":"641","severity":1,"message":"653","line":65,"column":5,"nodeType":"643","messageId":"644","endLine":65,"endColumn":19},{"ruleId":"641","severity":1,"message":"650","line":5,"column":10,"nodeType":"643","messageId":"644","endLine":5,"endColumn":21},{"ruleId":"641","severity":1,"message":"651","line":6,"column":8,"nodeType":"643","messageId":"644","endLine":6,"endColumn":15},{"ruleId":"641","severity":1,"message":"652","line":194,"column":15,"nodeType":"643","messageId":"644","endLine":194,"endColumn":32},{"ruleId":"641","severity":1,"message":"652","line":238,"column":15,"nodeType":"643","messageId":"644","endLine":238,"endColumn":32},{"ruleId":"637","severity":1,"message":"638","line":85,"column":3,"nodeType":"639","messageId":"640","endLine":85,"endColumn":14},{"ruleId":"637","severity":1,"message":"638","line":117,"column":3,"nodeType":"639","messageId":"640","endLine":117,"endColumn":14},{"ruleId":"637","severity":1,"message":"638","line":177,"column":3,"nodeType":"639","messageId":"640","endLine":177,"endColumn":14},{"ruleId":"637","severity":1,"message":"638","line":189,"column":3,"nodeType":"639","messageId":"640","endLine":189,"endColumn":14},{"ruleId":"637","severity":1,"message":"638","line":223,"column":3,"nodeType":"639","messageId":"640","endLine":223,"endColumn":14},{"ruleId":"637","severity":1,"message":"638","line":257,"column":3,"nodeType":"639","messageId":"640","endLine":257,"endColumn":14},{"ruleId":"637","severity":1,"message":"638","line":292,"column":3,"nodeType":"639","messageId":"640","endLine":292,"endColumn":14},{"ruleId":"637","severity":1,"message":"638","line":387,"column":3,"nodeType":"639","messageId":"640","endLine":387,"endColumn":14},{"ruleId":"641","severity":1,"message":"654","line":6,"column":10,"nodeType":"643","messageId":"644","endLine":6,"endColumn":18},{"ruleId":"641","severity":1,"message":"655","line":26,"column":9,"nodeType":"643","messageId":"644","endLine":26,"endColumn":14},{"ruleId":"637","severity":1,"message":"638","line":22,"column":41,"nodeType":"639","messageId":"640","endLine":22,"endColumn":52},{"ruleId":"641","severity":1,"message":"656","line":27,"column":9,"nodeType":"643","messageId":"644","endLine":27,"endColumn":19},{"ruleId":"641","severity":1,"message":"657","line":21,"column":8,"nodeType":"643","messageId":"644","endLine":21,"endColumn":18},{"ruleId":"641","severity":1,"message":"658","line":25,"column":9,"nodeType":"643","messageId":"644","endLine":25,"endColumn":16},{"ruleId":"641","severity":1,"message":"659","line":32,"column":27,"nodeType":"643","messageId":"644","endLine":32,"endColumn":47},{"ruleId":"641","severity":1,"message":"660","line":32,"column":74,"nodeType":"643","messageId":"644","endLine":32,"endColumn":85},{"ruleId":"641","severity":1,"message":"661","line":33,"column":44,"nodeType":"643","messageId":"644","endLine":33,"endColumn":60},{"ruleId":"641","severity":1,"message":"662","line":34,"column":24,"nodeType":"643","messageId":"644","endLine":34,"endColumn":51},{"ruleId":"641","severity":1,"message":"663","line":45,"column":10,"nodeType":"643","messageId":"644","endLine":45,"endColumn":27},{"ruleId":"641","severity":1,"message":"664","line":53,"column":10,"nodeType":"643","messageId":"644","endLine":53,"endColumn":20},{"ruleId":"641","severity":1,"message":"665","line":53,"column":22,"nodeType":"643","messageId":"644","endLine":53,"endColumn":35},{"ruleId":"637","severity":1,"message":"638","line":67,"column":16,"nodeType":"639","messageId":"640","endLine":67,"endColumn":27},{"ruleId":"641","severity":1,"message":"666","line":145,"column":9,"nodeType":"643","messageId":"644","endLine":145,"endColumn":27},{"ruleId":"637","severity":1,"message":"638","line":157,"column":14,"nodeType":"639","messageId":"640","endLine":157,"endColumn":25},{"ruleId":"667","severity":1,"message":"668","line":158,"column":6,"nodeType":"669","endLine":158,"endColumn":53,"suggestions":"670"},{"ruleId":"637","severity":1,"message":"638","line":169,"column":16,"nodeType":"639","messageId":"640","endLine":169,"endColumn":27},{"ruleId":"667","severity":1,"message":"671","line":171,"column":6,"nodeType":"669","endLine":171,"endColumn":17,"suggestions":"672"},{"ruleId":"667","severity":1,"message":"673","line":175,"column":6,"nodeType":"669","endLine":175,"endColumn":8,"suggestions":"674"},{"ruleId":"641","severity":1,"message":"656","line":178,"column":9,"nodeType":"643","messageId":"644","endLine":178,"endColumn":19},{"ruleId":"641","severity":1,"message":"675","line":4,"column":45,"nodeType":"643","messageId":"644","endLine":4,"endColumn":57},{"ruleId":"641","severity":1,"message":"676","line":7,"column":3,"nodeType":"643","messageId":"644","endLine":7,"endColumn":25},{"ruleId":"641","severity":1,"message":"677","line":13,"column":3,"nodeType":"643","messageId":"644","endLine":13,"endColumn":12},{"ruleId":"641","severity":1,"message":"658","line":24,"column":9,"nodeType":"643","messageId":"644","endLine":24,"endColumn":16},{"ruleId":"641","severity":1,"message":"678","line":30,"column":21,"nodeType":"643","messageId":"644","endLine":30,"endColumn":33},{"ruleId":"641","severity":1,"message":"663","line":32,"column":10,"nodeType":"643","messageId":"644","endLine":32,"endColumn":27},{"ruleId":"641","severity":1,"message":"679","line":32,"column":29,"nodeType":"643","messageId":"644","endLine":32,"endColumn":49},{"ruleId":"641","severity":1,"message":"680","line":35,"column":10,"nodeType":"643","messageId":"644","endLine":35,"endColumn":18},{"ruleId":"641","severity":1,"message":"681","line":40,"column":24,"nodeType":"643","messageId":"644","endLine":40,"endColumn":39},{"ruleId":"637","severity":1,"message":"638","line":70,"column":16,"nodeType":"639","messageId":"640","endLine":70,"endColumn":27},{"ruleId":"641","severity":1,"message":"656","line":104,"column":9,"nodeType":"643","messageId":"644","endLine":104,"endColumn":19},{"ruleId":"682","severity":1,"message":"683","line":136,"column":32,"nodeType":"684","messageId":"640","endLine":136,"endColumn":53},{"ruleId":"637","severity":1,"message":"638","line":162,"column":11,"nodeType":"639","messageId":"640","endLine":162,"endColumn":22},{"ruleId":"641","severity":1,"message":"685","line":171,"column":9,"nodeType":"643","messageId":"644","endLine":171,"endColumn":19},{"ruleId":"641","severity":1,"message":"686","line":172,"column":9,"nodeType":"643","messageId":"644","endLine":172,"endColumn":21},{"ruleId":"637","severity":1,"message":"638","line":245,"column":14,"nodeType":"639","messageId":"640","endLine":245,"endColumn":25},{"ruleId":"667","severity":1,"message":"687","line":246,"column":6,"nodeType":"669","endLine":246,"endColumn":53,"suggestions":"688"},{"ruleId":"637","severity":1,"message":"638","line":257,"column":16,"nodeType":"639","messageId":"640","endLine":257,"endColumn":27},{"ruleId":"667","severity":1,"message":"689","line":259,"column":6,"nodeType":"669","endLine":259,"endColumn":17,"suggestions":"690"},{"ruleId":"667","severity":1,"message":"691","line":263,"column":6,"nodeType":"669","endLine":263,"endColumn":8,"suggestions":"692"},{"ruleId":"641","severity":1,"message":"693","line":7,"column":13,"nodeType":"643","messageId":"644","endLine":7,"endColumn":19},{"ruleId":"637","severity":1,"message":"638","line":27,"column":7,"nodeType":"639","messageId":"640","endLine":27,"endColumn":18},{"ruleId":"667","severity":1,"message":"694","line":30,"column":6,"nodeType":"669","endLine":30,"endColumn":16,"suggestions":"695"},{"ruleId":"641","severity":1,"message":"696","line":44,"column":10,"nodeType":"643","messageId":"644","endLine":44,"endColumn":27},{"ruleId":"641","severity":1,"message":"697","line":44,"column":29,"nodeType":"643","messageId":"644","endLine":44,"endColumn":49},{"ruleId":"637","severity":1,"message":"638","line":126,"column":5,"nodeType":"639","messageId":"640","endLine":126,"endColumn":16},{"ruleId":"641","severity":1,"message":"698","line":30,"column":18,"nodeType":"643","messageId":"644","endLine":30,"endColumn":27},{"ruleId":"641","severity":1,"message":"699","line":34,"column":24,"nodeType":"643","messageId":"644","endLine":34,"endColumn":39},{"ruleId":"637","severity":1,"message":"638","line":66,"column":5,"nodeType":"639","messageId":"640","endLine":66,"endColumn":16},{"ruleId":"667","severity":1,"message":"700","line":91,"column":6,"nodeType":"669","endLine":91,"endColumn":8,"suggestions":"701"},{"ruleId":"641","severity":1,"message":"642","line":3,"column":3,"nodeType":"643","messageId":"644","endLine":3,"endColumn":10},{"ruleId":"641","severity":1,"message":"648","line":7,"column":3,"nodeType":"643","messageId":"644","endLine":7,"endColumn":13},{"ruleId":"641","severity":1,"message":"702","line":29,"column":9,"nodeType":"643","messageId":"644","endLine":29,"endColumn":15},{"ruleId":"641","severity":1,"message":"658","line":30,"column":9,"nodeType":"643","messageId":"644","endLine":30,"endColumn":16},{"ruleId":"637","severity":1,"message":"638","line":84,"column":7,"nodeType":"639","messageId":"640","endLine":84,"endColumn":18},{"ruleId":"637","severity":1,"message":"638","line":89,"column":9,"nodeType":"639","messageId":"640","endLine":89,"endColumn":20},{"ruleId":"667","severity":1,"message":"703","line":92,"column":6,"nodeType":"669","endLine":92,"endColumn":8,"suggestions":"704"},{"ruleId":"667","severity":1,"message":"705","line":101,"column":6,"nodeType":"669","endLine":101,"endColumn":24,"suggestions":"706"},{"ruleId":"682","severity":1,"message":"683","line":138,"column":28,"nodeType":"684","messageId":"640","endLine":138,"endColumn":49},{"ruleId":"682","severity":1,"message":"683","line":180,"column":33,"nodeType":"684","messageId":"640","endLine":180,"endColumn":48},{"ruleId":"641","severity":1,"message":"699","line":24,"column":24,"nodeType":"643","messageId":"644","endLine":24,"endColumn":39},{"ruleId":"667","severity":1,"message":"707","line":38,"column":6,"nodeType":"669","endLine":38,"endColumn":8,"suggestions":"708"},{"ruleId":"641","severity":1,"message":"709","line":8,"column":8,"nodeType":"643","messageId":"644","endLine":8,"endColumn":11},{"ruleId":"641","severity":1,"message":"710","line":32,"column":10,"nodeType":"643","messageId":"644","endLine":32,"endColumn":22},{"ruleId":"641","severity":1,"message":"699","line":32,"column":24,"nodeType":"643","messageId":"644","endLine":32,"endColumn":39},{"ruleId":"641","severity":1,"message":"711","line":24,"column":10,"nodeType":"643","messageId":"644","endLine":24,"endColumn":18},{"ruleId":"641","severity":1,"message":"699","line":27,"column":24,"nodeType":"643","messageId":"644","endLine":27,"endColumn":39},{"ruleId":"641","severity":1,"message":"712","line":45,"column":10,"nodeType":"643","messageId":"644","endLine":45,"endColumn":20},{"ruleId":"667","severity":1,"message":"713","line":123,"column":6,"nodeType":"669","endLine":123,"endColumn":30,"suggestions":"714"},{"ruleId":"641","severity":1,"message":"715","line":4,"column":47,"nodeType":"643","messageId":"644","endLine":4,"endColumn":50},{"ruleId":"641","severity":1,"message":"716","line":11,"column":10,"nodeType":"643","messageId":"644","endLine":11,"endColumn":17},{"ruleId":"641","severity":1,"message":"658","line":16,"column":9,"nodeType":"643","messageId":"644","endLine":16,"endColumn":16},{"ruleId":"641","severity":1,"message":"702","line":44,"column":9,"nodeType":"643","messageId":"644","endLine":44,"endColumn":15},{"ruleId":"641","severity":1,"message":"717","line":53,"column":7,"nodeType":"643","messageId":"644","endLine":53,"endColumn":14},{"ruleId":"641","severity":1,"message":"718","line":69,"column":38,"nodeType":"643","messageId":"644","endLine":69,"endColumn":50},{"ruleId":"641","severity":1,"message":"719","line":73,"column":19,"nodeType":"643","messageId":"644","endLine":73,"endColumn":29},{"ruleId":"641","severity":1,"message":"720","line":76,"column":10,"nodeType":"643","messageId":"644","endLine":76,"endColumn":20},{"ruleId":"641","severity":1,"message":"721","line":77,"column":10,"nodeType":"643","messageId":"644","endLine":77,"endColumn":21},{"ruleId":"641","severity":1,"message":"722","line":78,"column":10,"nodeType":"643","messageId":"644","endLine":78,"endColumn":28},{"ruleId":"641","severity":1,"message":"723","line":141,"column":9,"nodeType":"643","messageId":"644","endLine":141,"endColumn":21},{"ruleId":"641","severity":1,"message":"724","line":144,"column":9,"nodeType":"643","messageId":"644","endLine":144,"endColumn":26},{"ruleId":"641","severity":1,"message":"725","line":198,"column":9,"nodeType":"643","messageId":"644","endLine":198,"endColumn":27},{"ruleId":"667","severity":1,"message":"726","line":295,"column":6,"nodeType":"669","endLine":295,"endColumn":15,"suggestions":"727"},{"ruleId":"637","severity":1,"message":"638","line":298,"column":5,"nodeType":"639","messageId":"640","endLine":298,"endColumn":16},{"ruleId":"667","severity":1,"message":"728","line":299,"column":6,"nodeType":"669","endLine":299,"endColumn":29,"suggestions":"729"},{"ruleId":"667","severity":1,"message":"730","line":299,"column":7,"nodeType":"684","endLine":299,"endColumn":28},{"ruleId":"682","severity":1,"message":"683","line":331,"column":21,"nodeType":"684","messageId":"640","endLine":331,"endColumn":35},{"ruleId":"641","severity":1,"message":"716","line":9,"column":10,"nodeType":"643","messageId":"644","endLine":9,"endColumn":17},{"ruleId":"641","severity":1,"message":"731","line":38,"column":10,"nodeType":"643","messageId":"644","endLine":38,"endColumn":27},{"ruleId":"637","severity":1,"message":"638","line":94,"column":19,"nodeType":"639","messageId":"640","endLine":94,"endColumn":30},{"ruleId":"641","severity":1,"message":"732","line":4,"column":33,"nodeType":"643","messageId":"644","endLine":4,"endColumn":44},{"ruleId":"641","severity":1,"message":"733","line":4,"column":51,"nodeType":"643","messageId":"644","endLine":4,"endColumn":57},{"ruleId":"641","severity":1,"message":"716","line":9,"column":10,"nodeType":"643","messageId":"644","endLine":9,"endColumn":17},{"ruleId":"641","severity":1,"message":"734","line":21,"column":17,"nodeType":"643","messageId":"644","endLine":21,"endColumn":27},{"ruleId":"637","severity":1,"message":"638","line":28,"column":5,"nodeType":"639","messageId":"640","endLine":28,"endColumn":16},{"ruleId":"637","severity":1,"message":"638","line":74,"column":25,"nodeType":"639","messageId":"640","endLine":74,"endColumn":36},{"ruleId":"641","severity":1,"message":"735","line":4,"column":10,"nodeType":"643","messageId":"644","endLine":4,"endColumn":19},{"ruleId":"641","severity":1,"message":"736","line":4,"column":21,"nodeType":"643","messageId":"644","endLine":4,"endColumn":29},{"ruleId":"641","severity":1,"message":"737","line":5,"column":10,"nodeType":"643","messageId":"644","endLine":5,"endColumn":17},{"ruleId":"641","severity":1,"message":"717","line":37,"column":7,"nodeType":"643","messageId":"644","endLine":37,"endColumn":14},{"ruleId":"641","severity":1,"message":"738","line":45,"column":5,"nodeType":"643","messageId":"644","endLine":45,"endColumn":20},{"ruleId":"641","severity":1,"message":"739","line":51,"column":5,"nodeType":"643","messageId":"644","endLine":51,"endColumn":17},{"ruleId":"641","severity":1,"message":"680","line":59,"column":10,"nodeType":"643","messageId":"644","endLine":59,"endColumn":18},{"ruleId":"641","severity":1,"message":"740","line":61,"column":23,"nodeType":"643","messageId":"644","endLine":61,"endColumn":37},{"ruleId":"637","severity":1,"message":"638","line":99,"column":14,"nodeType":"639","messageId":"640","endLine":99,"endColumn":25},{"ruleId":"667","severity":1,"message":"741","line":100,"column":6,"nodeType":"669","endLine":100,"endColumn":53,"suggestions":"742"},{"ruleId":"637","severity":1,"message":"638","line":111,"column":16,"nodeType":"639","messageId":"640","endLine":111,"endColumn":27},{"ruleId":"667","severity":1,"message":"743","line":113,"column":6,"nodeType":"669","endLine":113,"endColumn":17,"suggestions":"744"},{"ruleId":"682","severity":1,"message":"683","line":229,"column":33,"nodeType":"684","messageId":"640","endLine":229,"endColumn":42},{"ruleId":"641","severity":1,"message":"745","line":25,"column":10,"nodeType":"643","messageId":"644","endLine":25,"endColumn":13},{"ruleId":"641","severity":1,"message":"746","line":7,"column":85,"nodeType":"643","messageId":"644","endLine":7,"endColumn":91},{"ruleId":"641","severity":1,"message":"747","line":11,"column":23,"nodeType":"643","messageId":"644","endLine":11,"endColumn":37},{"ruleId":"641","severity":1,"message":"748","line":14,"column":36,"nodeType":"643","messageId":"644","endLine":14,"endColumn":58},{"ruleId":"641","severity":1,"message":"749","line":16,"column":10,"nodeType":"643","messageId":"644","endLine":16,"endColumn":21},{"ruleId":"641","severity":1,"message":"750","line":64,"column":7,"nodeType":"643","messageId":"644","endLine":64,"endColumn":15},{"ruleId":"641","severity":1,"message":"680","line":93,"column":10,"nodeType":"643","messageId":"644","endLine":93,"endColumn":18},{"ruleId":"641","severity":1,"message":"751","line":93,"column":20,"nodeType":"643","messageId":"644","endLine":93,"endColumn":31},{"ruleId":"641","severity":1,"message":"752","line":98,"column":54,"nodeType":"643","messageId":"644","endLine":98,"endColumn":71},{"ruleId":"641","severity":1,"message":"753","line":99,"column":5,"nodeType":"643","messageId":"644","endLine":99,"endColumn":17},{"ruleId":"641","severity":1,"message":"754","line":99,"column":52,"nodeType":"643","messageId":"644","endLine":99,"endColumn":65},{"ruleId":"667","severity":1,"message":"728","line":121,"column":6,"nodeType":"669","endLine":121,"endColumn":20,"suggestions":"755"},{"ruleId":"641","severity":1,"message":"756","line":136,"column":9,"nodeType":"643","messageId":"644","endLine":136,"endColumn":28},{"ruleId":"667","severity":1,"message":"757","line":157,"column":6,"nodeType":"669","endLine":157,"endColumn":15,"suggestions":"758"},{"ruleId":"667","severity":1,"message":"759","line":173,"column":6,"nodeType":"669","endLine":173,"endColumn":19,"suggestions":"760"},{"ruleId":"641","severity":1,"message":"761","line":349,"column":33,"nodeType":"643","messageId":"644","endLine":349,"endColumn":35},{"ruleId":"641","severity":1,"message":"762","line":10,"column":10,"nodeType":"643","messageId":"644","endLine":10,"endColumn":17},{"ruleId":"641","severity":1,"message":"649","line":13,"column":7,"nodeType":"643","messageId":"644","endLine":13,"endColumn":16},{"ruleId":"641","severity":1,"message":"763","line":25,"column":32,"nodeType":"643","messageId":"644","endLine":25,"endColumn":39},{"ruleId":"641","severity":1,"message":"764","line":60,"column":9,"nodeType":"643","messageId":"644","endLine":60,"endColumn":21},{"ruleId":"765","severity":1,"message":"766","line":142,"column":17,"nodeType":"767","messageId":"640","endLine":142,"endColumn":22},{"ruleId":"641","severity":1,"message":"675","line":8,"column":3,"nodeType":"643","messageId":"644","endLine":8,"endColumn":15},{"ruleId":"641","severity":1,"message":"768","line":13,"column":8,"nodeType":"643","messageId":"644","endLine":13,"endColumn":14},{"ruleId":"641","severity":1,"message":"769","line":25,"column":21,"nodeType":"643","messageId":"644","endLine":25,"endColumn":27},{"ruleId":"667","severity":1,"message":"770","line":70,"column":6,"nodeType":"669","endLine":70,"endColumn":17,"suggestions":"771"},{"ruleId":"641","severity":1,"message":"768","line":5,"column":8,"nodeType":"643","messageId":"644","endLine":5,"endColumn":14},{"ruleId":"641","severity":1,"message":"746","line":4,"column":135,"nodeType":"643","messageId":"644","endLine":4,"endColumn":141},{"ruleId":"641","severity":1,"message":"747","line":7,"column":23,"nodeType":"643","messageId":"644","endLine":7,"endColumn":37},{"ruleId":"641","severity":1,"message":"772","line":7,"column":83,"nodeType":"643","messageId":"644","endLine":7,"endColumn":95},{"ruleId":"641","severity":1,"message":"773","line":7,"column":97,"nodeType":"643","messageId":"644","endLine":7,"endColumn":109},{"ruleId":"641","severity":1,"message":"774","line":12,"column":33,"nodeType":"643","messageId":"644","endLine":12,"endColumn":60},{"ruleId":"641","severity":1,"message":"775","line":87,"column":57,"nodeType":"643","messageId":"644","endLine":87,"endColumn":73},{"ruleId":"641","severity":1,"message":"719","line":95,"column":19,"nodeType":"643","messageId":"644","endLine":95,"endColumn":29},{"ruleId":"641","severity":1,"message":"776","line":107,"column":10,"nodeType":"643","messageId":"644","endLine":107,"endColumn":22},{"ruleId":"641","severity":1,"message":"777","line":107,"column":24,"nodeType":"643","messageId":"644","endLine":107,"endColumn":39},{"ruleId":"667","severity":1,"message":"778","line":164,"column":6,"nodeType":"669","endLine":164,"endColumn":15,"suggestions":"779"},{"ruleId":"637","severity":1,"message":"638","line":314,"column":71,"nodeType":"639","messageId":"640","endLine":314,"endColumn":82},{"ruleId":"637","severity":1,"message":"638","line":320,"column":9,"nodeType":"639","messageId":"640","endLine":320,"endColumn":20},{"ruleId":"667","severity":1,"message":"728","line":407,"column":6,"nodeType":"669","endLine":407,"endColumn":21,"suggestions":"780"},{"ruleId":"637","severity":1,"message":"638","line":59,"column":43,"nodeType":"639","messageId":"640","endLine":59,"endColumn":54},{"ruleId":"641","severity":1,"message":"781","line":42,"column":10,"nodeType":"643","messageId":"644","endLine":42,"endColumn":26},{"ruleId":"641","severity":1,"message":"782","line":42,"column":28,"nodeType":"643","messageId":"644","endLine":42,"endColumn":47},{"ruleId":"641","severity":1,"message":"783","line":52,"column":10,"nodeType":"643","messageId":"644","endLine":52,"endColumn":16},{"ruleId":"667","severity":1,"message":"728","line":79,"column":6,"nodeType":"669","endLine":79,"endColumn":20,"suggestions":"784"},{"ruleId":"637","severity":1,"message":"638","line":119,"column":11,"nodeType":"639","messageId":"640","endLine":119,"endColumn":22},{"ruleId":"667","severity":1,"message":"785","line":125,"column":6,"nodeType":"669","endLine":125,"endColumn":16,"suggestions":"786"},{"ruleId":"637","severity":1,"message":"638","line":142,"column":5,"nodeType":"639","messageId":"640","endLine":142,"endColumn":16},{"ruleId":"637","severity":1,"message":"638","line":111,"column":5,"nodeType":"639","messageId":"640","endLine":111,"endColumn":16},{"ruleId":"637","severity":1,"message":"638","line":115,"column":5,"nodeType":"639","messageId":"640","endLine":115,"endColumn":16},{"ruleId":"637","severity":1,"message":"638","line":119,"column":5,"nodeType":"639","messageId":"640","endLine":119,"endColumn":16},{"ruleId":"637","severity":1,"message":"638","line":38,"column":5,"nodeType":"639","messageId":"640","endLine":38,"endColumn":16},{"ruleId":"637","severity":1,"message":"638","line":111,"column":5,"nodeType":"639","messageId":"640","endLine":111,"endColumn":16},{"ruleId":"637","severity":1,"message":"638","line":115,"column":5,"nodeType":"639","messageId":"640","endLine":115,"endColumn":16},{"ruleId":"637","severity":1,"message":"638","line":119,"column":5,"nodeType":"639","messageId":"640","endLine":119,"endColumn":16},{"ruleId":"641","severity":1,"message":"787","line":37,"column":16,"nodeType":"643","messageId":"644","endLine":37,"endColumn":25},{"ruleId":"641","severity":1,"message":"712","line":42,"column":10,"nodeType":"643","messageId":"644","endLine":42,"endColumn":20},{"ruleId":"641","severity":1,"message":"788","line":13,"column":8,"nodeType":"643","messageId":"644","endLine":13,"endColumn":24},{"ruleId":"641","severity":1,"message":"649","line":18,"column":7,"nodeType":"643","messageId":"644","endLine":18,"endColumn":16},{"ruleId":"667","severity":1,"message":"789","line":62,"column":6,"nodeType":"669","endLine":62,"endColumn":22,"suggestions":"790"},{"ruleId":"667","severity":1,"message":"728","line":66,"column":6,"nodeType":"669","endLine":66,"endColumn":16,"suggestions":"791"},{"ruleId":"637","severity":1,"message":"638","line":90,"column":41,"nodeType":"639","messageId":"640","endLine":90,"endColumn":52},{"ruleId":"641","severity":1,"message":"792","line":120,"column":9,"nodeType":"643","messageId":"644","endLine":120,"endColumn":23},{"ruleId":"637","severity":1,"message":"638","line":16,"column":3,"nodeType":"639","messageId":"640","endLine":16,"endColumn":14},"no-console","Unexpected console statement.","MemberExpression","unexpected","@typescript-eslint/no-unused-vars","'message' is defined but never used.","Identifier","unusedVar","'Modal' is defined but never used.","'Select' is defined but never used.","'Space' is defined but never used.","'FlagFilled' is defined but never used.","'cssPrefix' is assigned a value but never used.","'useNavigate' is defined but never used.","'Cookies' is defined but never used.","'reconstructedData' is assigned a value but never used.","'AttachmentDate' is assigned a value but never used.","'isMobile' is defined but never used.","'Title' is assigned a value but never used.","'pageHeader' is assigned a value but never used.","'BreadCrumb' is defined but never used.","'confirm' is assigned a value but never used.","'getAnimalListSuccess' is assigned a value but never used.","'currentPage' is assigned a value but never used.","'addAnimalSuccess' is assigned a value but never used.","'getAnimalListSuggestionCall' is assigned a value but never used.","'filteredTableData' is assigned a value but never used.","'selectedId' is assigned a value but never used.","'setSelectedId' is assigned a value but never used.","'updateSelectedRows' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getAnimalListCall'. Either include it or remove the dependency array.","ArrayExpression",["793"],"React Hook useEffect has missing dependencies: 'currentPageLocal', 'getAnimalListCall', and 'tableFilter'. Either include them or remove the dependency array.",["794"],"React Hook useEffect has a missing dependency: 'setSelectedAnimal'. Either include it or remove the dependency array.",["795"],"'AutoComplete' is defined but never used.","'QuestionCircleOutlined' is defined but never used.","'TableData' is defined but never used.","'setTableData' is assigned a value but never used.","'setFilteredTableData' is assigned a value but never used.","'tempForm' is assigned a value but never used.","'setClickedValue' is assigned a value but never used.","no-alert","Unexpected alert.","CallExpression","'sortedInfo' is assigned a value but never used.","'filteredInfo' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'clickedValue', 'getPcoListCall', and 'searchKey'. Either include them or remove the dependency array.",["796"],"React Hook useEffect has missing dependencies: 'clickedValue', 'currentPageLocal', 'getPcoListCall', and 'tableFilter'. Either include them or remove the dependency array.",["797"],"React Hook useEffect has a missing dependency: 'setSelectedPco'. Either include it or remove the dependency array.",["798"],"'Button' is defined but never used.","React Hook useEffect has a missing dependency: 'getCountCall'. Either include it or remove the dependency array.",["799"],"'countryCodePhone2' is assigned a value but never used.","'setCountryCodePhone2' is assigned a value but never used.","'setNewKey' is assigned a value but never used.","'setSearchParams' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getUserDetailByToken' and 'searchParams'. Either include them or remove the dependency array.",["800"],"'Option' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'currentPageLocal', 'getAnimalMilestoneListCall', and 'selectedAnimalId'. Either include them or remove the dependency array.",["801"],"React Hook useEffect has a missing dependency: 'animalList'. Either include it or remove the dependency array.",["802"],"React Hook useEffect has missing dependencies: 'searchParams' and 'verifySignupByToken'. Either include them or remove the dependency array.",["803"],"'Col' is defined but never used.","'searchParams' is assigned a value but never used.","'pageType' is assigned a value but never used.","'editingKey' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'currentRecord', 'getDeleteConfirmationDetail', and 'showConfirmModal'. Either include them or remove the dependency array.",["804"],"'Row' is defined but never used.","'isEqual' is defined but never used.","'cookies' is assigned a value but never used.","'animalDetail' is assigned a value but never used.","'setLoading' is assigned a value but never used.","'animalType' is assigned a value but never used.","'howAcquired' is assigned a value but never used.","'otherRescueShelter' is assigned a value but never used.","'disabledDate' is assigned a value but never used.","'sexValidator' is assigned a value but never used.","'getActualBirthdate' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'animalMilestoneList', 'editRecord?.milestoneType', 'form', and 'setSelectedPco'. Either include them or remove the dependency array.",["805"],"React Hook useEffect has a missing dependency: 'form'. Either include it or remove the dependency array.",["806"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","'aqusitionIdToName' is assigned a value but never used.","'InputNumber' is defined but never used.","'Switch' is defined but never used.","'firstError' is assigned a value but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'connect' is defined but never used.","'userCountryCode' is assigned a value but never used.","'getPcoFilter' is assigned a value but never used.","'setTableFilter' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getPcoListCall' and 'setFirstError'. Either include them or remove the dependency array.",["807"],"React Hook useEffect has missing dependencies: 'currentPageLocal', 'getPcoListCall', 'searchKeyFinal', and 'tableFilter?.entityType'. Either include them or remove the dependency array.",["808"],"'key' is assigned a value but never used.","'Upload' is defined but never used.","'UploadOutlined' is defined but never used.","'PhoneValidationTooltip' is defined but never used.","'AddFormData' is defined but never used.","'normFile' is assigned a value but never used.","'setTempForm' is assigned a value but never used.","'setSearchKeyFinal' is assigned a value but never used.","'setSearchKey' is assigned a value but never used.","'selectedPcoId' is assigned a value but never used.",["809"],"'ifEditMode' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'editRecord', 'form', 'onEntityChange', 'setEditRecord', 'setSelectedPco', and 'userCountryCode'. Either include them or remove the dependency array.",["810"],"React Hook useEffect has a missing dependency: 'countryId'. Either include it or remove the dependency array.",["811"],"'id' is assigned a value but never used.","'apiCall' is defined but never used.","'visible' is assigned a value but never used.","'handleCancel' is assigned a value but never used.","no-constant-condition","Unexpected constant condition.","Literal","'Search' is defined but never used.","'values' is defined but never used.","React Hook useEffect has missing dependencies: 'props?.pageLength' and 'props?.tableFilter'. Either include them or remove the dependency array.",["812"],"'PlusOutlined' is defined but never used.","'EditOutlined' is defined but never used.","'AssignedIDValidationTooltip' is defined but never used.","'selectedAnimalId' is assigned a value but never used.","'highlightKey' is assigned a value but never used.","'setHighlightKey' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'editRecord', 'form', 'setEditRecord', and 'setSelectedPcoId'. Either include them or remove the dependency array.",["813"],["814"],"'validationStatus' is assigned a value but never used.","'setValidationStatus' is assigned a value but never used.","'newKey' is assigned a value but never used.",["815"],"React Hook useEffect has missing dependencies: 'countryName' and 'form'. Either include them or remove the dependency array.",["816"],"'tableType' is assigned a value but never used.","'CustomPhoneInput' is defined but never used.","React Hook useEffect has missing dependencies: 'editModal', 'form', 'permissionConstant', 'setUserForm', and 'userForm'. Either include them or remove the dependency array.",["817"],["818"],"'setPhoneNumber' is assigned a value but never used.",{"desc":"819","fix":"820"},{"desc":"821","fix":"822"},{"desc":"823","fix":"824"},{"desc":"825","fix":"826"},{"desc":"827","fix":"828"},{"desc":"829","fix":"830"},{"desc":"831","fix":"832"},{"desc":"833","fix":"834"},{"desc":"835","fix":"836"},{"desc":"837","fix":"838"},{"desc":"839","fix":"840"},{"desc":"841","fix":"842"},{"desc":"843","fix":"844"},{"desc":"845","fix":"846"},{"desc":"847","fix":"848"},{"desc":"849","fix":"850"},{"desc":"851","fix":"852"},{"desc":"853","fix":"854"},{"desc":"855","fix":"856"},{"desc":"857","fix":"858"},{"desc":"859","fix":"860"},{"desc":"861","fix":"862"},{"desc":"851","fix":"863"},{"desc":"864","fix":"865"},{"desc":"866","fix":"867"},{"desc":"868","fix":"869"},"Update the dependencies array to be: [currentPageLocal, tableFilter, searchKeyFinal, getAnimalListCall]",{"range":"870","text":"871"},"Update the dependencies array to be: [currentPageLocal, getAnimalListCall, searchKey, tableFilter]",{"range":"872","text":"873"},"Update the dependencies array to be: [setSelectedAnimal]",{"range":"874","text":"875"},"Update the dependencies array to be: [currentPageLocal, tableFilter, searchKeyFinal, getPcoListCall, clickedValue, searchKey]",{"range":"876","text":"877"},"Update the dependencies array to be: [clickedValue, currentPageLocal, getPcoListCall, searchKey, tableFilter]",{"range":"878","text":"879"},"Update the dependencies array to be: [setSelectedPco]",{"range":"880","text":"881"},"Update the dependencies array to be: [getCountCall, titleRef]",{"range":"882","text":"883"},"Update the dependencies array to be: [getUserDetailByToken, searchParams]",{"range":"884","text":"885"},"Update the dependencies array to be: [currentPageLocal, getAnimalMilestoneListCall, selectedAnimalId]",{"range":"886","text":"887"},"Update the dependencies array to be: [animalList, selectedAnimalId]",{"range":"888","text":"889"},"Update the dependencies array to be: [searchParams, verifySignupByToken]",{"range":"890","text":"891"},"Update the dependencies array to be: [currentRecord, deleteConfirmationData, getDeleteConfirmationDetail, showConfirmModal]",{"range":"892","text":"893"},"Update the dependencies array to be: [animalMilestoneList, editRecord?.milestoneType, form, setSelectedPco, visible]",{"range":"894","text":"895"},"Update the dependencies array to be: [form]",{"range":"896","text":"897"},"Update the dependencies array to be: [currentPageLocal, tableFilter, searchKeyFinal, setFirstError, getPcoListCall]",{"range":"898","text":"899"},"Update the dependencies array to be: [currentPageLocal, getPcoListCall, searchKey, searchKeyFinal, tableFilter?.entityType]",{"range":"900","text":"901"},"Update the dependencies array to be: [form, highlightKey]",{"range":"902","text":"903"},"Update the dependencies array to be: [editRecord, form, onEntityChange, setEditRecord, setSelectedPco, userCountryCode, visible]",{"range":"904","text":"905"},"Update the dependencies array to be: [countryId, countryList]",{"range":"906","text":"907"},"Update the dependencies array to be: [props?.pageLength, props?.tableFilter, searchKey]",{"range":"908","text":"909"},"Update the dependencies array to be: [editRecord, form, setEditRecord, setSelectedPcoId, visible]",{"range":"910","text":"911"},"Update the dependencies array to be: [form, selectedPcoId]",{"range":"912","text":"913"},{"range":"914","text":"903"},"Update the dependencies array to be: [countryName, editData, form]",{"range":"915","text":"916"},"Update the dependencies array to be: [editModal, form, isModalVisible, permissionConstant, setUserForm, userForm]",{"range":"917","text":"918"},"Update the dependencies array to be: [form, userForm]",{"range":"919","text":"920"},[5308,5355],"[currentPageLocal, tableFilter, searchKeyFinal, getAnimalListCall]",[5669,5680],"[currentPageLocal, getAnimalListCall, searchKey, tableFilter]",[5736,5738],"[setSelectedAnimal]",[7366,7413],"[currentPageLocal, tableFilter, searchKeyFinal, getPcoListCall, clickedValue, searchKey]",[7741,7752],"[clickedValue, currentPageLocal, getPcoListCall, searchKey, tableFilter]",[7805,7807],"[setSelectedPco]",[1015,1025],"[getCountCall, titleRef]",[2647,2649],"[getUserDetailByToken, searchParams]",[3130,3132],"[currentPageLocal, getAnimalMilestoneListCall, selectedAnimalId]",[3366,3384],"[animalList, selectedAnimalId]",[1204,1206],"[searchParams, verifySignupByToken]",[3474,3498],"[currentRecord, deleteConfirmationData, getDeleteConfirmationDetail, showConfirmModal]",[9921,9930],"[animalMilestoneList, editRecord?.milestoneType, form, setSelectedPco, visible]",[10017,10040],"[form]",[2892,2939],"[currentPageLocal, tableFilter, searchKeyFinal, setFirstError, getPcoListCall]",[3274,3285],"[currentPageLocal, getPcoListCall, searchKey, searchKeyFinal, tableFilter?.entityType]",[4248,4262],"[form, highlightKey]",[5438,5447],"[editRecord, form, onEntityChange, setEditRecord, setSelectedPco, userCountryCode, visible]",[5883,5896],"[countryId, countryList]",[2040,2051],"[props?.pageLength, props?.tableFilter, searchKey]",[5979,5988],"[editRecord, form, setEditRecord, setSelectedPcoId, visible]",[13763,13778],"[form, selectedPcoId]",[2605,2619],[4205,4215],"[countryName, editData, form]",[1998,2014],"[editModal, form, isModalVisible, permissionConstant, setUserForm, userForm]",[2106,2116],"[form, userForm]"]